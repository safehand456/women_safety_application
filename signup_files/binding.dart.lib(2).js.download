// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/foundation/binding.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/timeline.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/service_extensions.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__foundation__binding_dart(dart_sdk, packages__flutter__src__foundation__timeline$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__service_extensions$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const developer = dart_sdk.developer;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const convert = dart_sdk.convert;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const timeline = packages__flutter__src__foundation__timeline$46dart.src__foundation__timeline;
  const assertions = packages__flutter__src__foundation___platform_web$46dart.src__foundation__assertions;
  const debug = packages__flutter__src__foundation___platform_web$46dart.src__foundation__debug;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const service_extensions = packages__flutter__src__foundation__service_extensions$46dart.src__foundation__service_extensions;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var binding = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/foundation/binding.dart",
    "package:flutter/src/foundation/binding.dart",
    "dart:core",
    "dart:async"
  ];
  var _debugConstructed = dart.privateName(binding, "_debugConstructed");
  var _debugBindingZone = dart.privateName(binding, "_debugBindingZone");
  var _lockCount = dart.privateName(binding, "_lockCount");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _is = dart.privateName(dart_rti, "_is");
  var _postExtensionStateChangedEvent = dart.privateName(binding, "_postExtensionStateChangedEvent");
  binding.BindingBase = class BindingBase extends core.Object {
    get window() {
      return ui.window;
    }
    get platformDispatcher() {
      return ui.PlatformDispatcher.instance;
    }
    initInstances() {
      if (!(binding.BindingBase._debugInitializedType == null)) dart.assertFailed(null, I[0], 287, 12, "_debugInitializedType == null");
      if (!dart.fn(() => {
        binding.BindingBase._debugInitializedType = dart.runtimeType(this);
        this[_debugBindingZone] = async.Zone.current;
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 288, 12, "() {\r\n      _debugInitializedType = runtimeType;\r\n      _debugBindingZone = Zone.current;\r\n      return true;\r\n    }()");
    }
    static checkInstance(T, instance) {
      if (!dart.fn(() => {
        if (binding.BindingBase._debugInitializedType == null && instance == null) {
          dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "Binding has not yet been initialized."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "The \"instance\" getter on the " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " binding mixin is only available once that binding has been initialized."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "If " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, " + "but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.")])));
        }
        if (instance == null) {
          if (!(binding.BindingBase._debugInitializedType == null)) dart.assertFailed(null, I[0], 330, 16, "_debugInitializedType == null");
          dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "Binding mixin instance is null but bindings are already initialized."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "The \"instance\" property of the " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " binding mixin was accessed, but that binding was not initialized when " + "the \"initInstances()\" method was called."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "This probably indicates that the " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " mixin was not mixed into the class that was used to initialize the binding. " + "If this is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, " + "but that mixes in the selected binding. If this is a test binding, check that the binding being initialized " + "is the same as the one into which the test binding is mixed."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "It is also possible that " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " does not implement \"initInstances()\" to assign a value to \"instance\". See the " + "documentation of the BindingBase class for more details."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "The binding that was initialized was of the type \"" + dart.str(binding.BindingBase._debugInitializedType) + "\". ")])));
        }
        try {
          if (instance[_debugConstructed] && binding.BindingBase._debugInitializedType == null) {
            dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "Binding initialized without calling initInstances."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "An instance of " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " is non-null, but BindingBase.initInstances() has not yet been called."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "This could happen because a binding mixin was somehow used outside of the normal binding mechanisms, or because the binding's initInstances() method did not call \"super.initInstances()\"."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "This could also happen if some code was invoked that used the binding while the binding was initializing, for example if the \"initInstances\" method invokes a callback. Bindings should not invoke callbacks before \"initInstances\" has completed.")])));
          }
          if (!instance[_debugConstructed]) {
            dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "Binding did not complete initialization."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "An instance of " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " is non-null, but the BindingBase() constructor has not yet been called."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "This could also happen if some code was invoked that used the binding while the binding was initializing, for example if the binding's constructor itself invokes a callback. Bindings should not invoke callbacks before \"initInstances\" has completed.")])));
          }
        } catch (t$36$35e) {
          let t$36$35ex = dart.getThrown(t$36$35e);
          if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|NoSuchMethodError", true)[_is](t$36$35ex)) {
            dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "Binding does not extend BindingBase"), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "An instance of " + dart.str(dart_rti.createRuntimeType(dart_rti.instanceType(this)[_bind](T)[_eval]("1"))) + " was created but the BindingBase constructor was not called."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "This could happen because the binding was implemented using \"implements\" rather than \"extends\" or \"with\". Concrete binding classes must extend or mix in BindingBase.")])));
          } else
            throw t$36$35e;
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 308, 12, "() {\r\n      if (_debugInitializedType == null && instance == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Binding has not yet been initialized.'),\r\n          ErrorDescription('The \"instance\" getter on the $T binding mixin is only available once that binding has been initialized.'),\r\n          ErrorHint(\r\n            'Typically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the '\r\n            'latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method '\r\n            'is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will '\r\n            'return the binding.',\r\n          ),\r\n          ErrorHint(\r\n            'In a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test\\'s \"main()\" method '\r\n            'to initialize the binding.',\r\n          ),\r\n          ErrorHint(\r\n            'If $T is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, '\r\n            'but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.',\r\n          ),\r\n        ]);\r\n      }\r\n      if (instance == null) {\r\n        assert(_debugInitializedType == null);\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Binding mixin instance is null but bindings are already initialized.'),\r\n          ErrorDescription(\r\n            'The \"instance\" property of the $T binding mixin was accessed, but that binding was not initialized when '\r\n            'the \"initInstances()\" method was called.',\r\n          ),\r\n          ErrorHint(\r\n            'This probably indicates that the $T mixin was not mixed into the class that was used to initialize the binding. '\r\n            'If this is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, '\r\n            'but that mixes in the selected binding. If this is a test binding, check that the binding being initialized '\r\n            'is the same as the one into which the test binding is mixed.',\r\n          ),\r\n          ErrorHint(\r\n            'It is also possible that $T does not implement \"initInstances()\" to assign a value to \"instance\". See the '\r\n            'documentation of the BindingBase class for more details.',\r\n          ),\r\n          ErrorHint(\r\n            'The binding that was initialized was of the type \"$_debugInitializedType\". '\r\n          ),\r\n        ]);\r\n      }\r\n      try {\r\n        if (instance._debugConstructed && _debugInitializedType == null) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Binding initialized without calling initInstances.'),\r\n            ErrorDescription('An instance of $T is non-null, but BindingBase.initInstances() has not yet been called.'),\r\n            ErrorHint(\r\n              'This could happen because a binding mixin was somehow used outside of the normal binding mechanisms, or because '\r\n              'the binding\\'s initInstances() method did not call \"super.initInstances()\".',\r\n            ),\r\n            ErrorHint(\r\n              'This could also happen if some code was invoked that used the binding while the binding was initializing, '\r\n              'for example if the \"initInstances\" method invokes a callback. Bindings should not invoke callbacks before '\r\n              '\"initInstances\" has completed.',\r\n            ),\r\n          ]);\r\n        }\r\n        if (!instance._debugConstructed) {\r\n          // The state of _debugInitializedType doesn't matter in this failure mode.\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Binding did not complete initialization.'),\r\n            ErrorDescription('An instance of $T is non-null, but the BindingBase() constructor has not yet been called.'),\r\n            ErrorHint(\r\n              'This could also happen if some code was invoked that used the binding while the binding was initializing, '\r\n              \"for example if the binding's constructor itself invokes a callback. Bindings should not invoke callbacks \"\r\n              'before \"initInstances\" has completed.',\r\n            ),\r\n          ]);\r\n        }\r\n      } on NoSuchMethodError {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Binding does not extend BindingBase'),\r\n          ErrorDescription('An instance of $T was created but the BindingBase constructor was not called.'),\r\n          ErrorHint(\r\n            'This could happen because the binding was implemented using \"implements\" rather than \"extends\" or \"with\". '\r\n            'Concrete binding classes must extend or mix in BindingBase.',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return dart.nullCheck(instance);
    }
    static debugBindingType() {
      return binding.BindingBase._debugInitializedType;
    }
    debugCheckZone(entryPoint) {
      if (!dart.fn(() => {
        if (!(this[_debugBindingZone] != null)) dart.assertFailed("debugCheckZone can only be used after the binding is fully initialized.", I[0], 485, 14, "_debugBindingZone != null");
        if (!async.Zone.current[$_equals](this[_debugBindingZone])) {
          let message = assertions.FlutterError.new("Zone mismatch.\n" + "The Flutter bindings were initialized in a different zone than is now being used. " + "This will likely cause confusion and bugs as any zone-specific configuration will " + "inconsistently use the configuration of the original binding initialization zone " + "or this zone based on hard-to-predict factors such as which zone was active when " + "a particular callback was set.\n" + "It is important to use the same zone when calling `ensureInitialized` on the binding " + "as when calling `" + entryPoint + "` later.\n" + "To make this " + (binding.BindingBase.debugZoneErrorsAreFatal ? "error non-fatal" : "warning fatal") + ", " + "set BindingBase.debugZoneErrorsAreFatal to " + dart.strSafe(!binding.BindingBase.debugZoneErrorsAreFatal) + " before the " + "bindings are initialized (i.e. as the first statement in `void main() { }`).");
          if (binding.BindingBase.debugZoneErrorsAreFatal) {
            dart.throw(message);
          }
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: message, stack: core.StackTrace.current, context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "during " + entryPoint)}));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 484, 12, "() {\r\n      assert(_debugBindingZone != null, 'debugCheckZone can only be used after the binding is fully initialized.');\r\n      if (Zone.current != _debugBindingZone) {\r\n        final Error message = FlutterError(\r\n          'Zone mismatch.\\n'\r\n          'The Flutter bindings were initialized in a different zone than is now being used. '\r\n          'This will likely cause confusion and bugs as any zone-specific configuration will '\r\n          'inconsistently use the configuration of the original binding initialization zone '\r\n          'or this zone based on hard-to-predict factors such as which zone was active when '\r\n          'a particular callback was set.\\n'\r\n          'It is important to use the same zone when calling `ensureInitialized` on the binding '\r\n          'as when calling `$entryPoint` later.\\n'\r\n          'To make this ${ debugZoneErrorsAreFatal ? 'error non-fatal' : 'warning fatal' }, '\r\n          'set BindingBase.debugZoneErrorsAreFatal to ${!debugZoneErrorsAreFatal} before the '\r\n          'bindings are initialized (i.e. as the first statement in `void main() { }`).',\r\n        );\r\n        if (debugZoneErrorsAreFatal) {\r\n          throw message;\r\n        }\r\n        FlutterError.reportError(FlutterErrorDetails(\r\n          exception: message,\r\n          stack: StackTrace.current,\r\n          context: ErrorDescription('during $entryPoint'),\r\n        ));\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    initServiceExtensions() {
      if (!!binding.BindingBase._debugServiceExtensionsRegistered) dart.assertFailed(null, I[0], 535, 12, "!_debugServiceExtensionsRegistered");
      if (!dart.fn(() => {
        this.registerSignalServiceExtension({name: core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.reassemble), callback: dart.bind(this, 'reassembleApplication')});
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 537, 12, "() {\r\n      registerSignalServiceExtension(\r\n        name: FoundationServiceExtensions.reassemble.name,\r\n        callback: reassembleApplication,\r\n      );\r\n      return true;\r\n    }()");
      {
        ;
        this.registerStringServiceExtension({name: core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.connectedVmServiceUri), getter: dart.fn(() => {
            let t$362;
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)), t$returnValue;
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    t$362 = debug.connectedVmServiceUri;
                    t$returnValue = t$362 == null ? "" : t$362;
                    // goto return
                    t$goto = 2;
                    break;
                  case 2:
                    // return
                    return async._asyncReturn(t$returnValue, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|String>()", true)), setter: dart.fn(uri => {
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true));
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    debug.connectedVmServiceUri = uri;
                    // implicit return
                    return async._asyncReturn(null, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|String)", true))});
        this.registerStringServiceExtension({name: core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.activeDevToolsServerAddress), getter: dart.fn(() => {
            let t$362;
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)), t$returnValue;
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    t$362 = debug.activeDevToolsServerAddress;
                    t$returnValue = t$362 == null ? "" : t$362;
                    // goto return
                    t$goto = 2;
                    break;
                  case 2:
                    // return
                    return async._asyncReturn(t$returnValue, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|String>()", true)), setter: dart.fn(serverAddress => {
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true));
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    debug.activeDevToolsServerAddress = serverAddress;
                    // implicit return
                    return async._asyncReturn(null, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|String)", true))});
      }
      if (!dart.fn(() => {
        this.registerServiceExtension({name: core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.platformOverride), callback: dart.fn(parameters => {
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue, asyncScope = Object.create(null);
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    t$goto = parameters[$containsKey]("value") ? 2 : 3;
                    break;
                  case 2:
                    // then
                    asyncScope.value = dart.nullCheck(parameters[$_get]("value"));
                    platform.debugDefaultTargetPlatformOverride = null;
                    for (let candidate of platform.TargetPlatform.values)
                      if (core['EnumName|get#name'](candidate) === asyncScope.value) {
                        platform.debugDefaultTargetPlatformOverride = candidate;
                        break;
                      }
                    this[_postExtensionStateChangedEvent](core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.platformOverride), core['EnumName|get#name'](platform.defaultTargetPlatform));
                    t$goto = 4;
                    return async._asyncAwait(this.reassembleApplication(), t$36asyncBody, t$completer);
                  case 4:
                    // returning from await.
                  case 3:
                    // join
                    t$returnValue = new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true), ["value", core['EnumName|get#name'](platform.defaultTargetPlatform)]);
                    // goto return
                    t$goto = 5;
                    break;
                  case 5:
                    // return
                    return async._asyncReturn(t$returnValue, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
        this.registerServiceExtension({name: core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.brightnessOverride), callback: dart.fn(parameters => {
            let t$364, t$364$;
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue;
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    t$goto = parameters[$containsKey]("value") ? 2 : 3;
                    break;
                  case 2:
                    // then
                    debug.debugBrightnessOverride = (() => {
                      let t$362 = null;
                      let t$36$350$350 = parameters[$_get]("value");
                      L0: {
                        {
                          if ("Brightness.light" === t$36$350$350) {
                            t$362 = ui.Brightness.light;
                            break L0;
                          }
                        }
                        {
                          if ("Brightness.dark" === t$36$350$350) {
                            t$362 = ui.Brightness.dark;
                            break L0;
                          }
                        }
                        {
                          {
                            t$362 = null;
                            break L0;
                          }
                        }
                      }
                      return t$362;
                    })();
                    this[_postExtensionStateChangedEvent](core['EnumName|get#name'](service_extensions.FoundationServiceExtensions.brightnessOverride), dart.toString((t$364 = debug.debugBrightnessOverride, t$364 == null ? this.platformDispatcher.platformBrightness : t$364)));
                    t$goto = 4;
                    return async._asyncAwait(this.reassembleApplication(), t$36asyncBody, t$completer);
                  case 4:
                    // returning from await.
                  case 3:
                    // join
                    t$returnValue = new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true), ["value", dart.toString((t$364$ = debug.debugBrightnessOverride, t$364$ == null ? this.platformDispatcher.platformBrightness : t$364$))]);
                    // goto return
                    t$goto = 5;
                    break;
                  case 5:
                    // return
                    return async._asyncReturn(t$returnValue, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 569, 12, "() {\r\n      registerServiceExtension(\r\n        name: FoundationServiceExtensions.platformOverride.name,\r\n        callback: (Map<String, String> parameters) async {\r\n          if (parameters.containsKey('value')) {\r\n            final String value = parameters['value']!;\r\n            debugDefaultTargetPlatformOverride = null;\r\n            for (final TargetPlatform candidate in TargetPlatform.values) {\r\n              if (candidate.name == value) {\r\n                debugDefaultTargetPlatformOverride = candidate;\r\n                break;\r\n              }\r\n            }\r\n            _postExtensionStateChangedEvent(\r\n              FoundationServiceExtensions.platformOverride.name,\r\n              defaultTargetPlatform.name,\r\n            );\r\n            await reassembleApplication();\r\n          }\r\n          return <String, dynamic>{\r\n            'value': defaultTargetPlatform.name,\r\n          };\r\n        },\r\n      );\r\n\r\n      registerServiceExtension(\r\n        name: FoundationServiceExtensions.brightnessOverride.name,\r\n        callback: (Map<String, String> parameters) async {\r\n          if (parameters.containsKey('value')) {\r\n            debugBrightnessOverride = switch (parameters['value']) {\r\n              'Brightness.light' => ui.Brightness.light,\r\n              'Brightness.dark'  => ui.Brightness.dark,\r\n              _ => null,\r\n            };\r\n            _postExtensionStateChangedEvent(\r\n              FoundationServiceExtensions.brightnessOverride.name,\r\n              (debugBrightnessOverride ?? platformDispatcher.platformBrightness).toString(),\r\n            );\r\n            await reassembleApplication();\r\n          }\r\n          return <String, dynamic>{\r\n            'value': (debugBrightnessOverride ?? platformDispatcher.platformBrightness).toString(),\r\n          };\r\n        },\r\n      );\r\n      return true;\r\n    }()");
      if (!dart.fn(() => {
        binding.BindingBase._debugServiceExtensionsRegistered = true;
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 616, 12, "() {\r\n      _debugServiceExtensionsRegistered = true;\r\n      return true;\r\n    }()");
    }
    get locked() {
      return this[_lockCount] > 0;
    }
    lockEvents(callback) {
      let t$364;
      let debugTimelineTask = null;
      {
        debugTimelineTask = (t$364 = new developer.TimelineTask.new(), (() => {
          t$364.start("Lock events");
          return t$364;
        })());
      }
      this[_lockCount] = this[_lockCount] + 1;
      let future = callback();
      future.whenComplete(dart.fn(() => {
        this[_lockCount] = this[_lockCount] - 1;
        if (!this.locked) {
          {
            dart.nullCheck(debugTimelineTask).finish();
          }
          try {
            this.unlocked();
          } catch (t$36$35e) {
            let error = dart.getThrown(t$36$35e);
            let stack = dart.stackTrace(t$36$35e);
            if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](error)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: error, stack: stack, library: "foundation", context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "while handling pending events")}));
            } else
              throw t$36$35e;
          }
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null()", true)));
      return future;
    }
    unlocked() {
      if (!!this.locked) dart.assertFailed(null, I[0], 682, 12, "!locked");
    }
    reassembleApplication() {
      return this.lockEvents(dart.bind(this, 'performReassemble'));
    }
    performReassemble() {
      assertions.FlutterError.resetErrorCount();
      return async.Future.value(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>", true));
    }
    registerSignalServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue;
          var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
            if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
            while (true)
              switch (t$goto) {
                case 0:
                  // Function start
                  t$goto = 2;
                  return async._asyncAwait(callback(), t$36asyncBody, t$completer);
                case 2:
                  // returning from await.
                  t$returnValue = new _js_helper.IdentityMap.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true));
                  // goto return
                  t$goto = 3;
                  break;
                case 3:
                  // return
                  return async._asyncReturn(t$returnValue, t$completer);
              }
          });
          return async._asyncStartSync(t$36asyncBody, t$completer);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
    }
    registerBoolServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let getter = opts && 'getter' in opts ? opts.getter : null;
      let setter = opts && 'setter' in opts ? opts.setter : null;
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue, t$temp, t$temp$, t$temp$0, t$temp$1, t$temp$2;
          var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
            if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
            while (true)
              switch (t$goto) {
                case 0:
                  // Function start
                  t$goto = parameters[$containsKey]("enabled") ? 2 : 3;
                  break;
                case 2:
                  // then
                  t$goto = 4;
                  return async._asyncAwait(setter(parameters[$_get]("enabled") === "true"), t$36asyncBody, t$completer);
                case 4:
                  // returning from await.
                  t$temp = this[_postExtensionStateChangedEvent].bind(this);
                  t$temp$ = name;
                  t$goto = 5;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 5:
                  // returning from await.
                  t$temp(t$temp$, t$result ? "true" : "false");
                case 3:
                  // join
                  t$temp$0 = _js_helper.IdentityMap;
                  t$temp$1 = _js_helper.IdentityMap.from;
                  t$temp$2 = dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true);
                  t$goto = 6;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 6:
                  // returning from await.
                  t$returnValue = new t$temp$1(t$temp$2, ["enabled", t$result ? "true" : "false"]);
                  // goto return
                  t$goto = 7;
                  break;
                case 7:
                  // return
                  return async._asyncReturn(t$returnValue, t$completer);
              }
          });
          return async._asyncStartSync(t$36asyncBody, t$completer);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
    }
    registerNumericServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let getter = opts && 'getter' in opts ? opts.getter : null;
      let setter = opts && 'setter' in opts ? opts.setter : null;
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue, t$temp, t$temp$, t$temp$0, t$temp$1, t$temp$2, t$temp$3;
          var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
            if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
            while (true)
              switch (t$goto) {
                case 0:
                  // Function start
                  t$goto = parameters[$containsKey](name) ? 2 : 3;
                  break;
                case 2:
                  // then
                  t$goto = 4;
                  return async._asyncAwait(setter(core.double.parse(dart.nullCheck(parameters[$_get](name)))), t$36asyncBody, t$completer);
                case 4:
                  // returning from await.
                  t$temp = this[_postExtensionStateChangedEvent].bind(this);
                  t$temp$ = name;
                  t$goto = 5;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 5:
                  // returning from await.
                  t$temp(t$temp$, t$result[$toString]());
                case 3:
                  // join
                  t$temp$0 = _js_helper.IdentityMap;
                  t$temp$1 = _js_helper.IdentityMap.from;
                  t$temp$2 = dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true);
                  t$temp$3 = name;
                  t$goto = 6;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 6:
                  // returning from await.
                  t$returnValue = new t$temp$1(t$temp$2, [t$temp$3, t$result[$toString]()]);
                  // goto return
                  t$goto = 7;
                  break;
                case 7:
                  // return
                  return async._asyncReturn(t$returnValue, t$completer);
              }
          });
          return async._asyncStartSync(t$36asyncBody, t$completer);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
    }
    [_postExtensionStateChangedEvent](name, value) {
      this.postEvent("Flutter.ServiceExtensionStateChanged", new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true), ["extension", "ext.flutter." + name, "value", value]));
    }
    postEvent(eventKind, eventData) {
      developer.postEvent(eventKind, eventData);
    }
    registerStringServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let getter = opts && 'getter' in opts ? opts.getter : null;
      let setter = opts && 'setter' in opts ? opts.setter : null;
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,@>", true)), t$returnValue, t$temp, t$temp$, t$temp$0, t$temp$1, t$temp$2;
          var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
            if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
            while (true)
              switch (t$goto) {
                case 0:
                  // Function start
                  t$goto = parameters[$containsKey]("value") ? 2 : 3;
                  break;
                case 2:
                  // then
                  t$goto = 4;
                  return async._asyncAwait(setter(dart.nullCheck(parameters[$_get]("value"))), t$36asyncBody, t$completer);
                case 4:
                  // returning from await.
                  t$temp = this[_postExtensionStateChangedEvent].bind(this);
                  t$temp$ = name;
                  t$goto = 5;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 5:
                  // returning from await.
                  t$temp(t$temp$, t$result);
                case 3:
                  // join
                  t$temp$0 = _js_helper.IdentityMap;
                  t$temp$1 = _js_helper.IdentityMap.from;
                  t$temp$2 = dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true);
                  t$goto = 6;
                  return async._asyncAwait(getter(), t$36asyncBody, t$completer);
                case 6:
                  // returning from await.
                  t$returnValue = new t$temp$1(t$temp$2, ["value", t$result]);
                  // goto return
                  t$goto = 7;
                  break;
                case 7:
                  // return
                  return async._asyncReturn(t$returnValue, t$completer);
              }
          });
          return async._asyncStartSync(t$36asyncBody, t$completer);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>)", true))});
    }
    registerServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let methodName = "ext.flutter." + name;
      developer.registerExtension(methodName, dart.fn((method, parameters) => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "developer|ServiceExtensionResponse", true)), t$returnValue, t$handler = 1, t$currentError, t$36$35result$35get, t$36$35result$35set, t$temp, t$36$35e, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) {
            t$currentError = t$result;
            t$goto = t$handler;
          }
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                asyncScope = Object.create(null);
                if (!(method === methodName)) dart.assertFailed(null, I[0], 927, 14, "method == methodName");
                if (!dart.fn(() => {
                  if (debug.debugInstrumentationEnabled) {
                    print.debugPrint("service extension method received: " + method + "(" + dart.str(parameters) + ")");
                  }
                  return true;
                }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 928, 14, "() {\r\n        if (debugInstrumentationEnabled) {\r\n          debugPrint('service extension method received: $method($parameters)');\r\n        }\r\n        return true;\r\n      }()");
                t$goto = 2;
                return async._asyncAwait(debug.debugInstrumentAction(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true), "Wait for outer event loop", dart.fn(() => async.Future.delayed(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>", true), core.Duration.zero), dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true))), t$36asyncBody, t$completer);
              case 2:
                // returning from await.
                asyncScope.result = null;
                t$36$35result$35get = (capturedAsyncScope => function() {
                  let t$365;
                  t$365 = capturedAsyncScope.result;
                  return t$365 == null ? dart.throw(new _internal.LateError.localNI("result")) : t$365;
                })(asyncScope);
                t$36$35result$35set = (capturedAsyncScope => function(result$35param) {
                  return capturedAsyncScope.result = result$35param;
                })(asyncScope);
                t$handler = 4;
                t$temp = t$36$35result$35set;
                t$goto = 7;
                return async._asyncAwait(callback(parameters), t$36asyncBody, t$completer);
              case 7:
                // returning from await.
                t$temp(t$result);
                t$handler = 1;
                // goto after finally
                t$goto = 6;
                break;
              case 4:
                // catch
                t$handler = 3;
                t$36$35e = t$currentError;
                asyncScope$.exception = dart.getThrown(t$36$35e);
                asyncScope$.stack = dart.stackTrace(t$36$35e);
                if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](asyncScope$.exception)) {
                  assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: asyncScope$.exception, stack: asyncScope$.stack, context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "during a service extension callback for \"" + method + "\"")}));
                  t$returnValue = new developer.ServiceExtensionResponse.error(-32000, convert.json.encode(new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,core|String>", true), ["exception", dart.toString(asyncScope$.exception), "stack", dart.toString(asyncScope$.stack), "method", method])));
                  // goto return
                  t$goto = 8;
                  break;
                } else
                  throw t$36$35e;
                // goto after finally
                t$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                t$goto = 1;
                break;
              case 6:
                // after finally
                t$36$35result$35get()[$_set]("type", "_extensionType");
                t$36$35result$35get()[$_set]("method", method);
                t$returnValue = new developer.ServiceExtensionResponse.result(convert.json.encode(t$36$35result$35get()));
                // goto return
                t$goto = 8;
                break;
              case 8:
                // return
                return async._asyncReturn(t$returnValue, t$completer);
              case 1:
                // rethrow
                return async._asyncRethrow(t$currentError, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<developer|ServiceExtensionResponse>(core|String,core|Map<core|String,core|String>)", true)));
    }
    toString() {
      return "<" + object.objectRuntimeType(this, "BindingBase") + ">";
    }
  };
  (binding.BindingBase.new = function() {
    this[_debugConstructed] = false;
    this[_debugBindingZone] = null;
    this[_lockCount] = 0;
    {
      timeline.FlutterTimeline.startSync("Framework initialization");
    }
    if (!dart.fn(() => {
      this[_debugConstructed] = true;
      return true;
    }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 158, 12, "() {\r\n      _debugConstructed = true;\r\n      return true;\r\n    }()");
    if (!(binding.BindingBase._debugInitializedType == null)) dart.assertFailed("Binding is already initialized to " + dart.str(binding.BindingBase._debugInitializedType), I[0], 163, 12, "_debugInitializedType == null");
    this.initInstances();
    if (!(binding.BindingBase._debugInitializedType != null)) dart.assertFailed(null, I[0], 165, 12, "_debugInitializedType != null");
    if (!!binding.BindingBase._debugServiceExtensionsRegistered) dart.assertFailed(null, I[0], 167, 12, "!_debugServiceExtensionsRegistered");
    this.initServiceExtensions();
    if (!binding.BindingBase._debugServiceExtensionsRegistered) dart.assertFailed(null, I[0], 169, 12, "_debugServiceExtensionsRegistered");
    {
      developer.postEvent("Flutter.FrameworkInitialization", new _js_helper.IdentityMap.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,core|String>", true)));
      timeline.FlutterTimeline.finishSync();
    }
  }).prototype = binding.BindingBase.prototype;
  dart.addRtiResources(binding.BindingBase, ["flutter__src__foundation__binding|BindingBase"]);
  dart.setMethodSignature(binding.BindingBase, () => dart.global.Object.setPrototypeOf({
    initInstances: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    debugCheckZone: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(core|String)", true),
    initServiceExtensions: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    lockEvents: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(async|Future<~>())", true),
    unlocked: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    reassembleApplication: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true),
    performReassemble: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true),
    registerSignalServiceExtension: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({callback!async|Future<~>(),name!core|String})", true),
    registerBoolServiceExtension: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({getter!async|Future<core|bool>(),name!core|String,setter!async|Future<~>(core|bool)})", true),
    registerNumericServiceExtension: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({getter!async|Future<core|double>(),name!core|String,setter!async|Future<~>(core|double)})", true),
    [_postExtensionStateChangedEvent]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|String,@)", true),
    postEvent: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|String,core|Map<core|String,@>)", true),
    registerStringServiceExtension: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({getter!async|Future<core|String>(),name!core|String,setter!async|Future<~>(core|String)})", true),
    registerServiceExtension: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({callback!async|Future<core|Map<core|String,@>>(core|Map<core|String,core|String>),name!core|String})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding.BindingBase))));
  dart.setStaticMethodSignature(binding.BindingBase, () => ['checkInstance', 'debugBindingType']);
  dart.setGetterSignature(binding.BindingBase, () => dart.global.Object.setPrototypeOf({
    window: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|SingletonFlutterWindow", true),
    platformDispatcher: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|PlatformDispatcher", true),
    locked: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding.BindingBase))));
  dart.setLibraryUri(binding.BindingBase, I[1]);
  dart.setFieldSignature(binding.BindingBase, () => dart.global.Object.setPrototypeOf({
    [_debugConstructed]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_debugBindingZone]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Zone?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[3]
    },
    [_lockCount]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding.BindingBase))));
  dart.setStaticFieldSignature(binding.BindingBase, () => ['_debugInitializedType', '_debugServiceExtensionsRegistered', 'debugZoneErrorsAreFatal']);
  dart.defineExtensionMethods(binding.BindingBase, ['toString']);
  dart.defineLazy(binding.BindingBase, {
    /*binding.BindingBase._debugInitializedType*/get _debugInitializedType() {
      return null;
    },
    set _debugInitializedType(value) {},
    /*binding.BindingBase._debugServiceExtensionsRegistered*/get _debugServiceExtensionsRegistered() {
      return false;
    },
    set _debugServiceExtensionsRegistered(value) {},
    /*binding.BindingBase.debugZoneErrorsAreFatal*/get debugZoneErrorsAreFatal() {
      return false;
    },
    set debugZoneErrorsAreFatal(value) {}
  });
  binding._exitApplication = function _exitApplication() {
    let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true));
    var t$36async_exitApplication = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
      if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
      while (true)
        switch (t$goto) {
          case 0:
            // Function start
            io.exit(0);
            // implicit return
            return async._asyncReturn(null, t$completer);
        }
    });
    return async._asyncStartSync(t$36async_exitApplication, t$completer);
  };
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__foundation__assertions|ErrorSummary":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|_ErrorDiagnostic":{"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__foundation__assertions|ErrorDescription":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|ErrorHint":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|NoSuchMethodError":{"core|Error":[]},"async|Future":{"Future.T":"1"},"ui|SingletonFlutterWindow":{"ui|FlutterView":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]}}'));
  dart.trackLibraries("packages/flutter/src/foundation/binding.dart", {
    "package:flutter/src/foundation/binding.dart": binding
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter/src/foundation/binding.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__binding: binding
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map
