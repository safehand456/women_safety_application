// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/services/spell_check.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__services__spell_check_dart(dart_sdk, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  var spell_check = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $sublist = dartx.sublist;
  var $addAll = dartx.addAll;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/services/spell_check.dart",
    "dart:ui",
    "dart:core",
    "package:flutter/src/services/platform_channel.dart"
  ];
  var range$ = dart.privateName(spell_check, "SuggestionSpan.range");
  var suggestions$ = dart.privateName(spell_check, "SuggestionSpan.suggestions");
  var _is = dart.privateName(dart_rti, "_is");
  spell_check.SuggestionSpan = class SuggestionSpan extends core.Object {
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    get suggestions() {
      return this[suggestions$];
    }
    set suggestions(value) {
      super.suggestions = value;
    }
    static ['_#new#tearOff'](range, suggestions) {
      return new spell_check.SuggestionSpan.new(range, suggestions);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__spell_check|SuggestionSpan", true)[_is](other) && other.range.start === this.range.start && other.range.end === this.range.end && collections.listEquals(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true), other.suggestions, this.suggestions);
    }
    get hashCode() {
      return core.Object.hash(this.range.start, this.range.end, core.Object.hashAll(this.suggestions));
    }
    toString() {
      return "SuggestionSpan(range: " + dart.str(this.range) + ", suggestions: " + dart.str(this.suggestions) + ")";
    }
  };
  (spell_check.SuggestionSpan.new = function(range, suggestions) {
    this[range$] = range;
    this[suggestions$] = suggestions;
    ;
  }).prototype = spell_check.SuggestionSpan.prototype;
  dart.addRtiResources(spell_check.SuggestionSpan, ["flutter__src__services__spell_check|SuggestionSpan"]);
  dart.setLibraryUri(spell_check.SuggestionSpan, I[0]);
  dart.setFieldSignature(spell_check.SuggestionSpan, () => dart.global.Object.setPrototypeOf({
    range: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|TextRange", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    suggestions: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<core|String>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.SuggestionSpan))));
  dart.defineExtensionMethods(spell_check.SuggestionSpan, ['_equals', 'toString']);
  dart.defineExtensionAccessors(spell_check.SuggestionSpan, ['hashCode']);
  var spellCheckedText$ = dart.privateName(spell_check, "SpellCheckResults.spellCheckedText");
  var suggestionSpans$ = dart.privateName(spell_check, "SpellCheckResults.suggestionSpans");
  spell_check.SpellCheckResults = class SpellCheckResults extends core.Object {
    get spellCheckedText() {
      return this[spellCheckedText$];
    }
    set spellCheckedText(value) {
      super.spellCheckedText = value;
    }
    get suggestionSpans() {
      return this[suggestionSpans$];
    }
    set suggestionSpans(value) {
      super.suggestionSpans = value;
    }
    static ['_#new#tearOff'](spellCheckedText, suggestionSpans) {
      return new spell_check.SpellCheckResults.new(spellCheckedText, suggestionSpans);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__spell_check|SpellCheckResults", true)[_is](other) && other.spellCheckedText === this.spellCheckedText && collections.listEquals(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__spell_check|SuggestionSpan", true), other.suggestionSpans, this.suggestionSpans);
    }
    get hashCode() {
      return core.Object.hash(this.spellCheckedText, core.Object.hashAll(this.suggestionSpans));
    }
    toString() {
      return "SpellCheckResults(spellCheckText: " + this.spellCheckedText + ", suggestionSpans: " + dart.str(this.suggestionSpans) + ")";
    }
  };
  (spell_check.SpellCheckResults.new = function(spellCheckedText, suggestionSpans) {
    this[spellCheckedText$] = spellCheckedText;
    this[suggestionSpans$] = suggestionSpans;
    ;
  }).prototype = spell_check.SpellCheckResults.prototype;
  dart.addRtiResources(spell_check.SpellCheckResults, ["flutter__src__services__spell_check|SpellCheckResults"]);
  dart.setLibraryUri(spell_check.SpellCheckResults, I[0]);
  dart.setFieldSignature(spell_check.SpellCheckResults, () => dart.global.Object.setPrototypeOf({
    spellCheckedText: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    suggestionSpans: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__services__spell_check|SuggestionSpan>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.SpellCheckResults))));
  dart.defineExtensionMethods(spell_check.SpellCheckResults, ['_equals', 'toString']);
  dart.defineExtensionAccessors(spell_check.SpellCheckResults, ['hashCode']);
  spell_check.SpellCheckService = class SpellCheckService extends core.Object {};
  (spell_check.SpellCheckService.new = function() {
    ;
  }).prototype = spell_check.SpellCheckService.prototype;
  dart.addRtiResources(spell_check.SpellCheckService, ["flutter__src__services__spell_check|SpellCheckService"]);
  dart.setLibraryUri(spell_check.SpellCheckService, I[0]);
  var lastSavedResults = dart.privateName(spell_check, "DefaultSpellCheckService.lastSavedResults");
  var __DefaultSpellCheckService_spellCheckChannel = dart.privateName(spell_check, "_#DefaultSpellCheckService#spellCheckChannel");
  var _as = dart.privateName(dart_rti, "_as");
  spell_check.DefaultSpellCheckService = class DefaultSpellCheckService extends core.Object {
    get lastSavedResults() {
      return this[lastSavedResults];
    }
    set lastSavedResults(value) {
      this[lastSavedResults] = value;
    }
    static ['_#new#tearOff']() {
      return new spell_check.DefaultSpellCheckService.new();
    }
    get spellCheckChannel() {
      let t$360;
      t$360 = this[__DefaultSpellCheckService_spellCheckChannel];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("spellCheckChannel")) : t$360;
    }
    set spellCheckChannel(spellCheckChannel$35param) {
      this[__DefaultSpellCheckService_spellCheckChannel] = spellCheckChannel$35param;
    }
    static mergeResults(oldResults, newResults) {
      let mergedResults = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__services__spell_check|SuggestionSpan>", true), []);
      let oldSpan = null;
      let newSpan = null;
      let oldSpanPointer = 0;
      let newSpanPointer = 0;
      while (oldSpanPointer < oldResults[$length] && newSpanPointer < newResults[$length]) {
        oldSpan = oldResults[$_get](oldSpanPointer);
        newSpan = newResults[$_get](newSpanPointer);
        if (oldSpan.range.start === newSpan.range.start) {
          mergedResults[$add](oldSpan);
          oldSpanPointer = oldSpanPointer + 1;
          newSpanPointer = newSpanPointer + 1;
        } else {
          if (oldSpan.range.start < newSpan.range.start) {
            mergedResults[$add](oldSpan);
            oldSpanPointer = oldSpanPointer + 1;
          } else {
            mergedResults[$add](newSpan);
            newSpanPointer = newSpanPointer + 1;
          }
        }
      }
      mergedResults[$addAll](oldResults[$sublist](oldSpanPointer));
      mergedResults[$addAll](newResults[$sublist](newSpanPointer));
      return mergedResults;
    }
    fetchSpellCheckSuggestions(locale, text) {
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__services__spell_check|SuggestionSpan>?", true)), t$returnValue, t$handler = 1, t$currentError, t$temp, t$temp$, t$36$35e, asyncScope = Object.create(null), asyncScope$ = Object.create(null), asyncScope$0 = Object.create(null);
      var t$36asyncfetchSpellCheckSuggestions = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope = Object.create(null);
              asyncScope.rawResults = null;
              asyncScope.languageTag = locale.toLanguageTag();
              t$handler = 3;
              t$temp = dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<@>", true);
              t$temp$ = t$temp[_as].bind(t$temp);
              t$goto = 6;
              return async._asyncAwait(this.spellCheckChannel.invokeMethod(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), "SpellCheck.initiateSpellCheck", _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<core|String>", true), [asyncScope.languageTag, text])), t$36asyncfetchSpellCheckSuggestions, t$completer);
            case 6:
              // returning from await.
              asyncScope.rawResults = t$temp$(t$result);
              t$handler = 1;
              // goto after finally
              t$goto = 5;
              break;
            case 3:
              // catch
              t$handler = 2;
              t$36$35e = t$currentError;
              asyncScope$0.e = dart.getThrown(t$36$35e);
              if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](asyncScope$0.e)) {
                t$returnValue = null;
                // goto return
                t$goto = 7;
                break;
              } else
                throw t$36$35e;
              // goto after finally
              t$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              t$goto = 1;
              break;
            case 5:
              // after finally
              asyncScope.suggestionSpans = (capturedAsyncScope => () => {
                let t$361 = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__services__spell_check|SuggestionSpan>", true), []);
                for (let resultMap of capturedAsyncScope.rawResults[$cast](dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<@,@>", true)))
                  t$361.push(new spell_check.SuggestionSpan.new(new ui.TextRange.new({start: dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true)[_as](resultMap[$_get]("startIndex")), end: dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true)[_as](resultMap[$_get]("endIndex"))}), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<core|Object?>", true)[_as](resultMap[$_get]("suggestions"))[$cast](dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true))));
                return t$361;
              })(asyncScope)();
              if (this.lastSavedResults != null) {
                asyncScope$.textHasNotChanged = dart.nullCheck(this.lastSavedResults).spellCheckedText === text;
                asyncScope$.spansHaveChanged = collections.listEquals(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__spell_check|SuggestionSpan", true), dart.nullCheck(this.lastSavedResults).suggestionSpans, asyncScope.suggestionSpans);
                if (asyncScope$.textHasNotChanged && asyncScope$.spansHaveChanged) asyncScope.suggestionSpans = spell_check.DefaultSpellCheckService.mergeResults(dart.nullCheck(this.lastSavedResults).suggestionSpans, asyncScope.suggestionSpans);
              }
              this.lastSavedResults = new spell_check.SpellCheckResults.new(text, asyncScope.suggestionSpans);
              t$returnValue = asyncScope.suggestionSpans;
              // goto return
              t$goto = 7;
              break;
            case 7:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
            case 1:
              // rethrow
              return async._asyncRethrow(t$currentError, t$completer);
          }
      });
      return async._asyncStartSync(t$36asyncfetchSpellCheckSuggestions, t$completer);
    }
  };
  (spell_check.DefaultSpellCheckService.new = function() {
    this[lastSavedResults] = null;
    this[__DefaultSpellCheckService_spellCheckChannel] = null;
    this.spellCheckChannel = system_channels.SystemChannels.spellCheck;
  }).prototype = spell_check.DefaultSpellCheckService.prototype;
  dart.addRtiResources(spell_check.DefaultSpellCheckService, ["flutter__src__services__spell_check|DefaultSpellCheckService", "flutter__src__services__spell_check|SpellCheckService"]);
  dart.setMethodSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({
    fetchSpellCheckSuggestions: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|List<flutter__src__services__spell_check|SuggestionSpan>?>(ui|Locale,core|String)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setStaticMethodSignature(spell_check.DefaultSpellCheckService, () => ['mergeResults']);
  dart.setGetterSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({
    spellCheckChannel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__platform_channel|MethodChannel", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setSetterSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({
    spellCheckChannel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__platform_channel|MethodChannel", true)
  }, dart.getSetters(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart.setLibraryUri(spell_check.DefaultSpellCheckService, I[0]);
  dart.setFieldSignature(spell_check.DefaultSpellCheckService, () => dart.global.Object.setPrototypeOf({
    lastSavedResults: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__spell_check|SpellCheckResults?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[0]
    },
    [__DefaultSpellCheckService_spellCheckChannel]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__platform_channel|MethodChannel?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[3]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(spell_check.DefaultSpellCheckService))));
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Future":{"Future.T":"1"},"flutter__src__services__spell_check|DefaultSpellCheckService":{"flutter__src__services__spell_check|SpellCheckService":[]}}'));
  dart.trackLibraries("packages/flutter/src/services/spell_check.dart", {
    "package:flutter/src/services/spell_check.dart": spell_check
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spell_check.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmCkB;;;;;;IAGG;;;;;;;;;YAGK;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAGT,YAAa,AAEoB,mHAF1B,KAAK,KACR,AAAM,AAAM,AAAM,KAAb,iBAAgB,AAAM,oBAC3B,AAAM,AAAM,AAAI,KAAX,eAAc,AAAM,kBACzB,8FAAmB,AAAM,KAAD,cAAc;IAC5C;;AAGoB,YAAO,kBAAK,AAAM,kBAAO,AAAM,gBAAY,oBAAQ;IAAa;;AAIlF,YAAO,qCAAwB,cAAK,6BAAgB,oBAAW;IACjE;;6CA1B0B,OAAY;IAAZ;IAAY;;EAAY;;;;;;;;;;;;;;;;;;;;;;IAqCrC;;;;;;IAQc;;;;;;;;;YAGH;;AACtB,UAAI,AAAU,SAAM,KAAK;AACrB,cAAO;;AAGX,YAAa,AACkC,sHADxC,KAAK,KACR,AAAM,AAAiB,KAAlB,sBAAqB,yBAC1B,qIAA2B,AAAM,KAAD,kBAAkB;IACxD;;AAGoB,YAAO,kBAAK,uBAAyB,oBAAQ;IAAiB;;AAIhF,YAAO,wCAAoC,wBAAgB,iCAAoB,wBAAe;IAChG;;gDA9B6B,kBAAuB;IAAvB;IAAuB;;EAAgB;;;;;;;;;;;;;;;;;;;;;;EA8CtE;;;;;;;IAqBqB;;;;;;;;;;;AAIA;;IAAiB;0BAAjB;;IAAiB;wBAWX,YAAiC;AAC7B,0BAAgC;AAE5C;AACA;AACX,2BAAiB;AACjB,2BAAiB;AAErB,aAAO,cAAc,GAAG,AAAW,UAAD,aAC9B,cAAc,GAAG,AAAW,UAAD;AAC7B,kBAAU,AAAU,UAAA,QAAC,cAAc;AACnC,kBAAU,AAAU,UAAA,QAAC,cAAc;AAEnC,YAAI,AAAQ,AAAM,AAAM,OAAb,iBAAgB,AAAQ,AAAM,OAAP;AAClB,UAAd,aAAa,OAAK,OAAO;AACzB,UAAc,iBAAd,cAAc;AACd,UAAc,iBAAd,cAAc;;AAEd,cAAI,AAAQ,AAAM,OAAP,eAAe,AAAQ,AAAM,OAAP;AACjB,YAAd,aAAa,OAAK,OAAO;AACzB,YAAc,iBAAd,cAAc;;AAEA,YAAd,aAAa,OAAK,OAAO;AACzB,YAAc,iBAAd,cAAc;;;;AAKN,MAAd,aAAa,UAAQ,AAAW,UAAD,WAAS,cAAc;AACxC,MAAd,aAAa,UAAQ,AAAW,UAAD,WAAS,cAAc;AAEtD,YAAO,cAAa;IACtB;+BAIW,QAAe;4NADI;;;;;;;;;;;cAGR;cACP,yBAAc,AAAO,MAAD;;;;cAGlB;uCAAM,AAAkB,iGACnC,iCACQ,wHAAC,sBAAW,EAAE,IAAI;;;sCAC1B;;;cAJJ;;;;;;cAKS;;AAEP,gCAAO;;gBAAP;;;;;cAPF;;;;;;;;;cAUqB,6BAAkC;;AACrD,yBAAiC,YAAa,AAAW,8BAAD;AACtD,gEACE,6BAAyC,wEAAxB,AAAS,SAAA,QAAC,qBAAiD,wEAAtB,AAAS,SAAA,QAAC,gBACtC,AAAkB,uFAA3C,AAAS,SAAA,QAAC;;;kBAIb;gBAGS,gCAAoC,AAAE,eAAlB,4CAAsC,IAAI;gBAC9D,+BACP,qIAA2B,AAAE,eAAlB,wCAAmC,0BAAe;oBAE7D,6BAAiB,IAAI,4BAAgB,+BACrB,kDAA6B,AAAE,eAAlB,wCAAmC,0BAAe;;cAGrF,8DAAqC,IAAI,EAAE,0BAAe;AAE1D,8BAAO,0BAAe;;cAAtB;;;;AACF;;;;;;YAtC8B;IAsC9B;;;IAxFmB;yDAIA;AARjB,6BAAmC;EACrC","file":"../../../../../../../../../../packages/flutter/src/services/spell_check.dart.lib.js"}');
  // Exports:
  return {
    src__services__spell_check: spell_check
  };
}));

//# sourceMappingURL=spell_check.dart.lib.js.map
