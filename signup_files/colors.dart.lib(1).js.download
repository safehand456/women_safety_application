// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/painting/colors.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/foundation/_platform_web.dart'], (function load__packages__flutter__src__painting__colors_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__foundation___platform_web$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const diagnostics = packages__flutter__src__foundation___platform_web$46dart.src__foundation__diagnostics;
  var colors = Object.create(dart.library);
  var $modulo = dartx['%'];
  var $abs = dartx.abs;
  var $_get = dartx._get;
  var $keys = dartx.keys;
  var $map = dartx.map;
  var $_set = dartx._set;
  var $isNaN = dartx.isNaN;
  var $round = dartx.round;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
      }, diagnostics._NoDefaultValue.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "singleLine",
        [_Enum_index]: 8
      }, diagnostics.DiagnosticsTreeStyle.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "info",
        [_Enum_index]: 3
      }, diagnostics.DiagnosticLevel.prototype));
    }
  });
  var C = Array(3).fill(void 0);
  var I = [
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/painting/colors.dart",
    "package:flutter/src/painting/colors.dart",
    "dart:core"
  ];
  var alpha$ = dart.privateName(colors, "HSVColor.alpha");
  var hue$ = dart.privateName(colors, "HSVColor.hue");
  var saturation$ = dart.privateName(colors, "HSVColor.saturation");
  var value$ = dart.privateName(colors, "HSVColor.value");
  var _scaleAlpha = dart.privateName(colors, "_scaleAlpha");
  var _is = dart.privateName(dart_rti, "_is");
  colors.HSVColor = class HSVColor extends core.Object {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#fromAHSV#tearOff'](alpha, hue, saturation, value) {
      return new colors.HSVColor.fromAHSV(alpha, hue, saturation, value);
    }
    static fromColor(color) {
      let red = color.red / 255;
      let green = color.green / 255;
      let blue = color.blue / 255;
      let max = math.max(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), red, math.max(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), green, blue));
      let min = math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), red, math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), green, blue));
      let delta = max - min;
      let alpha = color.alpha / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let saturation = max === 0.0 ? 0.0 : delta / max;
      return new colors.HSVColor.fromAHSV(alpha, hue, saturation, max);
    }
    static ['_#fromColor#tearOff'](color) {
      return colors.HSVColor.fromColor(color);
    }
    withAlpha(alpha) {
      return new colors.HSVColor.fromAHSV(alpha, this.hue, this.saturation, this.value);
    }
    withHue(hue) {
      return new colors.HSVColor.fromAHSV(this.alpha, hue, this.saturation, this.value);
    }
    withSaturation(saturation) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, saturation, this.value);
    }
    withValue(value) {
      return new colors.HSVColor.fromAHSV(this.alpha, this.hue, this.saturation, value);
    }
    toColor() {
      let chroma = this.saturation * this.value;
      let secondary = chroma * (1.0 - ((this.hue / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = this.value - chroma;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(this.alpha * factor);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)[_scaleAlpha](t);
      }
      if (b == null) {
        return a[_scaleAlpha](1.0 - t);
      }
      return new colors.HSVColor.fromAHSV(ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.alpha, b.alpha, t)), 0.0, 1.0), dart.nullCheck(ui.lerpDouble(a.hue, b.hue, t))[$modulo](360.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.saturation, b.saturation, t)), 0.0, 1.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.value, b.value, t)), 0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor", true)[_is](other) && other.alpha === this.alpha && other.hue === this.hue && other.saturation === this.saturation && other.value === this.value;
    }
    get hashCode() {
      return core.Object.hash(this.alpha, this.hue, this.saturation, this.value);
    }
    toString() {
      return object.objectRuntimeType(this, "HSVColor") + "(" + dart.strSafe(this.alpha) + ", " + dart.strSafe(this.hue) + ", " + dart.strSafe(this.saturation) + ", " + dart.strSafe(this.value) + ")";
    }
  };
  (colors.HSVColor.fromAHSV = function(alpha, hue, saturation, value) {
    this[alpha$] = alpha;
    this[hue$] = hue;
    this[saturation$] = saturation;
    this[value$] = value;
    if (!(alpha >= 0.0)) dart.assertFailed(null, I[0], 75, 14, "alpha >= 0.0");
    if (!(alpha <= 1.0)) dart.assertFailed(null, I[0], 76, 14, "alpha <= 1.0");
    if (!(hue >= 0.0)) dart.assertFailed(null, I[0], 77, 14, "hue >= 0.0");
    if (!(hue <= 360.0)) dart.assertFailed(null, I[0], 78, 14, "hue <= 360.0");
    if (!(saturation >= 0.0)) dart.assertFailed(null, I[0], 79, 14, "saturation >= 0.0");
    if (!(saturation <= 1.0)) dart.assertFailed(null, I[0], 80, 14, "saturation <= 1.0");
    if (!(value >= 0.0)) dart.assertFailed(null, I[0], 81, 14, "value >= 0.0");
    if (!(value <= 1.0)) dart.assertFailed(null, I[0], 82, 14, "value <= 1.0");
    ;
  }).prototype = colors.HSVColor.prototype;
  dart.addRtiResources(colors.HSVColor, ["flutter__src__painting__colors|HSVColor"]);
  dart.setMethodSignature(colors.HSVColor, () => dart.global.Object.setPrototypeOf({
    withAlpha: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor(core|double)", true),
    withHue: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor(core|double)", true),
    withSaturation: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor(core|double)", true),
    withValue: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor(core|double)", true),
    toColor: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color()", true),
    [_scaleAlpha]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSVColor(core|double)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(colors.HSVColor))));
  dart.setStaticMethodSignature(colors.HSVColor, () => ['fromColor', 'lerp']);
  dart.setLibraryUri(colors.HSVColor, I[1]);
  dart.setFieldSignature(colors.HSVColor, () => dart.global.Object.setPrototypeOf({
    alpha: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    hue: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    saturation: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    value: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(colors.HSVColor))));
  dart.defineExtensionMethods(colors.HSVColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSVColor, ['hashCode']);
  var alpha$0 = dart.privateName(colors, "HSLColor.alpha");
  var hue$0 = dart.privateName(colors, "HSLColor.hue");
  var saturation$0 = dart.privateName(colors, "HSLColor.saturation");
  var lightness$ = dart.privateName(colors, "HSLColor.lightness");
  colors.HSLColor = class HSLColor extends core.Object {
    get alpha() {
      return this[alpha$0];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$0];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$0];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get lightness() {
      return this[lightness$];
    }
    set lightness(value) {
      super.lightness = value;
    }
    static ['_#fromAHSL#tearOff'](alpha, hue, saturation, lightness) {
      return new colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    static fromColor(color) {
      let red = color.red / 255;
      let green = color.green / 255;
      let blue = color.blue / 255;
      let max = math.max(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), red, math.max(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), green, blue));
      let min = math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), red, math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true), green, blue));
      let delta = max - min;
      let alpha = color.alpha / 255;
      let hue = colors._getHue(red, green, blue, max, delta);
      let lightness = (max + min) / 2.0;
      let saturation = lightness === 1.0 ? 0.0 : ui.clampDouble(delta / (1.0 - (2.0 * lightness - 1.0)[$abs]()), 0.0, 1.0);
      return new colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    static ['_#fromColor#tearOff'](color) {
      return colors.HSLColor.fromColor(color);
    }
    withAlpha(alpha) {
      return new colors.HSLColor.fromAHSL(alpha, this.hue, this.saturation, this.lightness);
    }
    withHue(hue) {
      return new colors.HSLColor.fromAHSL(this.alpha, hue, this.saturation, this.lightness);
    }
    withSaturation(saturation) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, saturation, this.lightness);
    }
    withLightness(lightness) {
      return new colors.HSLColor.fromAHSL(this.alpha, this.hue, this.saturation, lightness);
    }
    toColor() {
      let chroma = (1.0 - (2.0 * this.lightness - 1.0)[$abs]()) * this.saturation;
      let secondary = chroma * (1.0 - ((this.hue / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = this.lightness - chroma / 2.0;
      return colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(this.alpha * factor);
    }
    static lerp(a, b, t) {
      if (a == b) {
        return a;
      }
      if (a == null) {
        return dart.nullCheck(b)[_scaleAlpha](t);
      }
      if (b == null) {
        return a[_scaleAlpha](1.0 - t);
      }
      return new colors.HSLColor.fromAHSL(ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.alpha, b.alpha, t)), 0.0, 1.0), dart.nullCheck(ui.lerpDouble(a.hue, b.hue, t))[$modulo](360.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.saturation, b.saturation, t)), 0.0, 1.0), ui.clampDouble(dart.nullCheck(ui.lerpDouble(a.lightness, b.lightness, t)), 0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor", true)[_is](other) && other.alpha === this.alpha && other.hue === this.hue && other.saturation === this.saturation && other.lightness === this.lightness;
    }
    get hashCode() {
      return core.Object.hash(this.alpha, this.hue, this.saturation, this.lightness);
    }
    toString() {
      return object.objectRuntimeType(this, "HSLColor") + "(" + dart.strSafe(this.alpha) + ", " + dart.strSafe(this.hue) + ", " + dart.strSafe(this.saturation) + ", " + dart.strSafe(this.lightness) + ")";
    }
  };
  (colors.HSLColor.fromAHSL = function(alpha, hue, saturation, lightness) {
    this[alpha$0] = alpha;
    this[hue$0] = hue;
    this[saturation$0] = saturation;
    this[lightness$] = lightness;
    if (!(alpha >= 0.0)) dart.assertFailed(null, I[0], 243, 14, "alpha >= 0.0");
    if (!(alpha <= 1.0)) dart.assertFailed(null, I[0], 244, 14, "alpha <= 1.0");
    if (!(hue >= 0.0)) dart.assertFailed(null, I[0], 245, 14, "hue >= 0.0");
    if (!(hue <= 360.0)) dart.assertFailed(null, I[0], 246, 14, "hue <= 360.0");
    if (!(saturation >= 0.0)) dart.assertFailed(null, I[0], 247, 14, "saturation >= 0.0");
    if (!(saturation <= 1.0)) dart.assertFailed(null, I[0], 248, 14, "saturation <= 1.0");
    if (!(lightness >= 0.0)) dart.assertFailed(null, I[0], 249, 14, "lightness >= 0.0");
    if (!(lightness <= 1.0)) dart.assertFailed(null, I[0], 250, 14, "lightness <= 1.0");
    ;
  }).prototype = colors.HSLColor.prototype;
  dart.addRtiResources(colors.HSLColor, ["flutter__src__painting__colors|HSLColor"]);
  dart.setMethodSignature(colors.HSLColor, () => dart.global.Object.setPrototypeOf({
    withAlpha: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor(core|double)", true),
    withHue: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor(core|double)", true),
    withSaturation: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor(core|double)", true),
    withLightness: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor(core|double)", true),
    toColor: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color()", true),
    [_scaleAlpha]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|HSLColor(core|double)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(colors.HSLColor))));
  dart.setStaticMethodSignature(colors.HSLColor, () => ['fromColor', 'lerp']);
  dart.setLibraryUri(colors.HSLColor, I[1]);
  dart.setFieldSignature(colors.HSLColor, () => dart.global.Object.setPrototypeOf({
    alpha: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    hue: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    saturation: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    lightness: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(colors.HSLColor))));
  dart.defineExtensionMethods(colors.HSLColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.HSLColor, ['hashCode']);
  var _swatch$ = dart.privateName(colors, "ColorSwatch._swatch");
  var _swatch = dart.privateName(colors, "_swatch");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _as = dart.privateName(dart_rti, "_as");
  colors.ColorSwatch = class ColorSwatch extends ui.Color {
    get [_swatch]() {
      return this[_swatch$];
    }
    set [_swatch](value) {
      super[_swatch] = value;
    }
    static ['_#new#tearOff'](T, primary, _swatch) {
      return new colors.ColorSwatch.new(dart_rti.instanceType(this)[_bind](T)[_eval]("flutter__src__painting__colors|ColorSwatch<1>"), primary, _swatch);
    }
    _get(key) {
      dart_rti.instanceType(this)[_eval]("ColorSwatch.T")[_as](key);
      return this[_swatch][$_get](key);
    }
    get keys() {
      return this[_swatch][$keys];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return super._equals(other) && dart_rti.instanceType(this)[_eval]("flutter__src__painting__colors|ColorSwatch<ColorSwatch.T>")[_is](other) && collections.mapEquals(dart_rti.instanceType(this)[_eval]("ColorSwatch.T"), dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color", true), other[_swatch], this[_swatch]);
    }
    get hashCode() {
      return core.Object.hash(dart.runtimeType(this), this.value, this[_swatch]);
    }
    toString() {
      return object.objectRuntimeType(this, "ColorSwatch") + "(primary value: " + super.toString() + ")";
    }
    static lerp(T, a, b, t) {
      if (a == b) {
        return a;
      }
      let swatch = null;
      if (b == null) {
        swatch = dart.nullCheck(a)[_swatch][$map](dart_rti.instanceType(this)[_bind](T)[_eval]("1"), dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color", true), dart.fn((key, color) => new core.MapEntry.__(dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>"), key, dart.nullCheck(ui.Color.lerp(color, null, t))), dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>(1,ui|Color)")));
      } else {
        if (a == null) {
          swatch = b[_swatch][$map](dart_rti.instanceType(this)[_bind](T)[_eval]("1"), dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color", true), dart.fn((key, color) => new core.MapEntry.__(dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>"), key, dart.nullCheck(ui.Color.lerp(null, color, t))), dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>(1,ui|Color)")));
        } else {
          swatch = a[_swatch][$map](dart_rti.instanceType(this)[_bind](T)[_eval]("1"), dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color", true), dart.fn((key, color) => new core.MapEntry.__(dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>"), key, dart.nullCheck(ui.Color.lerp(color, b._get(key), t))), dart_rti.instanceType(this)[_bind](T)[_eval]("core|MapEntry<1,ui|Color>(1,ui|Color)")));
        }
      }
      return new colors.ColorSwatch.new(dart_rti.instanceType(this)[_bind](T)[_eval]("flutter__src__painting__colors|ColorSwatch<1>"), dart.nullCheck(ui.Color.lerp(a, b, t)).value, swatch);
    }
  };
  (colors.ColorSwatch.new = function(_ti, primary, _swatch) {
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[_swatch$] = _swatch;
    dart.global.Object.getPrototypeOf(colors.ColorSwatch).new.call(this, primary);
    ;
  }).prototype = colors.ColorSwatch.prototype;
  dart.addRtiResources(colors.ColorSwatch, ["flutter__src__painting__colors|ColorSwatch"]);
  dart.setMethodSignature(colors.ColorSwatch, () => dart.global.Object.setPrototypeOf({
    _get: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Color?(core|Object?)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(colors.ColorSwatch))));
  dart.setStaticMethodSignature(colors.ColorSwatch, () => ['lerp']);
  dart.setGetterSignature(colors.ColorSwatch, () => dart.global.Object.setPrototypeOf({
    keys: _ti => _ti[_eval]("core|Iterable<ColorSwatch.T>")
  }, dart.getGetters(dart.global.Object.getPrototypeOf(colors.ColorSwatch))));
  dart.setLibraryUri(colors.ColorSwatch, I[1]);
  dart.setFieldSignature(colors.ColorSwatch, () => dart.global.Object.setPrototypeOf({[_swatch]: {
      type: _ti => _ti[_eval]("core|Map<ColorSwatch.T,ui|Color>"),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(colors.ColorSwatch))));
  dart.defineExtensionMethods(colors.ColorSwatch, ['_equals', 'toString']);
  dart.defineExtensionAccessors(colors.ColorSwatch, ['hashCode']);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  colors.ColorProperty = class ColorProperty extends diagnostics.DiagnosticsProperty {
    static ['_#new#tearOff'](name, value, opts) {
      let showName = opts && 'showName' in opts ? opts.showName : true;
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[0] || CT.C0;
      let style = opts && 'style' in opts ? opts.style : C[1] || CT.C1;
      let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
      return new colors.ColorProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__colors|ColorProperty", true), name, value, {showName: showName, defaultValue: defaultValue, style: style, level: level});
    }
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      if (this.value != null) {
        json[$_set]("valueProperties", new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,core|Object>", true), ["red", dart.nullCheck(this.value).red, "green", dart.nullCheck(this.value).green, "blue", dart.nullCheck(this.value).blue, "alpha", dart.nullCheck(this.value).alpha]));
      }
      return json;
    }
  };
  (colors.ColorProperty.new = function(_ti, name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[0] || CT.C0;
    let style = opts && 'style' in opts ? opts.style : C[1] || CT.C1;
    let level = opts && 'level' in opts ? opts.level : C[2] || CT.C2;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    dart.global.Object.getPrototypeOf(colors.ColorProperty).new.call(this, null, name, value, {showName: showName, defaultValue: defaultValue, style: style, level: level});
    ;
  }).prototype = colors.ColorProperty.prototype;
  dart.addRtiResources(colors.ColorProperty, ["flutter__src__painting__colors|ColorProperty"]);
  dart.setLibraryUri(colors.ColorProperty, I[1]);
  colors._getHue = function _getHue(red, green, blue, max, delta) {
    let hue = null;
    function t$36$35hue$35get() {
      let t$360;
      t$360 = hue;
      return t$360 == null ? dart.throw(new _internal.LateError.localNI("hue")) : t$360;
    }
    function t$36$35hue$35set(hue$35param) {
      return hue = hue$35param;
    }
    if (max === 0.0) {
      t$36$35hue$35set(0.0);
    } else if (max === red) {
      t$36$35hue$35set(60.0 * ((green - blue) / delta)[$modulo](6));
    } else if (max === green) {
      t$36$35hue$35set(60.0 * ((blue - red) / delta + 2));
    } else if (max === blue) {
      t$36$35hue$35set(60.0 * ((red - green) / delta + 4));
    }
    t$36$35hue$35set(t$36$35hue$35get()[$isNaN] ? 0.0 : t$36$35hue$35get());
    return t$36$35hue$35get();
  };
  colors._colorFromHue = function _colorFromHue(alpha, hue, chroma, secondary, match) {
    let red = null;
    let green = null;
    let blue = null;
    {
      let t$36$351$350 = (() => {
        let t$363 = null;
        let t$36$350$350 = hue;
        L0: {
          {
            if (t$36$350$350 < 60) {
              t$363 = dart.recordLiteral("3;", 3, void 0, [chroma, secondary, 0.0]);
              break L0;
            }
          }
          {
            if (t$36$350$350 < 120) {
              t$363 = dart.recordLiteral("3;", 3, void 0, [secondary, chroma, 0.0]);
              break L0;
            }
          }
          {
            if (t$36$350$350 < 180) {
              t$363 = dart.recordLiteral("3;", 3, void 0, [0.0, chroma, secondary]);
              break L0;
            }
          }
          {
            if (t$36$350$350 < 240) {
              t$363 = dart.recordLiteral("3;", 3, void 0, [0.0, secondary, chroma]);
              break L0;
            }
          }
          {
            if (t$36$350$350 < 300) {
              t$363 = dart.recordLiteral("3;", 3, void 0, [secondary, 0.0, chroma]);
              break L0;
            }
          }
          {
            {
              t$363 = dart.recordLiteral("3;", 3, void 0, [chroma, 0.0, secondary]);
              break L0;
            }
          }
        }
        return t$363;
      })();
      let t$36$351$351 = null;
      let t$36$351$351$35isSet = false;
      let t$36$351$352 = null;
      let t$36$351$352$35isSet = false;
      let t$36$351$353 = null;
      let t$36$351$353$35isSet = false;
      if (!(typeof (t$36$351$351$35isSet ? t$36$351$351 : (t$36$351$351$35isSet = true, t$36$351$351 = t$36$351$350.$1)) == 'number' && (red = t$36$351$351$35isSet ? t$36$351$351 : (t$36$351$351$35isSet = true, t$36$351$351 = t$36$351$350.$1), true) && typeof (t$36$351$352$35isSet ? t$36$351$352 : (t$36$351$352$35isSet = true, t$36$351$352 = t$36$351$350.$2)) == 'number' && (green = t$36$351$352$35isSet ? t$36$351$352 : (t$36$351$352$35isSet = true, t$36$351$352 = t$36$351$350.$2), true) && typeof (t$36$351$353$35isSet ? t$36$351$353 : (t$36$351$353$35isSet = true, t$36$351$353 = t$36$351$350.$3)) == 'number' && (blue = t$36$351$353$35isSet ? t$36$351$353 : (t$36$351$353$35isSet = true, t$36$351$353 = t$36$351$350.$3), true))) dart.throw(new core.StateError.new("Pattern matching error"));
    }
    return new ui.Color.fromARGB((alpha * 255)[$round](), ((dart.notNull(red) + match) * 255)[$round](), ((dart.notNull(green) + match) * 255)[$round](), ((dart.notNull(blue) + match) * 255)[$round]());
  };
  dart.moduleConstCaches.set("packages/flutter/src/painting/colors.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"flutter__src__painting__colors|ColorSwatch":{"ColorSwatch.T":"1","ui|Color":[]},"core|MapEntry":{"MapEntry.K":"1","MapEntry.V":"2"},"core|Iterable":{"Iterable.E":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__painting__colors|ColorProperty":{"DiagnosticsProperty.T":"ui|Color","flutter__src__foundation__diagnostics|DiagnosticsProperty":["ui|Color"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/colors.dart", {
    "package:flutter/src/painting/colors.dart": colors
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["colors.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter/src/painting/colors.dart.lib.js"}');
  // Exports:
  return {
    src__painting__colors: colors
  };
}));

//# sourceMappingURL=colors.dart.lib.js.map
