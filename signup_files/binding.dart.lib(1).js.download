// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/scheduler/binding.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/collection/src/priority_queue.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/scheduler/service_extensions.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/scheduler/debug.dart', 'packages/flutter/src/foundation/timeline.dart', 'packages/flutter/src/scheduler/priority.dart'], (function load__packages__flutter__src__scheduler__binding_dart(dart_sdk, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__memory_allocations$46dart, packages__collection__src__priority_queue$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__scheduler__service_extensions$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__scheduler__debug$46dart, packages__flutter__src__foundation__timeline$46dart, packages__flutter__src__scheduler__priority$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const developer = dart_sdk.developer;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assertions = packages__flutter__src__foundation___platform_web$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation___platform_web$46dart.src__foundation__diagnostics;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const priority_queue = packages__collection__src__priority_queue$46dart.src__priority_queue;
  const binding = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const service_extensions = packages__flutter__src__scheduler__service_extensions$46dart.src__scheduler__service_extensions;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const debug = packages__flutter__src__scheduler__debug$46dart.src__scheduler__debug;
  const timeline = packages__flutter__src__foundation__timeline$46dart.src__foundation__timeline;
  const priority$ = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  var binding$ = Object.create(dart.library);
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $compareTo = dartx.compareTo;
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $_get = dartx._get;
  var $trimRight = dartx.trimRight;
  var $split = dartx.split;
  var $join = dartx.join;
  var $round = dartx.round;
  var $toString = dartx.toString;
  var $padRight = dartx.padRight;
  var $padLeft = dartx.padLeft;
  var $clear = dartx.clear;
  var $times = dartx['*'];
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "idle",
        [_Enum_index]: 0
      }, binding$.SchedulerPhase.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "transientCallbacks",
        [_Enum_index]: 1
      }, binding$.SchedulerPhase.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "midFrameMicrotasks",
        [_Enum_index]: 2
      }, binding$.SchedulerPhase.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "persistentCallbacks",
        [_Enum_index]: 3
      }, binding$.SchedulerPhase.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "postFrameCallbacks",
        [_Enum_index]: 4
      }, binding$.SchedulerPhase.prototype));
    },
    get C0() {
      return C[0] = dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|SchedulerPhase", true), [C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5]);
    },
    get C6() {
      return C[6] = dart.fn(binding$.defaultSchedulingStrategy, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool({priority!core|int,scheduler!flutter__src__scheduler__binding|SchedulerBinding})", true));
    },
    get C7() {
      return C[7] = dart.fn(binding$.SchedulerBinding._taskSorter, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(flutter__src__scheduler__binding|_TaskEntry<@>,flutter__src__scheduler__binding|_TaskEntry<@>)", true));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "resumed",
        [_Enum_index]: 1
      }, ui.AppLifecycleState.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "inactive",
        [_Enum_index]: 2
      }, ui.AppLifecycleState.prototype));
    },
    get C10() {
      return C[10] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "hidden",
        [_Enum_index]: 3
      }, ui.AppLifecycleState.prototype));
    },
    get C11() {
      return C[11] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "paused",
        [_Enum_index]: 4
      }, ui.AppLifecycleState.prototype));
    },
    get C12() {
      return C[12] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "detached",
        [_Enum_index]: 0
      }, ui.AppLifecycleState.prototype));
    }
  });
  var C = Array(13).fill(void 0);
  var I = [
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/scheduler/binding.dart",
    "package:flutter/src/scheduler/binding.dart",
    "dart:core",
    "dart:developer",
    "dart:async",
    "dart:ui",
    "package:collection/src/priority_queue.dart"
  ];
  var ___TaskEntry_debugStack = dart.privateName(binding$, "_#_TaskEntry#debugStack");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _bind = dart.privateName(dart_rti, "_bind");
  binding$._TaskEntry = class _TaskEntry extends core.Object {
    static ['_#new#tearOff'](T, task, priority, debugLabel, flow) {
      return new binding$._TaskEntry.new(dart_rti.instanceType(this)[_bind](T)[_eval]("flutter__src__scheduler__binding|_TaskEntry<1>"), task, priority, debugLabel, flow);
    }
    get debugStack() {
      let t$360;
      t$360 = this[___TaskEntry_debugStack];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("debugStack")) : t$360;
    }
    set debugStack(debugStack$35param) {
      this[___TaskEntry_debugStack] = debugStack$35param;
    }
    run() {
      let t$360;
      {
        developer.Timeline.timeSync(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), (t$360 = this.debugLabel, t$360 == null ? "Scheduled Task" : t$360), dart.fn(() => {
          this.completer.complete(this.task());
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null()", true)), {flow: this.flow != null ? developer.Flow.step(dart.nullCheck(this.flow).id) : null});
      }
    }
  };
  (binding$._TaskEntry.new = function(_ti, task, priority, debugLabel, flow) {
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[___TaskEntry_debugStack] = null;
    this.completer = async.Completer.new(dart_rti.instanceType(this)[_eval]("async|Completer<_TaskEntry.T>"));
    this.task = task;
    this.priority = priority;
    this.debugLabel = debugLabel;
    this.flow = flow;
    if (!dart.fn(() => {
      this.debugStack = core.StackTrace.current;
      return true;
    }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 76, 12, "() {\r\n      debugStack = StackTrace.current;\r\n      return true;\r\n    }()");
  }).prototype = binding$._TaskEntry.prototype;
  dart.addRtiResources(binding$._TaskEntry, ["flutter__src__scheduler__binding|_TaskEntry"]);
  dart.setMethodSignature(binding$._TaskEntry, () => dart.global.Object.setPrototypeOf({
    run: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$._TaskEntry))));
  dart.setGetterSignature(binding$._TaskEntry, () => dart.global.Object.setPrototypeOf({
    debugStack: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$._TaskEntry))));
  dart.setSetterSignature(binding$._TaskEntry, () => dart.global.Object.setPrototypeOf({
    debugStack: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)
  }, dart.getSetters(dart.global.Object.getPrototypeOf(binding$._TaskEntry))));
  dart.setLibraryUri(binding$._TaskEntry, I[1]);
  dart.setFieldSignature(binding$._TaskEntry, () => dart.global.Object.setPrototypeOf({
    task: {
      type: _ti => _ti[_eval]("_TaskEntry.T/()"),
      isConst: false,
      isFinal: true
    },
    priority: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    debugLabel: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    flow: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "developer|Flow?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[3]
    },
    [___TaskEntry_debugStack]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    completer: {
      type: _ti => _ti[_eval]("async|Completer<_TaskEntry.T>"),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$._TaskEntry))));
  binding$._FrameCallbackEntry = class _FrameCallbackEntry extends core.Object {
    static ['_#new#tearOff'](callback, opts) {
      let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
      return new binding$._FrameCallbackEntry.new(callback, {rescheduling: rescheduling});
    }
  };
  (binding$._FrameCallbackEntry.new = function(callback, opts) {
    let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
    this.debugStack = null;
    this.callback = callback;
    if (!dart.fn(() => {
      if (rescheduling) {
        if (!dart.fn(() => {
          if (binding$._FrameCallbackEntry.debugCurrentCallbackStack == null) {
            dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "scheduleFrameCallback called with rescheduling true, but no callback is in scope."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "The \"rescheduling\" argument should only be set to true if the callback is being reregistered from within the callback itself, and only then if the callback itself is entirely synchronous."), new assertions.ErrorHint.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorHint", true), "If this is the initial registration of the callback, or if the callback is asynchronous, then do not use the \"rescheduling\" argument.")])));
          }
          return true;
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 108, 16, "() {\r\n          if (debugCurrentCallbackStack == null) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('scheduleFrameCallback called with rescheduling true, but no callback is in scope.'),\r\n              ErrorDescription(\r\n                'The \"rescheduling\" argument should only be set to true if the '\r\n                'callback is being reregistered from within the callback itself, '\r\n                'and only then if the callback itself is entirely synchronous.',\r\n              ),\r\n              ErrorHint(\r\n                'If this is the initial registration of the callback, or if the '\r\n                'callback is asynchronous, then do not use the \"rescheduling\" '\r\n                'argument.',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }()");
        this.debugStack = binding$._FrameCallbackEntry.debugCurrentCallbackStack;
      } else {
        this.debugStack = core.StackTrace.current;
      }
      return true;
    }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 106, 12, "() {\r\n      if (rescheduling) {\r\n        assert(() {\r\n          if (debugCurrentCallbackStack == null) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('scheduleFrameCallback called with rescheduling true, but no callback is in scope.'),\r\n              ErrorDescription(\r\n                'The \"rescheduling\" argument should only be set to true if the '\r\n                'callback is being reregistered from within the callback itself, '\r\n                'and only then if the callback itself is entirely synchronous.',\r\n              ),\r\n              ErrorHint(\r\n                'If this is the initial registration of the callback, or if the '\r\n                'callback is asynchronous, then do not use the \"rescheduling\" '\r\n                'argument.',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }());\r\n        debugStack = debugCurrentCallbackStack;\r\n      } else {\r\n        // TODO(ianh): trim the frames from this library, so that the call to scheduleFrameCallback is the top one\r\n        debugStack = StackTrace.current;\r\n      }\r\n      return true;\r\n    }()");
  }).prototype = binding$._FrameCallbackEntry.prototype;
  dart.addRtiResources(binding$._FrameCallbackEntry, ["flutter__src__scheduler__binding|_FrameCallbackEntry"]);
  dart.setLibraryUri(binding$._FrameCallbackEntry, I[1]);
  dart.setFieldSignature(binding$._FrameCallbackEntry, () => dart.global.Object.setPrototypeOf({
    callback: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true),
      isConst: false,
      isFinal: true
    },
    debugStack: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$._FrameCallbackEntry))));
  dart.setStaticFieldSignature(binding$._FrameCallbackEntry, () => ['debugCurrentCallbackStack']);
  dart.defineLazy(binding$._FrameCallbackEntry, {
    /*binding$._FrameCallbackEntry.debugCurrentCallbackStack*/get debugCurrentCallbackStack() {
      return null;
    },
    set debugCurrentCallbackStack(value) {}
  });
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  binding$.SchedulerPhase = class SchedulerPhase extends core._Enum {
    [_enumToString]() {
      return "SchedulerPhase." + this[_name];
    }
  };
  (binding$.SchedulerPhase.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(binding$.SchedulerPhase).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = binding$.SchedulerPhase.prototype;
  dart.addRtiResources(binding$.SchedulerPhase, ["flutter__src__scheduler__binding|SchedulerPhase"]);
  dart.setMethodSignature(binding$.SchedulerPhase, () => dart.global.Object.setPrototypeOf({
    [_enumToString]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SchedulerPhase))));
  dart.setLibraryUri(binding$.SchedulerPhase, I[1]);
  dart.setStaticFieldSignature(binding$.SchedulerPhase, () => ['values', 'idle', 'transientCallbacks', 'midFrameMicrotasks', 'persistentCallbacks', 'postFrameCallbacks']);
  dart.defineLazy(binding$.SchedulerPhase, {
    /*binding$.SchedulerPhase.values*/get values() {
      return C[0] || CT.C0;
    },
    /*binding$.SchedulerPhase.idle*/get idle() {
      return C[1] || CT.C1;
    },
    /*binding$.SchedulerPhase.transientCallbacks*/get transientCallbacks() {
      return C[2] || CT.C2;
    },
    /*binding$.SchedulerPhase.midFrameMicrotasks*/get midFrameMicrotasks() {
      return C[3] || CT.C3;
    },
    /*binding$.SchedulerPhase.persistentCallbacks*/get persistentCallbacks() {
      return C[4] || CT.C4;
    },
    /*binding$.SchedulerPhase.postFrameCallbacks*/get postFrameCallbacks() {
      return C[5] || CT.C5;
    }
  });
  var _cleanup$ = dart.privateName(binding$, "_cleanup");
  binding$.PerformanceModeRequestHandle = class PerformanceModeRequestHandle extends core.Object {
    static ['_#_#tearOff'](_cleanup) {
      return new binding$.PerformanceModeRequestHandle.__(_cleanup);
    }
    dispose() {
      if (!(this[_cleanup$] != null)) dart.assertFailed(null, I[0], 226, 12, "_cleanup != null");
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      dart.nullCheck(this[_cleanup$])();
      this[_cleanup$] = null;
    }
  };
  (binding$.PerformanceModeRequestHandle.__ = function(_cleanup) {
    this[_cleanup$] = _cleanup;
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/scheduler.dart", className: dart.strSafe(dart_rti.createRuntimeType(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|PerformanceModeRequestHandle", true))), object: this});
    }
  }).prototype = binding$.PerformanceModeRequestHandle.prototype;
  dart.addRtiResources(binding$.PerformanceModeRequestHandle, ["flutter__src__scheduler__binding|PerformanceModeRequestHandle"]);
  dart.setMethodSignature(binding$.PerformanceModeRequestHandle, () => dart.global.Object.setPrototypeOf({
    dispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.PerformanceModeRequestHandle))));
  dart.setLibraryUri(binding$.PerformanceModeRequestHandle, I[1]);
  dart.setFieldSignature(binding$.PerformanceModeRequestHandle, () => dart.global.Object.setPrototypeOf({[_cleanup$]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()?", true),
      isConst: false,
      isFinal: false
    }}, dart.getFields(dart.global.Object.getPrototypeOf(binding$.PerformanceModeRequestHandle))));
  var schedulingStrategy = dart.privateName(binding$, "SchedulerBinding.schedulingStrategy");
  var _timingsCallbacks = dart.privateName(binding$, "_timingsCallbacks");
  var _lifecycleState = dart.privateName(binding$, "_lifecycleState");
  var _taskQueue = dart.privateName(binding$, "_taskQueue");
  var _hasRequestedAnEventLoopCallback = dart.privateName(binding$, "_hasRequestedAnEventLoopCallback");
  var _nextFrameCallbackId = dart.privateName(binding$, "_nextFrameCallbackId");
  var _transientCallbacks = dart.privateName(binding$, "_transientCallbacks");
  var _removedIds = dart.privateName(binding$, "_removedIds");
  var _persistentCallbacks = dart.privateName(binding$, "_persistentCallbacks");
  var _postFrameCallbacks = dart.privateName(binding$, "_postFrameCallbacks");
  var _nextFrameCompleter = dart.privateName(binding$, "_nextFrameCompleter");
  var _hasScheduledFrame = dart.privateName(binding$, "_hasScheduledFrame");
  var _schedulerPhase = dart.privateName(binding$, "_schedulerPhase");
  var _framesEnabled = dart.privateName(binding$, "_framesEnabled");
  var _warmUpFrame = dart.privateName(binding$, "_warmUpFrame");
  var _firstRawTimeStampInEpoch = dart.privateName(binding$, "_firstRawTimeStampInEpoch");
  var _epochStart = dart.privateName(binding$, "_epochStart");
  var _lastRawTimeStamp = dart.privateName(binding$, "_lastRawTimeStamp");
  var _currentFrameTimeStamp = dart.privateName(binding$, "_currentFrameTimeStamp");
  var _debugFrameNumber = dart.privateName(binding$, "_debugFrameNumber");
  var _debugBanner = dart.privateName(binding$, "_debugBanner");
  var _rescheduleAfterWarmUpFrame = dart.privateName(binding$, "_rescheduleAfterWarmUpFrame");
  var _frameTimelineTask = dart.privateName(binding$, "_frameTimelineTask");
  var _performanceMode = dart.privateName(binding$, "_performanceMode");
  var _numPerformanceModeRequests = dart.privateName(binding$, "_numPerformanceModeRequests");
  var _profileFramePostEvent = dart.privateName(binding$, "_profileFramePostEvent");
  var _executeTimingsCallbacks = dart.privateName(binding$, "_executeTimingsCallbacks");
  var _is = dart.privateName(dart_rti, "_is");
  var _setFramesEnabledState = dart.privateName(binding$, "_setFramesEnabledState");
  var _ensureEventLoopCallback = dart.privateName(binding$, "_ensureEventLoopCallback");
  var _runTasks = dart.privateName(binding$, "_runTasks");
  var _handleBeginFrame = dart.privateName(binding$, "_handleBeginFrame");
  var _handleDrawFrame = dart.privateName(binding$, "_handleDrawFrame");
  var _adjustForEpoch = dart.privateName(binding$, "_adjustForEpoch");
  var _invokeFrameCallback = dart.privateName(binding$, "_invokeFrameCallback");
  var _disposePerformanceModeRequest = dart.privateName(binding$, "_disposePerformanceModeRequest");
  binding$.SchedulerBinding = class SchedulerBinding extends binding.BindingBase {
    static get instance() {
      return binding.BindingBase.checkInstance(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|SchedulerBinding", true), binding$.SchedulerBinding._instance);
    }
    static _taskSorter(e1, e2) {
      return -e1.priority[$compareTo](e2.priority);
    }
    static debugPrintTransientCallbackRegistrationStack() {
      if (!dart.fn(() => {
        if (binding$._FrameCallbackEntry.debugCurrentCallbackStack != null) {
          print.debugPrint("When the current transient callback was registered, this was the stack:");
          print.debugPrint(assertions.FlutterError.defaultStackFilter(dart.toString(assertions.FlutterError.demangleStackTrace(dart.nullCheck(binding$._FrameCallbackEntry.debugCurrentCallbackStack)))[$trimRight]()[$split]("\n"))[$join]("\n"));
        } else {
          print.debugPrint("No transient callback is currently executing.");
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 729, 12, "() {\r\n      if (_FrameCallbackEntry.debugCurrentCallbackStack != null) {\r\n        debugPrint('When the current transient callback was registered, this was the stack:');\r\n        debugPrint(\r\n          FlutterError.defaultStackFilter(\r\n            FlutterError.demangleStackTrace(\r\n              _FrameCallbackEntry.debugCurrentCallbackStack!,\r\n            ).toString().trimRight().split('\\n'),\r\n          ).join('\\n'),\r\n        );\r\n      } else {\r\n        debugPrint('No transient callback is currently executing.');\r\n      }\r\n      return true;\r\n    }()");
    }
    static _debugDescribeTimeStamp(timeStamp, buffer) {
      if (timeStamp.inDays > 0) {
        buffer.write(dart.strSafe(timeStamp.inDays) + "d ");
      }
      if (timeStamp.inHours > 0) {
        buffer.write(dart.strSafe(timeStamp.inHours - timeStamp.inDays * 24) + "h ");
      }
      if (timeStamp.inMinutes > 0) {
        buffer.write(dart.strSafe(timeStamp.inMinutes - timeStamp.inHours * 60) + "m ");
      }
      if (timeStamp.inSeconds > 0) {
        buffer.write(dart.strSafe(timeStamp.inSeconds - timeStamp.inMinutes * 60) + "s ");
      }
      buffer.write(dart.strSafe(timeStamp.inMilliseconds - timeStamp.inSeconds * 1000));
      let microseconds = timeStamp.inMicroseconds - timeStamp.inMilliseconds * 1000;
      if (microseconds > 0) {
        buffer.write("." + microseconds[$toString]()[$padLeft](3, "0"));
      }
      buffer.write("ms");
    }
  };
  binding$.SchedulerBinding[dart.mixinOn] = BindingBase => class SchedulerBinding extends BindingBase {
    get schedulingStrategy() {
      return this[schedulingStrategy];
    }
    set schedulingStrategy(value) {
      this[schedulingStrategy] = value;
    }
    initInstances() {
      super.initInstances();
      binding$.SchedulerBinding._instance = this;
      {
        this.addTimingsCallback(dart.fn(timings => {
          timings[$forEach](dart.bind(this, _profileFramePostEvent));
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|List<ui|FrameTiming>)", true)));
      }
    }
    addTimingsCallback(callback) {
      this[_timingsCallbacks][$add](callback);
      if (this[_timingsCallbacks][$length] === 1) {
        if (!(this.platformDispatcher.onReportTimings == null)) dart.assertFailed(null, I[0], 329, 14, "platformDispatcher.onReportTimings == null");
        this.platformDispatcher.onReportTimings = dart.bind(this, _executeTimingsCallbacks);
      }
      if (!dart.equals(this.platformDispatcher.onReportTimings, dart.bind(this, _executeTimingsCallbacks))) dart.assertFailed(null, I[0], 332, 12, "platformDispatcher.onReportTimings == _executeTimingsCallbacks");
    }
    removeTimingsCallback(callback) {
      if (!this[_timingsCallbacks][$contains](callback)) dart.assertFailed(null, I[0], 337, 12, "_timingsCallbacks.contains(callback)");
      this[_timingsCallbacks][$remove](callback);
      if (this[_timingsCallbacks][$isEmpty]) {
        this.platformDispatcher.onReportTimings = null;
      }
    }
    [_executeTimingsCallbacks](timings) {
      let clonedCallbacks = core.List.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|List<ui|FrameTiming>)>", true), this[_timingsCallbacks]);
      for (let callback of clonedCallbacks) {
        try {
          if (this[_timingsCallbacks][$contains](callback)) {
            callback(timings);
          }
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let stack = dart.stackTrace(t$36$35e);
          if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](exception)) {
            let collector = null;
            if (!dart.fn(() => {
              collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<~(core|List<ui|FrameTiming>)>", true), "The TimingsCallback that gets executed was", callback, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
              return true;
            }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 355, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<TimingsCallback>(\r\n              'The TimingsCallback that gets executed was',\r\n              callback,\r\n              style: DiagnosticsTreeStyle.errorProperty,\r\n            ),\r\n          ];\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "while executing callbacks for FrameTiming"), informationCollector: collector}));
          } else
            throw t$36$35e;
        }
      }
    }
    initServiceExtensions() {
      super.initServiceExtensions();
      {
        this.registerNumericServiceExtension({name: core['EnumName|get#name'](service_extensions.SchedulerServiceExtensions.timeDilation), getter: dart.fn(() => {
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true)), t$returnValue;
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    t$returnValue = binding$.timeDilation;
                    // goto return
                    t$goto = 2;
                    break;
                  case 2:
                    // return
                    return async._asyncReturn(t$returnValue, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|double>()", true)), setter: dart.fn(value => {
            let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true));
            var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
              if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
              while (true)
                switch (t$goto) {
                  case 0:
                    // Function start
                    binding$.timeDilation = value;
                    // implicit return
                    return async._asyncReturn(null, t$completer);
                }
            });
            return async._asyncStartSync(t$36asyncBody, t$completer);
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|double)", true))});
      }
    }
    get lifecycleState() {
      return this[_lifecycleState];
    }
    resetInternalState() {
      this[_lifecycleState] = null;
      this[_framesEnabled] = true;
    }
    handleAppLifecycleStateChanged(state) {
      if (this.lifecycleState === state) {
        return;
      }
      this[_lifecycleState] = state;
      switch (state) {
        case C[8] || CT.C8:
        case C[9] || CT.C9:
          {
            this[_setFramesEnabledState](true);
            break;
          }
        case C[10] || CT.C10:
        case C[11] || CT.C11:
        case C[12] || CT.C12:
          {
            this[_setFramesEnabledState](false);
          }
      }
    }
    scheduleTask(T, task, priority, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      let isFirstTask = this[_taskQueue].isEmpty;
      let entry = new binding$._TaskEntry.new(dart_rti.instanceType(this)[_bind](T)[_eval]("flutter__src__scheduler__binding|_TaskEntry<1>"), task, priority.value, debugLabel, flow);
      this[_taskQueue].add(entry);
      if (isFirstTask && !this.locked) {
        this[_ensureEventLoopCallback]();
      }
      return entry.completer.future;
    }
    unlocked() {
      super.unlocked();
      if (this[_taskQueue].isNotEmpty) {
        this[_ensureEventLoopCallback]();
      }
    }
    [_ensureEventLoopCallback]() {
      if (!!this.locked) dart.assertFailed(null, I[0], 501, 12, "!locked");
      if (!this[_taskQueue].isNotEmpty) dart.assertFailed(null, I[0], 502, 12, "_taskQueue.isNotEmpty");
      if (this[_hasRequestedAnEventLoopCallback]) {
        return;
      }
      this[_hasRequestedAnEventLoopCallback] = true;
      async.Timer.run(dart.bind(this, _runTasks));
    }
    [_runTasks]() {
      this[_hasRequestedAnEventLoopCallback] = false;
      if (this.handleEventLoopCallback()) {
        this[_ensureEventLoopCallback]();
      }
    }
    handleEventLoopCallback() {
      let t$363;
      if (this[_taskQueue].isEmpty || this.locked) {
        return false;
      }
      let entry = this[_taskQueue].first;
      if (t$363 = entry.priority, this.schedulingStrategy({priority: t$363, scheduler: this})) {
        try {
          this[_taskQueue].removeFirst();
          entry.run();
        } catch (t$36$35e) {
          let exception = dart.getThrown(t$36$35e);
          let exceptionStack = dart.stackTrace(t$36$35e);
          if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](exception)) {
            let callbackStack = null;
            if (!dart.fn(() => {
              callbackStack = entry.debugStack;
              return true;
            }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 538, 16, "() {\r\n          callbackStack = entry.debugStack;\r\n          return true;\r\n        }()");
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: exceptionStack, library: "scheduler library", context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "during a task callback"), informationCollector: callbackStack == null ? null : dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.DiagnosticsStackTrace.new("\nThis exception was thrown in the context of a scheduler callback. When the scheduler callback was _registered_ (as opposed to when the exception was thrown), this was the stack", callbackStack)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true))}));
          } else
            throw t$36$35e;
        }
        return this[_taskQueue].isNotEmpty;
      }
      return true;
    }
    get transientCallbackCount() {
      return this[_transientCallbacks][$length];
    }
    scheduleFrameCallback(callback, opts) {
      let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
      this.scheduleFrame();
      this[_nextFrameCallbackId] = this[_nextFrameCallbackId] + 1;
      this[_transientCallbacks][$_set](this[_nextFrameCallbackId], new binding$._FrameCallbackEntry.new(callback, {rescheduling: rescheduling}));
      return this[_nextFrameCallbackId];
    }
    cancelFrameCallbackWithId(id) {
      if (!(id > 0)) dart.assertFailed(null, I[0], 623, 12, "id > 0");
      this[_transientCallbacks][$remove](id);
      this[_removedIds].add(id);
    }
    debugAssertNoTransientCallbacks(reason) {
      if (!dart.fn(() => {
        if (this.transientCallbackCount > 0) {
          let count = this.transientCallbackCount;
          let callbacks = collection.LinkedHashMap.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "collection|LinkedHashMap<core|int,flutter__src__scheduler__binding|_FrameCallbackEntry>", true), this[_transientCallbacks]);
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: reason, library: "scheduler library", informationCollector: dart.fn(() => (() => {
              let t$364 = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), []);
              if (count === 1)
                t$364.push(new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "There was one transient callback left. The stack trace for when it was registered is as follows:"));
              else
                t$364.push(new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "There were " + dart.strSafe(count) + " transient callbacks left. " + "The stack traces for when they were registered are as follows:"));
              for (let id of callbacks[$keys])
                t$364.push(new assertions.DiagnosticsStackTrace.new("── callback " + dart.strSafe(id) + " ──", dart.nullCheck(callbacks[$_get](id)).debugStack, {showSeparator: false}));
              return t$364;
            })(), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true))}));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 649, 12, "() {\r\n      if (transientCallbackCount > 0) {\r\n        // We cache the values so that we can produce them later\r\n        // even if the information collector is called after\r\n        // the problem has been resolved.\r\n        final int count = transientCallbackCount;\r\n        final Map<int, _FrameCallbackEntry> callbacks = Map<int, _FrameCallbackEntry>.of(_transientCallbacks);\r\n        FlutterError.reportError(FlutterErrorDetails(\r\n          exception: reason,\r\n          library: 'scheduler library',\r\n          informationCollector: () => <DiagnosticsNode>[\r\n            if (count == 1)\r\n              // TODO(jacobr): I have added an extra line break in this case.\r\n              ErrorDescription(\r\n                'There was one transient callback left. '\r\n                'The stack trace for when it was registered is as follows:',\r\n              )\r\n            else\r\n              ErrorDescription(\r\n                'There were $count transient callbacks left. '\r\n                'The stack traces for when they were registered are as follows:',\r\n              ),\r\n            for (final int id in callbacks.keys)\r\n              DiagnosticsStackTrace('── callback $id ──', callbacks[id]!.debugStack, showSeparator: false),\r\n          ],\r\n        ));\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugAssertNoPendingPerformanceModeRequests(reason) {
      if (!dart.fn(() => {
        if (this[_performanceMode] != null) {
          dart.throw(assertions.FlutterError.new(reason));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 686, 12, "() {\r\n      if (_performanceMode != null) {\r\n        throw FlutterError(reason);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugAssertNoTimeDilation(reason) {
      if (!dart.fn(() => {
        if (binding$.timeDilation !== 1.0) {
          dart.throw(assertions.FlutterError.new(reason));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 700, 12, "() {\r\n      if (timeDilation != 1.0) {\r\n        throw FlutterError(reason);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    addPersistentFrameCallback(callback) {
      this[_persistentCallbacks][$add](callback);
    }
    addPostFrameCallback(callback, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : "callback";
      if (!dart.fn(() => {
        if (debug.debugTracePostFrameCallbacks) {
          let originalCallback = callback;
          callback = dart.fn(timeStamp => {
            developer.Timeline.startSync(debugLabel);
            try {
              originalCallback(timeStamp);
            } finally {
              developer.Timeline.finishSync();
            }
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 804, 12, "() {\r\n      if (debugTracePostFrameCallbacks) {\r\n        final FrameCallback originalCallback = callback;\r\n        callback = (Duration timeStamp) {\r\n          Timeline.startSync(debugLabel);\r\n          try {\r\n            originalCallback(timeStamp);\r\n          } finally {\r\n            Timeline.finishSync();\r\n          }\r\n        };\r\n      }\r\n      return true;\r\n    }()");
      this[_postFrameCallbacks][$add](callback);
    }
    get endOfFrame() {
      if (this[_nextFrameCompleter] == null) {
        if (this.schedulerPhase === binding$.SchedulerPhase.idle) {
          this.scheduleFrame();
        }
        this[_nextFrameCompleter] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>", true));
        this.addPostFrameCallback(dart.fn(timeStamp => {
          dart.nullCheck(this[_nextFrameCompleter]).complete();
          this[_nextFrameCompleter] = null;
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true)), {debugLabel: "SchedulerBinding.completeFrame"});
      }
      return dart.nullCheck(this[_nextFrameCompleter]).future;
    }
    get hasScheduledFrame() {
      return this[_hasScheduledFrame];
    }
    get schedulerPhase() {
      return this[_schedulerPhase];
    }
    get framesEnabled() {
      return this[_framesEnabled];
    }
    [_setFramesEnabledState](enabled) {
      if (this[_framesEnabled] === enabled) {
        return;
      }
      this[_framesEnabled] = enabled;
      if (enabled) {
        this.scheduleFrame();
      }
    }
    ensureFrameCallbacksRegistered() {
      let t$365, t$365$;
      t$365 = this.platformDispatcher;
      t$365.onBeginFrame == null ? t$365.onBeginFrame = dart.bind(this, _handleBeginFrame) : null;
      t$365$ = this.platformDispatcher;
      t$365$.onDrawFrame == null ? t$365$.onDrawFrame = dart.bind(this, _handleDrawFrame) : null;
    }
    ensureVisualUpdate() {
      switch (this.schedulerPhase) {
        case C[1] || CT.C1:
        case C[5] || CT.C5:
          {
            this.scheduleFrame();
            return;
          }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        case C[4] || CT.C4:
          {
            return;
          }
      }
    }
    scheduleFrame() {
      if (this[_hasScheduledFrame] || !this.framesEnabled) {
        return;
      }
      if (!dart.fn(() => {
        if (debug.debugPrintScheduleFrameStacks) {
          assertions.debugPrintStack({label: "scheduleFrame() called. Current phase is " + dart.str(this.schedulerPhase) + "."});
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 935, 12, "() {\r\n      if (debugPrintScheduleFrameStacks) {\r\n        debugPrintStack(label: 'scheduleFrame() called. Current phase is $schedulerPhase.');\r\n      }\r\n      return true;\r\n    }()");
      this.ensureFrameCallbacksRegistered();
      this.platformDispatcher.scheduleFrame();
      this[_hasScheduledFrame] = true;
    }
    scheduleForcedFrame() {
      if (this[_hasScheduledFrame]) {
        return;
      }
      if (!dart.fn(() => {
        if (debug.debugPrintScheduleFrameStacks) {
          assertions.debugPrintStack({label: "scheduleForcedFrame() called. Current phase is " + dart.str(this.schedulerPhase) + "."});
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 970, 12, "() {\r\n      if (debugPrintScheduleFrameStacks) {\r\n        debugPrintStack(label: 'scheduleForcedFrame() called. Current phase is $schedulerPhase.');\r\n      }\r\n      return true;\r\n    }()");
      this.ensureFrameCallbacksRegistered();
      this.platformDispatcher.scheduleFrame();
      this[_hasScheduledFrame] = true;
    }
    scheduleWarmUpFrame() {
      let t$365;
      if (this[_warmUpFrame] || this.schedulerPhase !== binding$.SchedulerPhase.idle) {
        return;
      }
      this[_warmUpFrame] = true;
      let debugTimelineTask = null;
      {
        debugTimelineTask = (t$365 = new developer.TimelineTask.new(), (() => {
          t$365.start("Warm-up frame");
          return t$365;
        })());
      }
      let hadScheduledFrame = this[_hasScheduledFrame];
      ui.PlatformDispatcher.instance.scheduleWarmUpFrame({beginFrame: dart.fn(() => {
          if (!this[_warmUpFrame]) dart.assertFailed(null, I[0], 1035, 16, "_warmUpFrame");
          this.handleBeginFrame(null);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)), drawFrame: dart.fn(() => {
          if (!this[_warmUpFrame]) dart.assertFailed(null, I[0], 1039, 16, "_warmUpFrame");
          this.handleDrawFrame();
          this.resetEpoch();
          this[_warmUpFrame] = false;
          if (hadScheduledFrame) {
            this.scheduleFrame();
          }
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true))});
      this.lockEvents(dart.fn(() => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true));
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                t$goto = 2;
                return async._asyncAwait(this.endOfFrame, t$36asyncBody, t$completer);
              case 2:
                // returning from await.
                dart.nullCheck(debugTimelineTask).finish();
                // implicit return
                return async._asyncReturn(null, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true)));
    }
    resetEpoch() {
      this[_epochStart] = this[_adjustForEpoch](this[_lastRawTimeStamp]);
      this[_firstRawTimeStampInEpoch] = null;
    }
    [_adjustForEpoch](rawTimeStamp) {
      let rawDurationSinceEpoch = this[_firstRawTimeStampInEpoch] == null ? core.Duration.zero : rawTimeStamp['-'](dart.nullCheck(this[_firstRawTimeStampInEpoch]));
      return new core.Duration.new({microseconds: (rawDurationSinceEpoch.inMicroseconds / binding$.timeDilation)[$round]() + this[_epochStart].inMicroseconds});
    }
    get currentFrameTimeStamp() {
      if (!(this[_currentFrameTimeStamp] != null)) dart.assertFailed(null, I[0], 1112, 12, "_currentFrameTimeStamp != null");
      return dart.nullCheck(this[_currentFrameTimeStamp]);
    }
    get currentSystemFrameTimeStamp() {
      return this[_lastRawTimeStamp];
    }
    [_handleBeginFrame](rawTimeStamp) {
      if (this[_warmUpFrame]) {
        if (!!this[_rescheduleAfterWarmUpFrame]) dart.assertFailed(null, I[0], 1151, 14, "!_rescheduleAfterWarmUpFrame");
        this[_rescheduleAfterWarmUpFrame] = true;
        return;
      }
      this.handleBeginFrame(rawTimeStamp);
    }
    [_handleDrawFrame]() {
      if (this[_rescheduleAfterWarmUpFrame]) {
        this[_rescheduleAfterWarmUpFrame] = false;
        this.addPostFrameCallback(dart.fn(timeStamp => {
          this[_hasScheduledFrame] = false;
          this.scheduleFrame();
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true)), {debugLabel: "SchedulerBinding.scheduleFrame"});
        return;
      }
      this.handleDrawFrame();
    }
    handleBeginFrame(rawTimeStamp) {
      let t$365, t$365$, t$365$0;
      t$365 = this[_frameTimelineTask];
      t$365 == null ? null : t$365.start("Frame");
      this[_firstRawTimeStampInEpoch] == null ? this[_firstRawTimeStampInEpoch] = rawTimeStamp : null;
      this[_currentFrameTimeStamp] = this[_adjustForEpoch]((t$365$ = rawTimeStamp, t$365$ == null ? this[_lastRawTimeStamp] : t$365$));
      if (rawTimeStamp != null) {
        this[_lastRawTimeStamp] = rawTimeStamp;
      }
      if (!dart.fn(() => {
        this[_debugFrameNumber] = this[_debugFrameNumber] + 1;
        if (debug.debugPrintBeginFrameBanner || debug.debugPrintEndFrameBanner) {
          let frameTimeStampDescription = new core.StringBuffer.new();
          if (rawTimeStamp != null) {
            binding$.SchedulerBinding._debugDescribeTimeStamp(dart.nullCheck(this[_currentFrameTimeStamp]), frameTimeStampDescription);
          } else {
            frameTimeStampDescription.write("(warm-up frame)");
          }
          this[_debugBanner] = "▄▄▄▄▄▄▄▄ Frame " + this[_debugFrameNumber][$toString]()[$padRight](7) + "   " + dart.toString(frameTimeStampDescription)[$padLeft](18) + " ▄▄▄▄▄▄▄▄";
          if (debug.debugPrintBeginFrameBanner) {
            print.debugPrint(this[_debugBanner]);
          }
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 1212, 12, "() {\r\n      _debugFrameNumber += 1;\r\n\r\n      if (debugPrintBeginFrameBanner || debugPrintEndFrameBanner) {\r\n        final StringBuffer frameTimeStampDescription = StringBuffer();\r\n        if (rawTimeStamp != null) {\r\n          _debugDescribeTimeStamp(_currentFrameTimeStamp!, frameTimeStampDescription);\r\n        } else {\r\n          frameTimeStampDescription.write('(warm-up frame)');\r\n        }\r\n        _debugBanner = '▄▄▄▄▄▄▄▄ Frame ${_debugFrameNumber.toString().padRight(7)}   ${frameTimeStampDescription.toString().padLeft(18)} ▄▄▄▄▄▄▄▄';\r\n        if (debugPrintBeginFrameBanner) {\r\n          debugPrint(_debugBanner);\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      if (!(this.schedulerPhase === binding$.SchedulerPhase.idle)) dart.assertFailed(null, I[0], 1230, 12, "schedulerPhase == SchedulerPhase.idle");
      this[_hasScheduledFrame] = false;
      try {
        t$365$0 = this[_frameTimelineTask];
        t$365$0 == null ? null : t$365$0.start("Animate");
        this[_schedulerPhase] = binding$.SchedulerPhase.transientCallbacks;
        let callbacks = this[_transientCallbacks];
        this[_transientCallbacks] = new _js_helper.IdentityMap.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|int,flutter__src__scheduler__binding|_FrameCallbackEntry>", true));
        callbacks[$forEach](dart.fn((id, callbackEntry) => {
          if (!this[_removedIds].contains(id)) {
            this[_invokeFrameCallback](callbackEntry.callback, dart.nullCheck(this[_currentFrameTimeStamp]), callbackEntry.debugStack);
          }
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|int,flutter__src__scheduler__binding|_FrameCallbackEntry)", true)));
        this[_removedIds].clear();
      } finally {
        this[_schedulerPhase] = binding$.SchedulerPhase.midFrameMicrotasks;
      }
    }
    requestPerformanceMode(mode) {
      if (this[_performanceMode] != null && this[_performanceMode] !== mode) {
        return null;
      }
      if (this[_performanceMode] === mode) {
        if (!(this[_numPerformanceModeRequests] > 0)) dart.assertFailed(null, I[0], 1267, 14, "_numPerformanceModeRequests > 0");
        this[_numPerformanceModeRequests] = this[_numPerformanceModeRequests] + 1;
      } else if (this[_performanceMode] == null) {
        if (!(this[_numPerformanceModeRequests] === 0)) dart.assertFailed(null, I[0], 1270, 14, "_numPerformanceModeRequests == 0");
        this[_performanceMode] = mode;
        this[_numPerformanceModeRequests] = 1;
      }
      return new binding$.PerformanceModeRequestHandle.__(dart.bind(this, _disposePerformanceModeRequest));
    }
    [_disposePerformanceModeRequest]() {
      this[_numPerformanceModeRequests] = this[_numPerformanceModeRequests] - 1;
      if (this[_numPerformanceModeRequests] === 0) {
        this[_performanceMode] = null;
        ui.PlatformDispatcher.instance.requestDartPerformanceMode(ui.DartPerformanceMode.balanced);
      }
    }
    debugGetRequestedPerformanceMode() {
      if (!(true || false)) {
        return null;
      } else {
        return this[_performanceMode];
      }
    }
    handleDrawFrame() {
      let t$365, t$365$;
      if (!(this[_schedulerPhase] === binding$.SchedulerPhase.midFrameMicrotasks)) dart.assertFailed(null, I[0], 1312, 12, "_schedulerPhase == SchedulerPhase.midFrameMicrotasks");
      t$365 = this[_frameTimelineTask];
      t$365 == null ? null : t$365.finish();
      try {
        this[_schedulerPhase] = binding$.SchedulerPhase.persistentCallbacks;
        for (let callback of core.List.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|Duration)>", true), this[_persistentCallbacks])) {
          this[_invokeFrameCallback](callback, dart.nullCheck(this[_currentFrameTimeStamp]));
        }
        this[_schedulerPhase] = binding$.SchedulerPhase.postFrameCallbacks;
        let localPostFrameCallbacks = core.List.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|Duration)>", true), this[_postFrameCallbacks]);
        this[_postFrameCallbacks][$clear]();
        {
          timeline.FlutterTimeline.startSync("POST_FRAME");
        }
        try {
          for (let callback of localPostFrameCallbacks) {
            this[_invokeFrameCallback](callback, dart.nullCheck(this[_currentFrameTimeStamp]));
          }
        } finally {
          {
            timeline.FlutterTimeline.finishSync();
          }
        }
      } finally {
        this[_schedulerPhase] = binding$.SchedulerPhase.idle;
        t$365$ = this[_frameTimelineTask];
        t$365$ == null ? null : t$365$.finish();
        if (!dart.fn(() => {
          if (debug.debugPrintEndFrameBanner) {
            print.debugPrint("▀"[$times](dart.nullCheck(this[_debugBanner]).length));
          }
          this[_debugBanner] = null;
          return true;
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 1341, 14, "() {\r\n        if (debugPrintEndFrameBanner) {\r\n          debugPrint('▀' * _debugBanner!.length);\r\n        }\r\n        _debugBanner = null;\r\n        return true;\r\n      }()");
        this[_currentFrameTimeStamp] = null;
      }
    }
    [_profileFramePostEvent](frameTiming) {
      this.postEvent("Flutter.Frame", new _js_helper.IdentityMap.from(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|String,@>", true), ["number", frameTiming.frameNumber, "startTime", frameTiming.timestampInMicroseconds(ui.FramePhase.buildStart), "elapsed", frameTiming.totalSpan.inMicroseconds, "build", frameTiming.buildDuration.inMicroseconds, "raster", frameTiming.rasterDuration.inMicroseconds, "vsyncOverhead", frameTiming.vsyncOverhead.inMicroseconds]));
    }
    [_invokeFrameCallback](callback, timeStamp, callbackStack = null) {
      if (!(binding$._FrameCallbackEntry.debugCurrentCallbackStack == null)) dart.assertFailed(null, I[0], 1391, 12, "_FrameCallbackEntry.debugCurrentCallbackStack == null");
      if (!dart.fn(() => {
        binding$._FrameCallbackEntry.debugCurrentCallbackStack = callbackStack;
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 1392, 12, "() {\r\n      _FrameCallbackEntry.debugCurrentCallbackStack = callbackStack;\r\n      return true;\r\n    }()");
      try {
        callback(timeStamp);
      } catch (t$36$35e) {
        let exception = dart.getThrown(t$36$35e);
        let exceptionStack = dart.stackTrace(t$36$35e);
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](exception)) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: exceptionStack, library: "scheduler library", context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "during a scheduler callback"), informationCollector: callbackStack == null ? null : dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.DiagnosticsStackTrace.new("\nThis exception was thrown in the context of a scheduler callback. When the scheduler callback was _registered_ (as opposed to when the exception was thrown), this was the stack", callbackStack)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true))}));
        } else
          throw t$36$35e;
      }
      if (!dart.fn(() => {
        binding$._FrameCallbackEntry.debugCurrentCallbackStack = null;
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 1416, 12, "() {\r\n      _FrameCallbackEntry.debugCurrentCallbackStack = null;\r\n      return true;\r\n    }()");
    }
  };
  (binding$.SchedulerBinding[dart.mixinNew] = function() {
    this[_timingsCallbacks] = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<~(core|List<ui|FrameTiming>)>", true), []);
    this[_lifecycleState] = null;
    this[schedulingStrategy] = C[6] || CT.C6;
    this[_taskQueue] = new priority_queue.HeapPriorityQueue.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "collection__src__priority_queue|HeapPriorityQueue<flutter__src__scheduler__binding|_TaskEntry<@>>", true), C[7] || CT.C7);
    this[_hasRequestedAnEventLoopCallback] = false;
    this[_nextFrameCallbackId] = 0;
    this[_transientCallbacks] = new _js_helper.IdentityMap.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|int,flutter__src__scheduler__binding|_FrameCallbackEntry>", true));
    this[_removedIds] = new _js_helper.IdentitySet.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentitySet<core|int>", true));
    this[_persistentCallbacks] = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<~(core|Duration)>", true), []);
    this[_postFrameCallbacks] = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<~(core|Duration)>", true), []);
    this[_nextFrameCompleter] = null;
    this[_hasScheduledFrame] = false;
    this[_schedulerPhase] = binding$.SchedulerPhase.idle;
    this[_framesEnabled] = true;
    this[_warmUpFrame] = false;
    this[_firstRawTimeStampInEpoch] = null;
    this[_epochStart] = core.Duration.zero;
    this[_lastRawTimeStamp] = core.Duration.zero;
    this[_currentFrameTimeStamp] = null;
    this[_debugFrameNumber] = 0;
    this[_debugBanner] = null;
    this[_rescheduleAfterWarmUpFrame] = false;
    this[_frameTimelineTask] = new developer.TimelineTask.new();
    this[_performanceMode] = null;
    this[_numPerformanceModeRequests] = 0;
  }).prototype = binding$.SchedulerBinding.prototype;
  dart.addRtiResources(binding$.SchedulerBinding, ["flutter__src__scheduler__binding|SchedulerBinding"]);
  dart.setMethodSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    addTimingsCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~(core|List<ui|FrameTiming>))", true),
    removeTimingsCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~(core|List<ui|FrameTiming>))", true),
    [_executeTimingsCallbacks]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|List<ui|FrameTiming>)", true),
    resetInternalState: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    handleAppLifecycleStateChanged: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(ui|AppLifecycleState)", true),
    scheduleTask: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<0^>(0^/(),flutter__src__scheduler__priority|Priority{debugLabel:core|String?,flow:developer|Flow?})<core|Object?>", true),
    [_ensureEventLoopCallback]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_runTasks]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    handleEventLoopCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true),
    scheduleFrameCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(~(core|Duration){rescheduling:core|bool})", true),
    cancelFrameCallbackWithId: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|int)", true),
    debugAssertNoTransientCallbacks: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(core|String)", true),
    debugAssertNoPendingPerformanceModeRequests: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(core|String)", true),
    debugAssertNoTimeDilation: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(core|String)", true),
    addPersistentFrameCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~(core|Duration))", true),
    addPostFrameCallback: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~(core|Duration){debugLabel:core|String})", true),
    [_setFramesEnabledState]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|bool)", true),
    ensureFrameCallbacksRegistered: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    ensureVisualUpdate: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    scheduleFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    scheduleForcedFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    scheduleWarmUpFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    resetEpoch: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_adjustForEpoch]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration(core|Duration)", true),
    [_handleBeginFrame]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true),
    [_handleDrawFrame]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    handleBeginFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration?)", true),
    requestPerformanceMode: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|PerformanceModeRequestHandle?(ui|DartPerformanceMode)", true),
    [_disposePerformanceModeRequest]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    debugGetRequestedPerformanceMode: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|DartPerformanceMode?()", true),
    handleDrawFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_profileFramePostEvent]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(ui|FrameTiming)", true),
    [_invokeFrameCallback]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~(core|Duration),core|Duration[core|StackTrace?])", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setMethodsDefaultTypeArgSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    scheduleTask: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticMethodSignature(binding$.SchedulerBinding, () => ['_taskSorter', 'debugPrintTransientCallbackRegistrationStack', '_debugDescribeTimeStamp']);
  dart.setGetterSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    lifecycleState: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|AppLifecycleState?", true),
    transientCallbackCount: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
    endOfFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>", true),
    hasScheduledFrame: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    schedulerPhase: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|SchedulerPhase", true),
    framesEnabled: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    currentFrameTimeStamp: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration", true),
    currentSystemFrameTimeStamp: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticGetterSignature(binding$.SchedulerBinding, () => ['instance']);
  dart.setLibraryUri(binding$.SchedulerBinding, I[1]);
  dart.setFieldSignature(binding$.SchedulerBinding, () => dart.global.Object.setPrototypeOf({
    [_timingsCallbacks]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|List<ui|FrameTiming>)>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_lifecycleState]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|AppLifecycleState?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[5]
    },
    schedulingStrategy: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool({priority!core|int,scheduler!flutter__src__scheduler__binding|SchedulerBinding})", true),
      isConst: false,
      isFinal: false
    },
    [_taskQueue]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "collection__src__priority_queue|PriorityQueue<flutter__src__scheduler__binding|_TaskEntry<@>>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[6]
    },
    [_hasRequestedAnEventLoopCallback]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_nextFrameCallbackId]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_transientCallbacks]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|int,flutter__src__scheduler__binding|_FrameCallbackEntry>", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_removedIds]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Set<core|int>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_persistentCallbacks]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|Duration)>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_postFrameCallbacks]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<~(core|Duration)>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_nextFrameCompleter]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[4]
    },
    [_hasScheduledFrame]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_schedulerPhase]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__binding|SchedulerPhase", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[1]
    },
    [_framesEnabled]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_warmUpFrame]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_firstRawTimeStampInEpoch]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_epochStart]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_lastRawTimeStamp]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_currentFrameTimeStamp]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_debugFrameNumber]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_debugBanner]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_rescheduleAfterWarmUpFrame]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_frameTimelineTask]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "developer|TimelineTask?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[3]
    },
    [_performanceMode]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|DartPerformanceMode?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[5]
    },
    [_numPerformanceModeRequests]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(binding$.SchedulerBinding))));
  dart.setStaticFieldSignature(binding$.SchedulerBinding, () => ['_instance']);
  dart.defineLazy(binding$.SchedulerBinding, {
    /*binding$.SchedulerBinding._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  });
  binding$.defaultSchedulingStrategy = function defaultSchedulingStrategy(opts) {
    let priority = opts && 'priority' in opts ? opts.priority : null;
    let scheduler = opts && 'scheduler' in opts ? opts.scheduler : null;
    if (scheduler.transientCallbackCount > 0) {
      return priority >= priority$.Priority.animation.value;
    }
    return true;
  };
  dart.copyProperties(binding$, {
    get timeDilation() {
      return binding$._timeDilation;
    },
    set timeDilation(value) {
      let t$366;
      if (!(value > 0.0)) dart.assertFailed(null, I[0], 38, 10, "value > 0.0");
      if (binding$._timeDilation === value) {
        return;
      }
      t$366 = binding$.SchedulerBinding._instance;
      t$366 == null ? null : t$366.resetEpoch();
      binding$._timeDilation = value;
    }
  });
  dart.defineLazy(binding$, {
    /*binding$._timeDilation*/get _timeDilation() {
      return 1.0;
    },
    set _timeDilation(value) {}
  });
  dart.moduleConstCaches.set("packages/flutter/src/scheduler/binding.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"async|Completer":{"Completer.T":"1"},"flutter__src__scheduler__binding|_TaskEntry":{"_TaskEntry.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"flutter__src__foundation__assertions|ErrorSummary":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|_ErrorDiagnostic":{"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__foundation__assertions|ErrorDescription":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|ErrorHint":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"flutter__src__scheduler__binding|SchedulerPhase":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"flutter__src__scheduler__binding|SchedulerBinding":{"flutter__src__foundation__binding|BindingBase":[]},"collection__src__priority_queue|HeapPriorityQueue":{"HeapPriorityQueue.E":"1","PriorityQueue.E":"1","collection__src__priority_queue|PriorityQueue":["1"]},"collection__src__priority_queue|PriorityQueue":{"PriorityQueue.E":"1"},"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"},"_js_helper|IdentitySet":{"IdentitySet.E":"1","InternalSet.E":"1","_js_helper|InternalSet":["1"],"SetBase.E":"1","collection|SetBase":["1"],"LinkedHashSet.E":"1","collection|LinkedHashSet":["1"],"HashSet.E":"1","collection|HashSet":["1"],"Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_js_helper|InternalSet":{"InternalSet.E":"1","SetBase.E":"1","collection|SetBase":["1"],"LinkedHashSet.E":"1","collection|LinkedHashSet":["1"],"HashSet.E":"1","collection|HashSet":["1"],"Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|SetBase":{"SetBase.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|LinkedHashSet":{"LinkedHashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|HashSet":{"HashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Future":{"Future.T":"1"},"ui|AppLifecycleState":{"core|_Enum":[],"core|Enum":[]},"ui|DartPerformanceMode":{"core|_Enum":[],"core|Enum":[]},"core|StringBuffer":{"core|StringSink":[]}}'));
  dart.trackLibraries("packages/flutter/src/scheduler/binding.dart", {
    "package:flutter/src/scheduler/binding.dart": binding$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["binding.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter/src/scheduler/binding.dart.lib.js"}');
  // Exports:
  return {
    src__scheduler__binding: binding$
  };
}));

//# sourceMappingURL=binding.dart.lib.js.map
