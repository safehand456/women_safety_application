// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/painting/_network_image_web.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/capabilities.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__painting___network_image_web_dart(dart_sdk, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__capabilities$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js_util = dart_sdk.js_util;
  const js_interop = dart_sdk.js_interop;
  const ui = dart_sdk.ui;
  const ui_web = dart_sdk.ui_web;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation___platform_web$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation___platform_web$46dart.src__foundation__assertions;
  const capabilities = packages__flutter__src__foundation__capabilities$46dart.src__foundation__capabilities;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const binding = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const asset_bundle = packages__flutter__src__services__text_editing_delta$46dart.src__services__asset_bundle;
  var _network_image_web = Object.create(dart.library);
  var image_provider = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $forEach = dartx.forEach;
  var $asUint8List = dartx.asUint8List;
  var $lengthInBytes = dartx.lengthInBytes;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $truncate = dartx.truncate;
  var $floor = dartx.floor;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [ImageConfiguration_platform]: null,
        [ImageConfiguration_size]: null,
        [ImageConfiguration_textDirection]: null,
        [ImageConfiguration_locale]: null,
        [ImageConfiguration_devicePixelRatio]: null,
        [ImageConfiguration_bundle]: null
      }, image_provider.ImageConfiguration.prototype));
    },
    get C1() {
      return C[1] = dart.fn(_network_image_web._httpClient, dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSObject()", true));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "exact",
        [_Enum_index]: 0
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "fit",
        [_Enum_index]: 1
      }, image_provider.ResizeImagePolicy.prototype));
    },
    get C2() {
      return C[2] = dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImagePolicy", true), [C[3] || CT.C3, C[4] || CT.C4]);
    }
  });
  var C = Array(5).fill(void 0);
  var I = [
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/painting/_network_image_web.dart",
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/painting/image_provider.dart",
    "package:flutter/src/painting/image_provider.dart",
    "package:flutter/src/painting/_network_image_web.dart",
    "dart:core",
    "package:flutter/src/services/asset_bundle.dart",
    "dart:ui",
    "package:flutter/src/foundation/platform.dart",
    "dart:io",
    "dart:typed_data"
  ];
  var url$ = dart.privateName(_network_image_web, "NetworkImage.url");
  var scale$ = dart.privateName(_network_image_web, "NetworkImage.scale");
  var headers$ = dart.privateName(_network_image_web, "NetworkImage.headers");
  var _as = dart.privateName(dart_rti, "_as");
  var _loadAsync = dart.privateName(_network_image_web, "_loadAsync");
  var _imageStreamInformationCollector = dart.privateName(_network_image_web, "_imageStreamInformationCollector");
  var _is = dart.privateName(dart_rti, "_is");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _createErrorHandlerAndKey = dart.privateName(image_provider, "_createErrorHandlerAndKey");
  var ImageConfiguration_platform = dart.privateName(image_provider, "ImageConfiguration.platform");
  var ImageConfiguration_size = dart.privateName(image_provider, "ImageConfiguration.size");
  var ImageConfiguration_textDirection = dart.privateName(image_provider, "ImageConfiguration.textDirection");
  var ImageConfiguration_locale = dart.privateName(image_provider, "ImageConfiguration.locale");
  var ImageConfiguration_devicePixelRatio = dart.privateName(image_provider, "ImageConfiguration.devicePixelRatio");
  var ImageConfiguration_bundle = dart.privateName(image_provider, "ImageConfiguration.bundle");
  image_provider.ImageProvider = class ImageProvider extends core.Object {
    resolve(configuration) {
      let stream = this.createStream(configuration);
      this[_createErrorHandlerAndKey](configuration, dart.fn((key, errorHandler) => {
        this.resolveStreamForKey(configuration, stream, key, errorHandler);
      }, dart_rti.instanceType(this)[_eval]("~(ImageProvider.T,~(core|Object,core|StackTrace?))")), dart.fn((key, exception, stack) => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true)), asyncScope = Object.create(null);
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                asyncScope = Object.create(null);
                t$goto = 2;
                return async._asyncAwait(async.awaitWithTypeCheck(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>", true), null), t$36asyncBody, t$completer);
              case 2:
                // returning from await.
                asyncScope.collector = null;
                if (!dart.fn((capturedAsyncScope => () => {
                  capturedAsyncScope.collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageProvider<core|Object>>", true), "Image provider", this), new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageConfiguration>", true), "Image configuration", configuration), new diagnostics.DiagnosticsProperty.new(dart_rti.instanceType(this)[_eval]("flutter__src__foundation__diagnostics|DiagnosticsProperty<ImageProvider.T>"), "Image key", key, {defaultValue: null})]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
                  return true;
                })(asyncScope), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 377, 16, "() {\r\n          collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n            DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n          ];\r\n          return true;\r\n        }()");
                if (stream.completer == null) stream.setCompleter(new image_provider._ErrorImageCompleter.new());
                dart.nullCheck(stream.completer).reportError({exception: exception, stack: stack, context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "while resolving an image"), silent: true, informationCollector: asyncScope.collector});
                // implicit return
                return async._asyncReturn(null, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti.instanceType(this)[_eval]("async|Future<~>(ImageProvider.T?,core|Object,core|StackTrace?)")));
      return stream;
    }
    createStream(configuration) {
      return new image_stream.ImageStream.new();
    }
    obtainCacheStatus(opts) {
      let configuration = opts && 'configuration' in opts ? opts.configuration : null;
      let handleError = opts && 'handleError' in opts ? opts.handleError : null;
      let completer = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<flutter__src__painting__image_cache|ImageCacheStatus?>", true));
      this[_createErrorHandlerAndKey](configuration, dart.fn((key, innerHandleError) => {
        completer.complete(binding.PaintingBinding.instance.imageCache.statusForKey(key));
      }, dart_rti.instanceType(this)[_eval]("~(ImageProvider.T,~(core|Object,core|StackTrace?))")), dart.fn((key, exception, stack) => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true)), asyncScope = Object.create(null);
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                if (handleError != null)
                  handleError(exception, stack);
                else {
                  asyncScope = Object.create(null);
                  asyncScope.collector = null;
                  if (!dart.fn((capturedAsyncScope => () => {
                    capturedAsyncScope.collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageProvider<core|Object>>", true), "Image provider", this), new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageConfiguration>", true), "Image configuration", configuration), new diagnostics.DiagnosticsProperty.new(dart_rti.instanceType(this)[_eval]("flutter__src__foundation__diagnostics|DiagnosticsProperty<ImageProvider.T>"), "Image key", key, {defaultValue: null})]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
                    return true;
                  })(asyncScope), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 434, 18, "() {\r\n            collector = () => <DiagnosticsNode>[\r\n              DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n              DiagnosticsProperty<ImageConfiguration>('Image configuration', configuration),\r\n              DiagnosticsProperty<T>('Image key', key, defaultValue: null),\r\n            ];\r\n            return true;\r\n          }()");
                  assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({context: new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "while checking the cache location of an image"), informationCollector: asyncScope.collector, exception: exception, stack: stack}));
                  completer.complete();
                }
                // implicit return
                return async._asyncReturn(null, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti.instanceType(this)[_eval]("async|Future<~>(ImageProvider.T?,core|Object,core|StackTrace?)")));
      return completer.future;
    }
    [_createErrorHandlerAndKey](configuration, successCallback, errorCallback) {
      let obtainedKey = null;
      let didError = false;
      function handleError(exception, stack) {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true)), t$returnValue;
        var t$36asynchandleError = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                if (didError) {
                  // goto return
                  t$goto = 2;
                  break;
                }
                if (!didError) {
                  didError = true;
                  errorCallback(obtainedKey, exception, stack);
                }
              case 2:
                // return
                return async._asyncReturn(t$returnValue, t$completer);
            }
        });
        return async._asyncStartSync(t$36asynchandleError, t$completer);
      }
      dart.fn(handleError, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|Object,core|StackTrace?)", true));
      let key = null;
      try {
        key = this.obtainKey(configuration);
      } catch (t$36$35e) {
        let error = dart.getThrown(t$36$35e);
        let stackTrace = dart.stackTrace(t$36$35e);
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](error)) {
          handleError(error, stackTrace);
          return;
        } else
          throw t$36$35e;
      }
      key.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true), dart.fn(key => {
        obtainedKey = key;
        try {
          successCallback(key, handleError);
        } catch (t$36$35e) {
          let error = dart.getThrown(t$36$35e);
          let stackTrace = dart.stackTrace(t$36$35e);
          if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_is](error)) {
            handleError(error, stackTrace);
          } else
            throw t$36$35e;
        }
      }, dart_rti.instanceType(this)[_eval]("core|Null(ImageProvider.T)"))).catchError(handleError);
    }
    resolveStreamForKey(configuration, stream, key, handleError) {
      dart_rti.instanceType(this)[_eval]("ImageProvider.T")[_as](key);
      if (stream.completer != null) {
        let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => dart.nullCheck(stream.completer), dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStreamCompleter()", true)), {onError: handleError});
        if (!(completer == stream.completer)) dart.assertFailed(null, I[1], 520, 14, "identical(completer, stream.completer)");
        return;
      }
      let completer = binding.PaintingBinding.instance.imageCache.putIfAbsent(key, dart.fn(() => {
        let result = this.loadImage(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecWithSize'));
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|_AbstractImageStreamCompleter", true)[_is](result)) {
          result = this.loadBuffer(key, dart.bind(binding.PaintingBinding.instance, 'instantiateImageCodecFromBuffer'));
        }
        return result;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStreamCompleter()", true)), {onError: handleError});
      if (completer != null) {
        stream.setCompleter(completer);
      }
    }
    evict(opts) {
      let cache = opts && 'cache' in opts ? opts.cache : null;
      let configuration = opts && 'configuration' in opts ? opts.configuration : C[0] || CT.C0;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)), t$returnValue, asyncScope = Object.create(null);
      var t$36asyncevict = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              cache == null ? cache = binding.imageCache : null;
              t$goto = 2;
              return async._asyncAwait(this.obtainKey(configuration), t$36asyncevict, t$completer);
            case 2:
              // returning from await.
              asyncScope.key = t$result;
              t$returnValue = cache.evict(asyncScope.key);
              // goto return
              t$goto = 3;
              break;
            case 3:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36asyncevict, t$completer);
    }
    loadBuffer(key, decode) {
      dart_rti.instanceType(this)[_eval]("ImageProvider.T")[_as](key);
      return new image_provider._AbstractImageStreamCompleter.new();
    }
    loadImage(key, decode) {
      dart_rti.instanceType(this)[_eval]("ImageProvider.T")[_as](key);
      return new image_provider._AbstractImageStreamCompleter.new();
    }
    toString() {
      return object.objectRuntimeType(this, "ImageConfiguration") + "()";
    }
  };
  (image_provider.ImageProvider.new = function(_ti) {
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    ;
  }).prototype = image_provider.ImageProvider.prototype;
  dart.addRtiResources(image_provider.ImageProvider, ["flutter__src__painting__image_provider|ImageProvider"]);
  dart.setMethodSignature(image_provider.ImageProvider, () => dart.global.Object.setPrototypeOf({
    resolve: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStream(flutter__src__painting__image_provider|ImageConfiguration)", true),
    createStream: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStream(flutter__src__painting__image_provider|ImageConfiguration)", true),
    obtainCacheStatus: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting__image_cache|ImageCacheStatus?>({configuration!flutter__src__painting__image_provider|ImageConfiguration,handleError:~(core|Object,core|StackTrace?)?})", true),
    [_createErrorHandlerAndKey]: _ti => _ti[_eval]("~(flutter__src__painting__image_provider|ImageConfiguration,~(ImageProvider.T,~(core|Object,core|StackTrace?)),async|Future<~>(ImageProvider.T?,core|Object,core|StackTrace?))"),
    resolveStreamForKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(flutter__src__painting__image_provider|ImageConfiguration,flutter__src__painting__image_stream|ImageStream,core|Object?,~(core|Object,core|StackTrace?))", true),
    evict: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|bool>({cache:flutter__src__painting__image_cache|ImageCache?,configuration:flutter__src__painting__image_provider|ImageConfiguration})", true),
    loadBuffer: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStreamCompleter(core|Object?,async|Future<ui|Codec>(ui|ImmutableBuffer{allowUpscaling:core|bool,cacheHeight:core|int?,cacheWidth:core|int?}))", true),
    loadImage: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_stream|ImageStreamCompleter(core|Object?,async|Future<ui|Codec>(ui|ImmutableBuffer{getTargetSize:ui|TargetImageSize(core|int,core|int)?}))", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ImageProvider))));
  dart.setLibraryUri(image_provider.ImageProvider, I[2]);
  dart.defineExtensionMethods(image_provider.ImageProvider, ['toString']);
  _network_image_web.NetworkImage = class NetworkImage extends image_provider.ImageProvider {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true), url, {scale: scale, headers: headers});
    }
    obtainKey(configuration) {
      return new synchronous_future.SynchronousFuture.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__synchronous_future|SynchronousFuture<flutter__src__painting___network_image_web|NetworkImage>", true), this);
    }
    loadBuffer(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|NetworkImage", true)[_as](key);
      let chunkEvents = async.StreamController.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|StreamController<flutter__src__painting__image_stream|ImageChunkEvent>", true));
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true)[_as](key), decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    loadImage(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|NetworkImage", true)[_as](key);
      let chunkEvents = async.StreamController.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|StreamController<flutter__src__painting__image_stream|ImageChunkEvent>", true));
      return new image_stream.MultiFrameImageStreamCompleter.new({chunkEvents: chunkEvents.stream, codec: this[_loadAsync](dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true)[_as](key), decode, chunkEvents), scale: key.scale, debugLabel: key.url, informationCollector: this[_imageStreamInformationCollector](key)});
    }
    [_imageStreamInformationCollector](key) {
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageProvider<core|Object>>", true), "Image provider", this), new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting___network_image_web|NetworkImage>", true), "Image key", dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true)[_as](key))]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[0], 94, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<image_provider.ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<NetworkImage>('Image key', key as NetworkImage),\r\n      ];\r\n      return true;\r\n    }()");
      return collector;
    }
    [_loadAsync](key, decode, chunkEvents) {
      let t$360, t$360$;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Codec", true)), t$returnValue, t$temp, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      var t$36async_loadAsync = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope = Object.create(null);
              if (!dart.equals(key, this)) dart.assertFailed(null, I[0], 112, 12, "key == this");
              asyncScope.resolved = core.Uri.base.resolve(key.url);
              asyncScope.containsNetworkImageHeaders = (t$360$ = (t$360 = key.headers, t$360 == null ? null : t$360[$isNotEmpty]), t$360$ == null ? false : t$360$);
              t$goto = capabilities.isSkiaWeb || asyncScope.containsNetworkImageHeaders ? 2 : 4;
              break;
            case 2:
              // then
              asyncScope$ = Object.create(null);
              asyncScope$.completer = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<_interceptors|JSObject>", true));
              asyncScope$.request = _network_image_web.httpRequestFactory();
              asyncScope$.request.open("GET", key.url, true);
              asyncScope$.request.responseType = "arraybuffer";
              if (asyncScope.containsNetworkImageHeaders) dart.nullCheck(key.headers)[$forEach](dart.fn((capturedAsyncScope => (header, value) => {
                capturedAsyncScope.request.setRequestHeader(header, value);
              })(asyncScope$), dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|String,core|String)", true)));
              asyncScope$.request.addEventListener("load", js_util._functionToJS1(dart.fn(((capturedAsyncScope, capturedAsyncScope$) => e => {
                let status = js_util.getProperty(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true), capturedAsyncScope.request, "status");
                let accepted = status >= 200 && status < 300;
                let fileUri = status === 0;
                let notModified = status === 304;
                let unknownRedirect = status > 307 && status < 400;
                let success = accepted || fileUri || notModified || unknownRedirect;
                if (success) {
                  capturedAsyncScope.completer.complete(capturedAsyncScope.request);
                } else {
                  capturedAsyncScope.completer.completeError(e);
                  dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: status, uri: capturedAsyncScope$.resolved}));
                }
              })(asyncScope$, asyncScope), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(_interceptors|JSObject)", true))));
              asyncScope$.request.addEventListener("error", js_util._functionToJS1(dart.fn((capturedAsyncScope => e => capturedAsyncScope.completer.completeError(e))(asyncScope$), dart_rti._Universe.eval(dart_rti._theUniverse(), "~(_interceptors|JSObject)", true))));
              asyncScope$.request.send();
              t$goto = 5;
              return async._asyncAwait(asyncScope$.completer.future, t$36async_loadAsync, t$completer);
            case 5:
              // returning from await.
              asyncScope$.bytes = js_interop['JSArrayBufferToByteBuffer|get#toDart'](dart_rti._Universe.eval(dart_rti._theUniverse(), "_native_typed_data|NativeByteBuffer", true)[_as](dart.nullCheck(js_util.getProperty(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object?", true), asyncScope$.request, "response"))))[$asUint8List]();
              if (asyncScope$.bytes[$lengthInBytes] === 0) dart.throw(new image_provider.NetworkImageLoadException.new({statusCode: js_util.getProperty(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true), asyncScope$.request, "status"), uri: asyncScope.resolved}));
              t$temp = decode;
              t$goto = 6;
              return async._asyncAwait(ui.ImmutableBuffer.fromUint8List(asyncScope$.bytes), t$36async_loadAsync, t$completer);
            case 6:
              // returning from await.
              t$returnValue = t$temp(t$result);
              // goto return
              t$goto = 7;
              break;
              // goto join
              t$goto = 3;
              break;
            case 4:
              // else
              t$returnValue = ui_web.createImageCodecFromUrl(asyncScope.resolved, {chunkCallback: dart.fn((bytes, total) => {
                  chunkEvents.add(new image_stream.ImageChunkEvent.new({cumulativeBytesLoaded: bytes, expectedTotalBytes: total}));
                }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|int,core|int)", true))});
              // goto return
              t$goto = 7;
              break;
            case 3:
              // join
            case 7:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36async_loadAsync, t$completer);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true)[_is](other) && other.url === this.url && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.url, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "NetworkImage") + "(\"" + this.url + "\", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (_network_image_web.NetworkImage.new = function(_ti, url, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[url$] = url;
    this[scale$] = scale;
    this[headers$] = headers;
    dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage).new.call(this, null);
    ;
  }).prototype = _network_image_web.NetworkImage.prototype;
  dart.addRtiResources(_network_image_web.NetworkImage, ["flutter__src__painting___network_image_web|NetworkImage", "flutter__src__painting__image_provider|NetworkImage", "flutter__src__painting__image_provider|ImageProvider"]);
  dart.setMethodSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting___network_image_web|NetworkImage>(flutter__src__painting__image_provider|ImageConfiguration)", true),
    [_imageStreamInformationCollector]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Iterable<flutter__src__foundation__diagnostics|DiagnosticsNode>()?(flutter__src__painting__image_provider|NetworkImage)", true),
    [_loadAsync]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(flutter__src__painting___network_image_web|NetworkImage,async|Future<ui|Codec>(ui|ImmutableBuffer),async|StreamController<flutter__src__painting__image_stream|ImageChunkEvent>)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.setLibraryUri(_network_image_web.NetworkImage, I[3]);
  dart.setFieldSignature(_network_image_web.NetworkImage, () => dart.global.Object.setPrototypeOf({
    url: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    scale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    headers: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Map<core|String,core|String>?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(_network_image_web.NetworkImage))));
  dart.defineExtensionMethods(_network_image_web.NetworkImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_network_image_web.NetworkImage, ['hashCode']);
  _network_image_web._httpClient = function _httpClient() {
    return dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSObject", true)[_as](new dart.global.XMLHttpRequest());
  };
  _network_image_web.debugRestoreHttpRequestFactory = function debugRestoreHttpRequestFactory() {
    _network_image_web.httpRequestFactory = C[1] || CT.C1;
  };
  dart.defineLazy(_network_image_web, {
    /*_network_image_web.httpRequestFactory*/get httpRequestFactory() {
      return C[1] || CT.C1;
    },
    set httpRequestFactory(value) {}
  });
  const bundle$ = ImageConfiguration_bundle;
  const devicePixelRatio$ = ImageConfiguration_devicePixelRatio;
  const locale$ = ImageConfiguration_locale;
  const textDirection$ = ImageConfiguration_textDirection;
  const size$ = ImageConfiguration_size;
  const platform$ = ImageConfiguration_platform;
  image_provider.ImageConfiguration = class ImageConfiguration extends core.Object {
    get bundle() {
      return this[bundle$];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get platform() {
      return this[platform$];
    }
    set platform(value) {
      super.platform = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: bundle, devicePixelRatio: devicePixelRatio, locale: locale, textDirection: textDirection, size: size, platform: platform});
    }
    copyWith(opts) {
      let t$362, t$362$, t$362$0, t$362$1, t$362$2, t$362$3;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let size = opts && 'size' in opts ? opts.size : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new image_provider.ImageConfiguration.new({bundle: (t$362 = bundle, t$362 == null ? this.bundle : t$362), devicePixelRatio: (t$362$ = devicePixelRatio, t$362$ == null ? this.devicePixelRatio : t$362$), locale: (t$362$0 = locale, t$362$0 == null ? this.locale : t$362$0), textDirection: (t$362$1 = textDirection, t$362$1 == null ? this.textDirection : t$362$1), size: (t$362$2 = size, t$362$2 == null ? this.size : t$362$2), platform: (t$362$3 = platform, t$362$3 == null ? this.platform : t$362$3)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ImageConfiguration", true)[_is](other) && dart.equals(other.bundle, this.bundle) && other.devicePixelRatio == this.devicePixelRatio && dart.equals(other.locale, this.locale) && other.textDirection == this.textDirection && dart.equals(other.size, this.size) && other.platform == this.platform;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.devicePixelRatio, this.locale, this.size, this.platform);
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("ImageConfiguration(");
      let hasArguments = false;
      if (this.bundle != null) {
        result.write("bundle: " + dart.str(this.bundle));
        hasArguments = true;
      }
      if (this.devicePixelRatio != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("devicePixelRatio: " + dart.nullCheck(this.devicePixelRatio)[$toStringAsFixed](1));
        hasArguments = true;
      }
      if (this.locale != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("locale: " + dart.str(this.locale));
        hasArguments = true;
      }
      if (this.textDirection != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("textDirection: " + dart.str(this.textDirection));
        hasArguments = true;
      }
      if (this.size != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("size: " + dart.str(this.size));
        hasArguments = true;
      }
      if (this.platform != null) {
        if (hasArguments) {
          result.write(", ");
        }
        result.write("platform: " + core['EnumName|get#name'](dart.nullCheck(this.platform)));
        hasArguments = true;
      }
      result.write(")");
      return dart.toString(result);
    }
  };
  (image_provider.ImageConfiguration.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    this[bundle$] = bundle;
    this[devicePixelRatio$] = devicePixelRatio;
    this[locale$] = locale;
    this[textDirection$] = textDirection;
    this[size$] = size;
    this[platform$] = platform;
    ;
  }).prototype = image_provider.ImageConfiguration.prototype;
  dart.addRtiResources(image_provider.ImageConfiguration, ["flutter__src__painting__image_provider|ImageConfiguration"]);
  dart.setMethodSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({
    copyWith: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ImageConfiguration({bundle:flutter__src__services__asset_bundle|AssetBundle?,devicePixelRatio:core|double?,locale:ui|Locale?,platform:flutter__src__foundation__platform|TargetPlatform?,size:ui|Size?,textDirection:ui|TextDirection?})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setLibraryUri(image_provider.ImageConfiguration, I[2]);
  dart.setFieldSignature(image_provider.ImageConfiguration, () => dart.global.Object.setPrototypeOf({
    bundle: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__asset_bundle|AssetBundle?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    devicePixelRatio: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    locale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Locale?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[6]
    },
    textDirection: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|TextDirection?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[6]
    },
    size: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Size?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[6]
    },
    platform: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__platform|TargetPlatform?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[7]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ImageConfiguration))));
  dart.setStaticFieldSignature(image_provider.ImageConfiguration, () => ['empty']);
  dart.defineExtensionMethods(image_provider.ImageConfiguration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ImageConfiguration, ['hashCode']);
  dart.defineLazy(image_provider.ImageConfiguration, {
    /*image_provider.ImageConfiguration.empty*/get empty() {
      return C[0] || CT.C0;
    }
  });
  image_provider._AbstractImageStreamCompleter = class _AbstractImageStreamCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._AbstractImageStreamCompleter.new();
    }
  };
  (image_provider._AbstractImageStreamCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._AbstractImageStreamCompleter).new.call(this);
    ;
  }).prototype = image_provider._AbstractImageStreamCompleter.prototype;
  dart.addRtiResources(image_provider._AbstractImageStreamCompleter, ["flutter__src__painting__image_provider|_AbstractImageStreamCompleter"]);
  dart.setLibraryUri(image_provider._AbstractImageStreamCompleter, I[2]);
  var bundle$0 = dart.privateName(image_provider, "AssetBundleImageKey.bundle");
  var name$ = dart.privateName(image_provider, "AssetBundleImageKey.name");
  var scale$0 = dart.privateName(image_provider, "AssetBundleImageKey.scale");
  image_provider.AssetBundleImageKey = class AssetBundleImageKey extends core.Object {
    get bundle() {
      return this[bundle$0];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get scale() {
      return this[scale$0];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](opts) {
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      return new image_provider.AssetBundleImageKey.new({bundle: bundle, name: name, scale: scale});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|AssetBundleImageKey", true)[_is](other) && dart.equals(other.bundle, this.bundle) && other.name === this.name && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bundle, this.name, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "AssetBundleImageKey") + "(bundle: " + dart.str(this.bundle) + ", name: \"" + this.name + "\", scale: " + dart.strSafe(this.scale) + ")";
    }
  };
  (image_provider.AssetBundleImageKey.new = function(opts) {
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    this[bundle$0] = bundle;
    this[name$] = name;
    this[scale$0] = scale;
    ;
  }).prototype = image_provider.AssetBundleImageKey.prototype;
  dart.addRtiResources(image_provider.AssetBundleImageKey, ["flutter__src__painting__image_provider|AssetBundleImageKey"]);
  dart.setLibraryUri(image_provider.AssetBundleImageKey, I[2]);
  dart.setFieldSignature(image_provider.AssetBundleImageKey, () => dart.global.Object.setPrototypeOf({
    bundle: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__asset_bundle|AssetBundle", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    name: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    scale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageKey))));
  dart.defineExtensionMethods(image_provider.AssetBundleImageKey, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.AssetBundleImageKey, ['hashCode']);
  var _loadAsync$ = dart.privateName(image_provider, "_loadAsync");
  image_provider.AssetBundleImageProvider = class AssetBundleImageProvider extends image_provider.ImageProvider {
    loadImage(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|AssetBundleImageKey", true)[_as](key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageProvider<core|Object>>", true), "Image provider", this), new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|AssetBundleImageKey>", true), "Image key", key)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 712, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n            DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n            DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n          ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    loadBuffer(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|AssetBundleImageKey", true)[_as](key);
      let collector = null;
      if (!dart.fn(() => {
        collector = dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|ImageProvider<core|Object>>", true), "Image provider", this), new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__painting__image_provider|AssetBundleImageKey>", true), "Image key", key)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true));
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 732, 12, "() {\r\n      collector = () => <DiagnosticsNode>[\r\n        DiagnosticsProperty<ImageProvider>('Image provider', this),\r\n        DiagnosticsProperty<AssetBundleImageKey>('Image key', key),\r\n      ];\r\n      return true;\r\n    }()");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.name, informationCollector: collector});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Codec", true)), t$returnValue, t$handler = 1, t$currentError, t$36$35e, t$36$35ex, asyncScope = Object.create(null);
      var t$36async_loadAsync = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.buffer = null;
              t$handler = 3;
              t$goto = 6;
              return async._asyncAwait(key.bundle.loadBuffer(key.name), t$36async_loadAsync, t$completer);
            case 6:
              // returning from await.
              asyncScope.buffer = t$result;
              t$handler = 1;
              // goto after finally
              t$goto = 5;
              break;
            case 3:
              // catch
              t$handler = 2;
              t$36$35e = t$currentError;
              t$36$35ex = dart.getThrown(t$36$35e);
              if (dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|FlutterError", true)[_is](t$36$35ex)) {
                binding.PaintingBinding.instance.imageCache.evict(key);
                dart.rethrow(t$36$35e);
              } else
                throw t$36$35e;
              // goto after finally
              t$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              t$goto = 1;
              break;
            case 5:
              // after finally
              t$returnValue = decode(asyncScope.buffer);
              // goto return
              t$goto = 7;
              break;
            case 7:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
            case 1:
              // rethrow
              return async._asyncRethrow(t$currentError, t$completer);
          }
      });
      return async._asyncStartSync(t$36async_loadAsync, t$completer);
    }
  };
  (image_provider.AssetBundleImageProvider.new = function(_ti) {
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider).new.call(this, null);
    ;
  }).prototype = image_provider.AssetBundleImageProvider.prototype;
  dart.addRtiResources(image_provider.AssetBundleImageProvider, ["flutter__src__painting__image_provider|AssetBundleImageProvider"]);
  dart.setMethodSignature(image_provider.AssetBundleImageProvider, () => dart.global.Object.setPrototypeOf({
    [_loadAsync$]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(flutter__src__painting__image_provider|AssetBundleImageKey{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.AssetBundleImageProvider))));
  dart.setLibraryUri(image_provider.AssetBundleImageProvider, I[2]);
  var _providerCacheKey$ = dart.privateName(image_provider, "ResizeImageKey._providerCacheKey");
  var _policy$ = dart.privateName(image_provider, "ResizeImageKey._policy");
  var _width$ = dart.privateName(image_provider, "ResizeImageKey._width");
  var _height$ = dart.privateName(image_provider, "ResizeImageKey._height");
  var _allowUpscaling$ = dart.privateName(image_provider, "ResizeImageKey._allowUpscaling");
  var _providerCacheKey = dart.privateName(image_provider, "_providerCacheKey");
  var _policy = dart.privateName(image_provider, "_policy");
  var _width = dart.privateName(image_provider, "_width");
  var _height = dart.privateName(image_provider, "_height");
  var _allowUpscaling = dart.privateName(image_provider, "_allowUpscaling");
  image_provider.ResizeImageKey = class ResizeImageKey extends core.Object {
    get [_providerCacheKey]() {
      return this[_providerCacheKey$];
    }
    set [_providerCacheKey](value) {
      super[_providerCacheKey] = value;
    }
    get [_policy]() {
      return this[_policy$];
    }
    set [_policy](value) {
      super[_policy] = value;
    }
    get [_width]() {
      return this[_width$];
    }
    set [_width](value) {
      super[_width] = value;
    }
    get [_height]() {
      return this[_height$];
    }
    set [_height](value) {
      super[_height] = value;
    }
    get [_allowUpscaling]() {
      return this[_allowUpscaling$];
    }
    set [_allowUpscaling](value) {
      super[_allowUpscaling] = value;
    }
    static ['_#_#tearOff'](_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
      return new image_provider.ResizeImageKey.__(_providerCacheKey, _policy, _width, _height, _allowUpscaling);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImageKey", true)[_is](other) && dart.equals(other[_providerCacheKey], this[_providerCacheKey]) && other[_policy] === this[_policy] && other[_width] == this[_width] && other[_height] == this[_height] && other[_allowUpscaling] === this[_allowUpscaling];
    }
    get hashCode() {
      return core.Object.hash(this[_providerCacheKey], this[_policy], this[_width], this[_height], this[_allowUpscaling]);
    }
  };
  (image_provider.ResizeImageKey.__ = function(_providerCacheKey, _policy, _width, _height, _allowUpscaling) {
    this[_providerCacheKey$] = _providerCacheKey;
    this[_policy$] = _policy;
    this[_width$] = _width;
    this[_height$] = _height;
    this[_allowUpscaling$] = _allowUpscaling;
    ;
  }).prototype = image_provider.ResizeImageKey.prototype;
  dart.addRtiResources(image_provider.ResizeImageKey, ["flutter__src__painting__image_provider|ResizeImageKey"]);
  dart.setLibraryUri(image_provider.ResizeImageKey, I[2]);
  dart.setFieldSignature(image_provider.ResizeImageKey, () => dart.global.Object.setPrototypeOf({
    [_providerCacheKey]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    [_policy]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImagePolicy", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_width]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    [_height]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    [_allowUpscaling]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImageKey))));
  dart.defineExtensionMethods(image_provider.ResizeImageKey, ['_equals']);
  dart.defineExtensionAccessors(image_provider.ResizeImageKey, ['hashCode']);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  image_provider.ResizeImagePolicy = class ResizeImagePolicy extends core._Enum {
    [_enumToString]() {
      return "ResizeImagePolicy." + this[_name];
    }
  };
  (image_provider.ResizeImagePolicy.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = image_provider.ResizeImagePolicy.prototype;
  dart.addRtiResources(image_provider.ResizeImagePolicy, ["flutter__src__painting__image_provider|ResizeImagePolicy"]);
  dart.setMethodSignature(image_provider.ResizeImagePolicy, () => dart.global.Object.setPrototypeOf({
    [_enumToString]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImagePolicy))));
  dart.setLibraryUri(image_provider.ResizeImagePolicy, I[2]);
  dart.setStaticFieldSignature(image_provider.ResizeImagePolicy, () => ['values', 'exact', 'fit']);
  dart.defineLazy(image_provider.ResizeImagePolicy, {
    /*image_provider.ResizeImagePolicy.values*/get values() {
      return C[2] || CT.C2;
    },
    /*image_provider.ResizeImagePolicy.exact*/get exact() {
      return C[3] || CT.C3;
    },
    /*image_provider.ResizeImagePolicy.fit*/get fit() {
      return C[4] || CT.C4;
    }
  });
  var imageProvider$ = dart.privateName(image_provider, "ResizeImage.imageProvider");
  var width$ = dart.privateName(image_provider, "ResizeImage.width");
  var height$ = dart.privateName(image_provider, "ResizeImage.height");
  var policy$ = dart.privateName(image_provider, "ResizeImage.policy");
  var allowUpscaling$ = dart.privateName(image_provider, "ResizeImage.allowUpscaling");
  var _configureErrorListener = dart.privateName(image_provider, "_configureErrorListener");
  image_provider.ResizeImage = class ResizeImage extends image_provider.ImageProvider {
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get policy() {
      return this[policy$];
    }
    set policy(value) {
      super.policy = value;
    }
    get allowUpscaling() {
      return this[allowUpscaling$];
    }
    set allowUpscaling(value) {
      super.allowUpscaling = value;
    }
    static ['_#new#tearOff'](imageProvider, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
      let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
      return new image_provider.ResizeImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImage", true), imageProvider, {width: width, height: height, policy: policy, allowUpscaling: allowUpscaling});
    }
    static resizeIfNeeded(cacheWidth, cacheHeight, provider) {
      if (cacheWidth != null || cacheHeight != null) {
        return new image_provider.ResizeImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImage", true), provider, {width: cacheWidth, height: cacheHeight});
      }
      return provider;
    }
    loadBuffer(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImageKey", true)[_as](key);
      const decodeResize = (buffer, opts) => {
        let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : null;
        let cacheHeight = opts && 'cacheHeight' in opts ? opts.cacheHeight : null;
        let cacheWidth = opts && 'cacheWidth' in opts ? opts.cacheWidth : null;
        if (!(cacheWidth == null && cacheHeight == null && allowUpscaling == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies cacheWidth, cacheHeight, or allowUpscaling.", I[1], 1285, 9, "cacheWidth == null && cacheHeight == null && allowUpscaling == null");
        return decode(buffer, {cacheWidth: this.width, cacheHeight: this.height, allowUpscaling: this.allowUpscaling});
      };
      dart.fn(decodeResize, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(ui|ImmutableBuffer{allowUpscaling:core|bool?,cacheHeight:core|int?,cacheWidth:core|int?})", true));
      let completer = this.imageProvider.loadBuffer(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      this[_configureErrorListener](completer, key);
      return completer;
    }
    loadImage(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImageKey", true)[_as](key);
      const decodeResize = (buffer, opts) => {
        let getTargetSize = opts && 'getTargetSize' in opts ? opts.getTargetSize : null;
        if (!(getTargetSize == null)) dart.assertFailed("ResizeImage cannot be composed with another ImageProvider that applies getTargetSize.", I[1], 1304, 9, "getTargetSize == null");
        return decode(buffer, {getTargetSize: dart.fn((intrinsicWidth, intrinsicHeight) => {
            let t$366, t$366$;
            switch (this.policy) {
              case C[3] || CT.C3:
                {
                  let targetWidth = this.width;
                  let targetHeight = this.height;
                  if (!this.allowUpscaling) {
                    if (targetWidth != null && dart.notNull(targetWidth) > intrinsicWidth) {
                      targetWidth = intrinsicWidth;
                    }
                    if (targetHeight != null && dart.notNull(targetHeight) > intrinsicHeight) {
                      targetHeight = intrinsicHeight;
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
              case C[4] || CT.C4:
                {
                  let aspectRatio = intrinsicWidth / intrinsicHeight;
                  let maxWidth = (t$366 = this.width, t$366 == null ? intrinsicWidth : t$366);
                  let maxHeight = (t$366$ = this.height, t$366$ == null ? intrinsicHeight : t$366$);
                  let targetWidth = intrinsicWidth;
                  let targetHeight = intrinsicHeight;
                  if (targetWidth > maxWidth) {
                    targetWidth = maxWidth;
                    targetHeight = (targetWidth / aspectRatio)[$truncate]();
                  }
                  if (targetHeight > maxHeight) {
                    targetHeight = maxHeight;
                    targetWidth = (targetHeight * aspectRatio)[$floor]();
                  }
                  if (this.allowUpscaling) {
                    if (this.width == null) {
                      if (!(this.height != null)) dart.assertFailed(null, I[1], 1343, 24, "height != null");
                      targetHeight = dart.nullCheck(this.height);
                      targetWidth = (targetHeight * aspectRatio)[$floor]();
                    } else if (this.height == null) {
                      targetWidth = dart.nullCheck(this.width);
                      targetHeight = (targetWidth / aspectRatio)[$truncate]();
                    } else {
                      let derivedMaxWidth = (maxHeight * aspectRatio)[$floor]();
                      let derivedMaxHeight = (maxWidth / aspectRatio)[$truncate]();
                      targetWidth = math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true), maxWidth, derivedMaxWidth);
                      targetHeight = math.min(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true), maxHeight, derivedMaxHeight);
                    }
                  }
                  return new ui.TargetImageSize.new({width: targetWidth, height: targetHeight});
                }
            }
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|TargetImageSize(core|int,core|int)", true))});
      };
      dart.fn(decodeResize, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(ui|ImmutableBuffer{getTargetSize:ui|TargetImageSize(core|int,core|int)?})", true));
      let completer = this.imageProvider.loadImage(key[_providerCacheKey], decodeResize);
      {
        completer.debugLabel = dart.str(completer.debugLabel) + " - Resized(" + dart.str(key[_width]) + "×" + dart.str(key[_height]) + ")";
      }
      this[_configureErrorListener](completer, key);
      return completer;
    }
    [_configureErrorListener](completer, key) {
      completer.addEphemeralErrorListener(dart.fn((exception, stackTrace) => {
        async.scheduleMicrotask(dart.fn(() => {
          binding.PaintingBinding.instance.imageCache.evict(key);
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)));
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Object,core|StackTrace?)", true)));
    }
    obtainKey(configuration) {
      let completer = null;
      let result = null;
      this.imageProvider.obtainKey(configuration).then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(key => {
        if (completer == null) {
          result = new synchronous_future.SynchronousFuture.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__synchronous_future|SynchronousFuture<flutter__src__painting__image_provider|ResizeImageKey>", true), new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        } else {
          completer.complete(new image_provider.ResizeImageKey.__(key, this.policy, this.width, this.height, this.allowUpscaling));
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Object)", true)));
      if (result != null) {
        return dart.nullCheck(result);
      }
      completer = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<flutter__src__painting__image_provider|ResizeImageKey>", true));
      return completer.future;
    }
  };
  (image_provider.ResizeImage.new = function(_ti, imageProvider, opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let policy = opts && 'policy' in opts ? opts.policy : C[3] || CT.C3;
    let allowUpscaling = opts && 'allowUpscaling' in opts ? opts.allowUpscaling : false;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[imageProvider$] = imageProvider;
    this[width$] = width;
    this[height$] = height;
    this[policy$] = policy;
    this[allowUpscaling$] = allowUpscaling;
    if (!(width != null || height != null)) dart.assertFailed(null, I[1], 1236, 15, "width != null || height != null");
    dart.global.Object.getPrototypeOf(image_provider.ResizeImage).new.call(this, null);
    ;
  }).prototype = image_provider.ResizeImage.prototype;
  dart.addRtiResources(image_provider.ResizeImage, ["flutter__src__painting__image_provider|ResizeImage"]);
  dart.setMethodSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({
    [_configureErrorListener]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(flutter__src__painting__image_stream|ImageStreamCompleter,flutter__src__painting__image_provider|ResizeImageKey)", true),
    obtainKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting__image_provider|ResizeImageKey>(flutter__src__painting__image_provider|ImageConfiguration)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  dart.setStaticMethodSignature(image_provider.ResizeImage, () => ['resizeIfNeeded']);
  dart.setLibraryUri(image_provider.ResizeImage, I[2]);
  dart.setFieldSignature(image_provider.ResizeImage, () => dart.global.Object.setPrototypeOf({
    imageProvider: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ImageProvider<core|Object>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    width: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    height: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    policy: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ResizeImagePolicy", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    allowUpscaling: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ResizeImage))));
  image_provider.NetworkImage = class NetworkImage extends image_provider.ImageProvider {
    static ['_#new#tearOff'](url, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return new _network_image_web.NetworkImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting___network_image_web|NetworkImage", true), url, {scale: scale, headers: headers});
    }
  };
  dart.addRtiResources(image_provider.NetworkImage, ["flutter__src__painting__image_provider|NetworkImage"]);
  dart.setStaticMethodSignature(image_provider.NetworkImage, () => ['new']);
  dart.setLibraryUri(image_provider.NetworkImage, I[2]);
  var file$ = dart.privateName(image_provider, "FileImage.file");
  var scale$1 = dart.privateName(image_provider, "FileImage.scale");
  image_provider.FileImage = class FileImage extends image_provider.ImageProvider {
    get file() {
      return this[file$];
    }
    set file(value) {
      super.file = value;
    }
    get scale() {
      return this[scale$1];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](file, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.FileImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|FileImage", true), file, {scale: scale});
    }
    obtainKey(configuration) {
      return new synchronous_future.SynchronousFuture.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__synchronous_future|SynchronousFuture<flutter__src__painting__image_provider|FileImage>", true), this);
    }
    loadBuffer(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|FileImage", true)[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "Path: " + this.file.path)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true))});
    }
    loadImage(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|FileImage", true)[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: key.file.path, informationCollector: dart.fn(() => _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "Path: " + this.file.path)]), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<flutter__src__foundation__diagnostics|DiagnosticsNode>()", true))});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Codec", true)), t$returnValue, t$temp, t$temp$, t$temp$0, t$temp$1, asyncScope = Object.create(null);
      var t$36async_loadAsync = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1505, 12, "key == this");
              t$goto = 2;
              return async._asyncAwait(this.file.length(), t$36async_loadAsync, t$completer);
            case 2:
              // returning from await.
              asyncScope.lengthInBytes = t$result;
              if (asyncScope.lengthInBytes === 0) {
                binding.PaintingBinding.instance.imageCache.evict(key);
                dart.throw(new core.StateError.new(dart.str(this.file) + " is empty and cannot be loaded as an image."));
              }
              t$goto = dart.equals(dart.runtimeType(this.file), dart_rti.createRuntimeType(dart_rti._Universe.eval(dart_rti._theUniverse(), "io|File", true))) ? 3 : 5;
              break;
            case 3:
              // then
              t$temp = decode;
              t$goto = 6;
              return async._asyncAwait(ui.ImmutableBuffer.fromFilePath(this.file.path), t$36async_loadAsync, t$completer);
            case 6:
              // returning from await.
              t$result = t$temp(t$result);
              // goto join
              t$goto = 4;
              break;
            case 5:
              // else
              t$temp$ = decode;
              t$temp$0 = ui.ImmutableBuffer;
              t$temp$1 = t$temp$0.fromUint8List.bind(t$temp$0);
              t$goto = 8;
              return async._asyncAwait(this.file.readAsBytes(), t$36async_loadAsync, t$completer);
            case 8:
              // returning from await.
              t$goto = 7;
              return async._asyncAwait(t$temp$1(t$result), t$36async_loadAsync, t$completer);
            case 7:
              // returning from await.
              t$result = t$temp$(t$result);
            case 4:
              // join
              t$returnValue = t$result;
              // goto return
              t$goto = 9;
              break;
            case 9:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36async_loadAsync, t$completer);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|FileImage", true)[_is](other) && other.file.path === this.file.path && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.file.path, this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "FileImage") + "(\"" + this.file.path + "\", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (image_provider.FileImage.new = function(_ti, file, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[file$] = file;
    this[scale$1] = scale;
    dart.global.Object.getPrototypeOf(image_provider.FileImage).new.call(this, null);
    ;
  }).prototype = image_provider.FileImage.prototype;
  dart.addRtiResources(image_provider.FileImage, ["flutter__src__painting__image_provider|FileImage"]);
  dart.setMethodSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting__image_provider|FileImage>(flutter__src__painting__image_provider|ImageConfiguration)", true),
    [_loadAsync$]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(flutter__src__painting__image_provider|FileImage{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.setLibraryUri(image_provider.FileImage, I[2]);
  dart.setFieldSignature(image_provider.FileImage, () => dart.global.Object.setPrototypeOf({
    file: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "io|File", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[8]
    },
    scale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.FileImage))));
  dart.defineExtensionMethods(image_provider.FileImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.FileImage, ['hashCode']);
  var bytes$ = dart.privateName(image_provider, "MemoryImage.bytes");
  var scale$2 = dart.privateName(image_provider, "MemoryImage.scale");
  image_provider.MemoryImage = class MemoryImage extends image_provider.ImageProvider {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
    get scale() {
      return this[scale$2];
    }
    set scale(value) {
      super.scale = value;
    }
    static ['_#new#tearOff'](bytes, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      return new image_provider.MemoryImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|MemoryImage", true), bytes, {scale: scale});
    }
    obtainKey(configuration) {
      return new synchronous_future.SynchronousFuture.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__synchronous_future|SynchronousFuture<flutter__src__painting__image_provider|MemoryImage>", true), this);
    }
    loadBuffer(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|MemoryImage", true)[_as](key);
      if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1580, 12, "key == this");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    loadImage(key, decode) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|MemoryImage", true)[_as](key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync$](key, {decode: decode}), scale: key.scale, debugLabel: "MemoryImage(" + diagnostics.describeIdentity(key.bytes) + ")"});
    }
    [_loadAsync$](key, opts) {
      let decode = opts && 'decode' in opts ? opts.decode : null;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "ui|Codec", true)), t$returnValue, t$temp;
      var t$36async_loadAsync = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              if (!dart.equals(key, this)) dart.assertFailed(null, I[1], 1601, 12, "key == this");
              t$temp = decode;
              t$goto = 2;
              return async._asyncAwait(ui.ImmutableBuffer.fromUint8List(this.bytes), t$36async_loadAsync, t$completer);
            case 2:
              // returning from await.
              t$returnValue = t$temp(t$result);
              // goto return
              t$goto = 3;
              break;
            case 3:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36async_loadAsync, t$completer);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|MemoryImage", true)[_is](other) && other.bytes[$_equals](this.bytes) && other.scale === this.scale;
    }
    get hashCode() {
      return core.Object.hash(this.bytes[$hashCode], this.scale);
    }
    toString() {
      return object.objectRuntimeType(this, "MemoryImage") + "(" + diagnostics.describeIdentity(this.bytes) + ", scale: " + this.scale[$toStringAsFixed](1) + ")";
    }
  };
  (image_provider.MemoryImage.new = function(_ti, bytes, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[bytes$] = bytes;
    this[scale$2] = scale;
    dart.global.Object.getPrototypeOf(image_provider.MemoryImage).new.call(this, null);
    ;
  }).prototype = image_provider.MemoryImage.prototype;
  dart.addRtiResources(image_provider.MemoryImage, ["flutter__src__painting__image_provider|MemoryImage"]);
  dart.setMethodSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting__image_provider|MemoryImage>(flutter__src__painting__image_provider|ImageConfiguration)", true),
    [_loadAsync$]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<ui|Codec>(flutter__src__painting__image_provider|MemoryImage{decode!async|Future<ui|Codec>(ui|ImmutableBuffer)})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.setLibraryUri(image_provider.MemoryImage, I[2]);
  dart.setFieldSignature(image_provider.MemoryImage, () => dart.global.Object.setPrototypeOf({
    bytes: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "typed_data|Uint8List", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[9]
    },
    scale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.MemoryImage))));
  dart.defineExtensionMethods(image_provider.MemoryImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.MemoryImage, ['hashCode']);
  var assetName$ = dart.privateName(image_provider, "ExactAssetImage.assetName");
  var scale$3 = dart.privateName(image_provider, "ExactAssetImage.scale");
  var bundle$1 = dart.privateName(image_provider, "ExactAssetImage.bundle");
  var $package$ = dart.privateName(image_provider, "ExactAssetImage.package");
  image_provider.ExactAssetImage = class ExactAssetImage extends image_provider.AssetBundleImageProvider {
    get assetName() {
      return this[assetName$];
    }
    set assetName(value) {
      super.assetName = value;
    }
    get scale() {
      return this[scale$3];
    }
    set scale(value) {
      super.scale = value;
    }
    get bundle() {
      return this[bundle$1];
    }
    set bundle(value) {
      super.bundle = value;
    }
    get package() {
      return this[$package$];
    }
    set package(value) {
      super.package = value;
    }
    static ['_#new#tearOff'](assetName, opts) {
      let scale = opts && 'scale' in opts ? opts.scale : 1;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let $package = opts && 'package' in opts ? opts.package : null;
      return new image_provider.ExactAssetImage.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ExactAssetImage", true), assetName, {scale: scale, bundle: bundle, package: $package});
    }
    get keyName() {
      return this.package == null ? this.assetName : "packages/" + dart.str(this.package) + "/" + this.assetName;
    }
    obtainKey(configuration) {
      let t$366, t$366$;
      return new synchronous_future.SynchronousFuture.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__synchronous_future|SynchronousFuture<flutter__src__painting__image_provider|AssetBundleImageKey>", true), new image_provider.AssetBundleImageKey.new({bundle: (t$366$ = (t$366 = this.bundle, t$366 == null ? configuration.bundle : t$366), t$366$ == null ? asset_bundle.rootBundle : t$366$), name: this.keyName, scale: this.scale}));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), dart.runtimeType(this))) {
        return false;
      }
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__painting__image_provider|ExactAssetImage", true)[_is](other) && other.keyName === this.keyName && other.scale === this.scale && dart.equals(other.bundle, this.bundle);
    }
    get hashCode() {
      return core.Object.hash(this.keyName, this.scale, this.bundle);
    }
    toString() {
      return object.objectRuntimeType(this, "ExactAssetImage") + "(name: \"" + this.keyName + "\", scale: " + this.scale[$toStringAsFixed](1) + ", bundle: " + dart.str(this.bundle) + ")";
    }
  };
  (image_provider.ExactAssetImage.new = function(_ti, assetName, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[assetName$] = assetName;
    this[scale$3] = scale;
    this[bundle$1] = bundle;
    this[$package$] = $package;
    dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage).new.call(this, null);
    ;
  }).prototype = image_provider.ExactAssetImage.prototype;
  dart.addRtiResources(image_provider.ExactAssetImage, ["flutter__src__painting__image_provider|ExactAssetImage"]);
  dart.setMethodSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({
    obtainKey: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<flutter__src__painting__image_provider|AssetBundleImageKey>(flutter__src__painting__image_provider|ImageConfiguration)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setGetterSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({
    keyName: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.setLibraryUri(image_provider.ExactAssetImage, I[2]);
  dart.setFieldSignature(image_provider.ExactAssetImage, () => dart.global.Object.setPrototypeOf({
    assetName: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    scale: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|double", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    bundle: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__services__asset_bundle|AssetBundle?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    package: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.ExactAssetImage))));
  dart.defineExtensionMethods(image_provider.ExactAssetImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(image_provider.ExactAssetImage, ['hashCode']);
  image_provider._ErrorImageCompleter = class _ErrorImageCompleter extends image_stream.ImageStreamCompleter {
    static ['_#new#tearOff']() {
      return new image_provider._ErrorImageCompleter.new();
    }
  };
  (image_provider._ErrorImageCompleter.new = function() {
    dart.global.Object.getPrototypeOf(image_provider._ErrorImageCompleter).new.call(this);
    ;
  }).prototype = image_provider._ErrorImageCompleter.prototype;
  dart.addRtiResources(image_provider._ErrorImageCompleter, ["flutter__src__painting__image_provider|_ErrorImageCompleter"]);
  dart.setLibraryUri(image_provider._ErrorImageCompleter, I[2]);
  var statusCode$ = dart.privateName(image_provider, "NetworkImageLoadException.statusCode");
  var uri$ = dart.privateName(image_provider, "NetworkImageLoadException.uri");
  var _message = dart.privateName(image_provider, "_message");
  image_provider.NetworkImageLoadException = class NetworkImageLoadException extends core.Object {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](opts) {
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let uri = opts && 'uri' in opts ? opts.uri : null;
      return new image_provider.NetworkImageLoadException.new({statusCode: statusCode, uri: uri});
    }
    toString() {
      return this[_message];
    }
  };
  (image_provider.NetworkImageLoadException.new = function(opts) {
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    this[uri$] = uri;
    this[_message] = "HTTP request failed, statusCode: " + dart.strSafe(statusCode) + ", " + dart.str(uri);
    ;
  }).prototype = image_provider.NetworkImageLoadException.prototype;
  dart.addRtiResources(image_provider.NetworkImageLoadException, ["flutter__src__painting__image_provider|NetworkImageLoadException", "core|Exception"]);
  dart.setLibraryUri(image_provider.NetworkImageLoadException, I[2]);
  dart.setFieldSignature(image_provider.NetworkImageLoadException, () => dart.global.Object.setPrototypeOf({
    statusCode: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    [_message]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    },
    uri: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Uri", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(image_provider.NetworkImageLoadException))));
  dart.defineExtensionMethods(image_provider.NetworkImageLoadException, ['toString']);
  dart.moduleConstCaches.set("packages/flutter/src/painting/_network_image_web.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__painting___network_image_web|NetworkImage":{"ImageProvider.T":"flutter__src__painting__image_provider|NetworkImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|NetworkImage"],"flutter__src__painting__image_provider|NetworkImage":[]},"flutter__src__painting__image_provider|ImageProvider":{"ImageProvider.T":"1"},"flutter__src__painting__image_provider|NetworkImage":{"ImageProvider.T":"flutter__src__painting__image_provider|NetworkImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|NetworkImage"]},"flutter__src__foundation__synchronous_future|SynchronousFuture":{"SynchronousFuture.T":"1","Future.T":"1","async|Future":["1"]},"async|Future":{"Future.T":"1"},"async|StreamController":{"StreamController.T":"1","StreamSink.S":"1","async|StreamSink":["1"],"EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|StreamSink":{"StreamSink.S":"1","EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|EventSink":{"EventSink.T":"1","Sink.T":"1","core|Sink":["1"]},"async|StreamConsumer":{"StreamConsumer.S":"1"},"core|Sink":{"Sink.T":"1"},"flutter__src__painting__image_stream|ImageChunkEvent":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"async|Completer":{"Completer.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"_native_typed_data|NativeByteBuffer":{"_interceptors|JavaScriptObject":[],"typed_data|ByteBuffer":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"flutter__src__foundation__assertions|ErrorDescription":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|_ErrorDiagnostic":{"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__painting__image_stream|ImageStreamCompleter":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|_AbstractImageStreamCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_stream|ImageStream":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|double":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Map":{"Map.K":"1","Map.V":"2"},"flutter__src__foundation__platform|TargetPlatform":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"ui|Size":{"ui|OffsetBase":[]},"ui|TextDirection":{"core|_Enum":[],"core|Enum":[]},"flutter__src__foundation__assertions|FlutterError":{"core|AssertionError":[],"core|Error":[],"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":[],"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"core|AssertionError":{"core|Error":[]},"flutter__src__foundation__diagnostics|DiagnosticableTreeMixin":{"flutter__src__foundation__diagnostics|DiagnosticableTree":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__foundation__diagnostics|DiagnosticableTree":{"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|ResizeImagePolicy":{"core|_Enum":[],"core|Enum":[]},"flutter__src__painting__image_provider|ResizeImage":{"ImageProvider.T":"flutter__src__painting__image_provider|ResizeImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|ResizeImageKey"]},"flutter__src__painting__image_provider|FileImage":{"ImageProvider.T":"flutter__src__painting__image_provider|FileImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|FileImage"]},"io|File":{"io|FileSystemEntity":[]},"flutter__src__painting__image_provider|MemoryImage":{"ImageProvider.T":"flutter__src__painting__image_provider|MemoryImage","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|MemoryImage"]},"typed_data|Uint8List":{"typed_data|_TypedIntList":[],"TypedDataList.E":"core|int","typed_data|TypedDataList":["core|int"],"typed_data|TypedData":[],"List.E":"core|int","core|List":["core|int"],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|_TypedIntList":{"TypedDataList.E":"core|int","typed_data|TypedDataList":["core|int"],"typed_data|TypedData":[],"List.E":"core|int","core|List":["core|int"],"Iterable.E":"core|int","core|Iterable":["core|int"],"_ListIterable.E":"core|int","core|_ListIterable":["core|int"],"EfficientLengthIterable.T":"core|int","_internal|EfficientLengthIterable":["core|int"],"HideEfficientLengthIterable.T":"core|int","_internal|HideEfficientLengthIterable":["core|int"]},"typed_data|TypedDataList":{"TypedDataList.E":"1","typed_data|TypedData":[],"List.E":"1","core|List":["1"],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"flutter__src__painting__image_provider|ExactAssetImage":{"flutter__src__painting__image_provider|AssetBundleImageProvider":[],"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__painting__image_provider|AssetBundleImageProvider":{"ImageProvider.T":"flutter__src__painting__image_provider|AssetBundleImageKey","flutter__src__painting__image_provider|ImageProvider":["flutter__src__painting__image_provider|AssetBundleImageKey"]},"flutter__src__painting__image_provider|_ErrorImageCompleter":{"flutter__src__painting__image_stream|ImageStreamCompleter":[],"flutter__src__foundation__diagnostics|Diagnosticable":[]},"flutter__src__painting__image_provider|NetworkImageLoadException":{"core|Exception":[]}}'));
  dart.trackLibraries("packages/flutter/src/painting/_network_image_web.dart", {
    "package:flutter/src/painting/_network_image_web.dart": _network_image_web,
    "package:flutter/src/painting/image_provider.dart": image_provider
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["image_provider.dart","_network_image_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter/src/painting/_network_image_web.dart.lib.js"}');
  // Exports:
  return {
    src__painting___network_image_web: _network_image_web,
    src__painting__image_provider: image_provider
  };
}));

//# sourceMappingURL=_network_image_web.dart.lib.js.map
