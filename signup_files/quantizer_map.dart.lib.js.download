// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/material_color_utilities/quantize/quantizer_map.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/material_color_utilities/utils/color_utils.dart', 'packages/material_color_utilities/quantize/quantizer.dart'], (function load__packages__material_color_utilities__quantize__quantizer_map_dart(dart_sdk, packages__material_color_utilities__utils__color_utils$46dart, packages__material_color_utilities__quantize__quantizer$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color_utils = packages__material_color_utilities__utils__color_utils$46dart.utils__color_utils;
  const quantizer = packages__material_color_utilities__quantize__quantizer$46dart.quantize__quantizer;
  var quantizer_map = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:material_color_utilities/quantize/quantizer_map.dart"];
  quantizer_map.QuantizerMap = class QuantizerMap extends core.Object {
    quantize(pixels, maxColors) {
      let t$360;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "material_color_utilities__quantize__quantizer|QuantizerResult", true)), t$returnValue, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      var t$36asyncquantize = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.countByColor = new _js_helper.IdentityMap.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|IdentityMap<core|int,core|int>", true));
              for (let pixel of pixels) {
                asyncScope$.alpha = color_utils.ColorUtils.alphaFromArgb(pixel);
                if (asyncScope$.alpha < 255) continue;
                asyncScope.countByColor[$_set](pixel, dart.notNull((t$360 = asyncScope.countByColor[$_get](pixel), t$360 == null ? 0 : t$360)) + 1);
              }
              t$returnValue = new quantizer.QuantizerResult.new(asyncScope.countByColor);
              // goto return
              t$goto = 2;
              break;
            case 2:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36asyncquantize, t$completer);
    }
    static ['_#new#tearOff']() {
      return new quantizer_map.QuantizerMap.new();
    }
  };
  (quantizer_map.QuantizerMap.new = function() {
    ;
  }).prototype = quantizer_map.QuantizerMap.prototype;
  dart.addRtiResources(quantizer_map.QuantizerMap, ["material_color_utilities__quantize__quantizer_map|QuantizerMap", "material_color_utilities__quantize__quantizer|Quantizer"]);
  dart.setMethodSignature(quantizer_map.QuantizerMap, () => dart.global.Object.setPrototypeOf({
    quantize: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<material_color_utilities__quantize__quantizer|QuantizerResult>(core|Iterable<core|int>,core|int)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(quantizer_map.QuantizerMap))));
  dart.setLibraryUri(quantizer_map.QuantizerMap, I[0]);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"async|Future":{"Future.T":"1"},"core|Iterable":{"Iterable.E":"1"},"material_color_utilities__quantize__quantizer_map|QuantizerMap":{"material_color_utilities__quantize__quantizer|Quantizer":[]}}'));
  dart.trackLibraries("packages/material_color_utilities/quantize/quantizer_map.dart", {
    "package:material_color_utilities/quantize/quantizer_map.dart": quantizer_map
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["quantizer_map.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;aAoBiD,QAAY;;6LAAnC;;;;;;;cAChB;uBACK,QAAS,OAAM;gBAClB,oBAAmB,qCAAc,KAAK;oBACxC,iBAAK,GAAG,KACV;gBAEF,AAAY,uBAAA,QAAC,KAAK,wBAAK,AAAY,uBAAA,QAAC,KAAK,GAAN,gBAAW,cAAK;;AAErD,gEAAuB,uBAAY;;cAAnC;;;;AACF;;;YAVwB;IAUxB;;;;;;;EACF","file":"../../../../../../../../../../../packages/material_color_utilities/quantize/quantizer_map.dart.lib.js"}');
  // Exports:
  return {
    quantize__quantizer_map: quantizer_map
  };
}));

//# sourceMappingURL=quantizer_map.dart.lib.js.map
