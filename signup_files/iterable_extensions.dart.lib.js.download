// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/collection/src/iterable_extensions.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/collection/src/algorithms.dart', 'packages/collection/src/utils.dart', 'packages/collection/src/functions.dart'], (function load__packages__collection__src__iterable_extensions_dart(dart_sdk, packages__collection__src__algorithms$46dart, packages__collection__src__utils$46dart, packages__collection__src__functions$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const algorithms = packages__collection__src__algorithms$46dart.src__algorithms;
  const utils = packages__collection__src__utils$46dart.src__utils;
  const functions = packages__collection__src__functions$46dart.src__functions;
  var iterable_extensions = Object.create(dart.library);
  var $iterator = dartx.iterator;
  var $length = dartx.length;
  var $add = dartx.add;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $where = dartx.where;
  var $sort = dartx.sort;
  var $shuffle = dartx.shuffle;
  var $compareTo = dartx.compareTo;
  var $isEmpty = dartx.isEmpty;
  var $last = dartx.last;
  var $skip = dartx.skip;
  var $isNaN = dartx.isNaN;
  var $truncate = dartx.truncate;
  var $remainder = dartx.remainder;
  var $addAll = dartx.addAll;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.gFn(utils.compareComparable, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(0^,0^)<core|Comparable<0^>>", true), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Comparable<@>", true)]));
    }
  });
  var C = [void 0];
  var _eval = dart.privateName(dart_rti, "_eval");
  var _current = dart.privateName(async, "_current");
  var _datum = dart.privateName(async, "_datum");
  var _yieldStar = dart.privateName(async, "_yieldStar");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _as = dart.privateName(dart_rti, "_as");
  iterable_extensions['IterableExtension|sample'] = function IterableExtension$124sample(T, $this, count, random = null) {
    core.RangeError.checkNotNegative(count, "count");
    let iterator = $this[$iterator];
    let chosen = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []);
    random == null ? random = math.Random.new() : null;
    while (chosen[$length] < count) {
      if (iterator.moveNext()) {
        let nextElement = iterator.current;
        let position = random.nextInt(chosen[$length] + 1);
        if (position === chosen[$length]) {
          chosen[$add](nextElement);
        } else {
          chosen[$add](chosen[$_get](position));
          chosen[$_set](position, nextElement);
        }
      } else {
        return chosen;
      }
    }
    let index = count;
    while (iterator.moveNext()) {
      index = index + 1;
      let position = random.nextInt(index);
      if (position < count) chosen[$_set](position, iterator.current);
    }
    return chosen;
  };
  iterable_extensions['IterableExtension|get#sample'] = function IterableExtension$124get$35sample(T, $this) {
    return dart.fn((count, random = null) => iterable_extensions['IterableExtension|sample'](T, $this, count, random), T[_eval]("core|List<0>(core|int[math|Random?])"));
  };
  iterable_extensions['IterableExtension|whereNot'] = function IterableExtension$124whereNot(T, $this, test) {
    return $this[$where](dart.fn(element => !test(element), T[_eval]("core|bool(0)")));
  };
  iterable_extensions['IterableExtension|get#whereNot'] = function IterableExtension$124get$35whereNot(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereNot'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|sorted'] = function IterableExtension$124sorted(T, $this, compare) {
    let t$366;
    t$366 = (() => {
      let t$365 = core.List.of(T[_eval]("core|List<0>"), $this);
      return t$365;
    })();
    return (() => {
      t$366[$sort](compare);
      return t$366;
    })();
  };
  iterable_extensions['IterableExtension|get#sorted'] = function IterableExtension$124get$35sorted(T, $this) {
    return dart.fn(compare => iterable_extensions['IterableExtension|sorted'](T, $this, compare), T[_eval]("core|List<0>(core|int(0,0))"));
  };
  iterable_extensions['IterableExtension|shuffled'] = function IterableExtension$124shuffled(T, $this, random = null) {
    let t$369;
    t$369 = (() => {
      let t$368 = core.List.of(T[_eval]("core|List<0>"), $this);
      return t$368;
    })();
    return (() => {
      t$369[$shuffle](random);
      return t$369;
    })();
  };
  iterable_extensions['IterableExtension|get#shuffled'] = function IterableExtension$124get$35shuffled(T, $this) {
    return dart.fn((random = null) => iterable_extensions['IterableExtension|shuffled'](T, $this, random), T[_eval]("core|List<0>([math|Random?])"));
  };
  iterable_extensions['IterableExtension|sortedBy'] = function IterableExtension$124sortedBy(T, K, $this, keyOf) {
    let elements = (() => {
      let t$3611 = core.List.of(T[_eval]("core|List<0>"), $this);
      return t$3611;
    })();
    algorithms.mergeSortBy(T, K, elements, keyOf, dart.gbind(C[0] || CT.C0, K));
    return elements;
  };
  iterable_extensions['IterableExtension|get#sortedBy'] = function IterableExtension$124get$35sortedBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|sortedBy'](T, K, $this, keyOf), T[_eval]("core|List<0>(0^(0))<core|Comparable<0^>>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Comparable<@>", true)]));
  };
  iterable_extensions['IterableExtension|get#sortedByCompare'] = function IterableExtension$124get$35sortedByCompare(T, $this) {
    return dart.gFn((K, keyOf, compare) => iterable_extensions['IterableExtension|sortedByCompare'](T, K, $this, keyOf, compare), T[_eval]("core|List<0>(0^(0),core|int(0^,0^))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|sortedByCompare'] = function IterableExtension$124sortedByCompare(T, K, $this, keyOf, compare) {
    let elements = (() => {
      let t$3615 = core.List.of(T[_eval]("core|List<0>"), $this);
      return t$3615;
    })();
    algorithms.mergeSortBy(T, K, elements, keyOf, compare);
    return elements;
  };
  iterable_extensions['IterableExtension|isSorted'] = function IterableExtension$124isSorted(T, $this, compare) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousElement = iterator.current;
    while (iterator.moveNext()) {
      let element = iterator.current;
      if (compare(previousElement, element) > 0) return false;
      previousElement = element;
    }
    return true;
  };
  iterable_extensions['IterableExtension|get#isSorted'] = function IterableExtension$124get$35isSorted(T, $this) {
    return dart.fn(compare => iterable_extensions['IterableExtension|isSorted'](T, $this, compare), T[_eval]("core|bool(core|int(0,0))"));
  };
  iterable_extensions['IterableExtension|isSortedBy'] = function IterableExtension$124isSortedBy(T, K, $this, keyOf) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousKey = keyOf(iterator.current);
    while (iterator.moveNext()) {
      let key = keyOf(iterator.current);
      if (previousKey[$compareTo](key) > 0) return false;
      previousKey = key;
    }
    return true;
  };
  iterable_extensions['IterableExtension|get#isSortedBy'] = function IterableExtension$124get$35isSortedBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|isSortedBy'](T, K, $this, keyOf), T[_eval]("core|bool(0^(0))<core|Comparable<0^>>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Comparable<@>", true)]));
  };
  iterable_extensions['IterableExtension|isSortedByCompare'] = function IterableExtension$124isSortedByCompare(T, K, $this, keyOf, compare) {
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousKey = keyOf(iterator.current);
    while (iterator.moveNext()) {
      let key = keyOf(iterator.current);
      if (compare(previousKey, key) > 0) return false;
      previousKey = key;
    }
    return true;
  };
  iterable_extensions['IterableExtension|get#isSortedByCompare'] = function IterableExtension$124get$35isSortedByCompare(T, $this) {
    return dart.gFn((K, keyOf, compare) => iterable_extensions['IterableExtension|isSortedByCompare'](T, K, $this, keyOf, compare), T[_eval]("core|bool(0^(0),core|int(0^,0^))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|forEachIndexed'] = function IterableExtension$124forEachIndexed(T, $this, action) {
    let t$3623;
    let index = 0;
    for (let element of $this) {
      action((t$3623 = index, index = t$3623 + 1, t$3623), element);
    }
  };
  iterable_extensions['IterableExtension|get#forEachIndexed'] = function IterableExtension$124get$35forEachIndexed(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachIndexed'](T, $this, action), T[_eval]("~(~(core|int,0))"));
  };
  iterable_extensions['IterableExtension|forEachWhile'] = function IterableExtension$124forEachWhile(T, $this, action) {
    for (let element of $this) {
      if (!action(element)) break;
    }
  };
  iterable_extensions['IterableExtension|get#forEachWhile'] = function IterableExtension$124get$35forEachWhile(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachWhile'](T, $this, action), T[_eval]("~(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|forEachIndexedWhile'] = function IterableExtension$124forEachIndexedWhile(T, $this, action) {
    let t$3627;
    let index = 0;
    for (let element of $this) {
      if (!action((t$3627 = index, index = t$3627 + 1, t$3627), element)) break;
    }
  };
  iterable_extensions['IterableExtension|get#forEachIndexedWhile'] = function IterableExtension$124get$35forEachIndexedWhile(T, $this) {
    return dart.fn(action => iterable_extensions['IterableExtension|forEachIndexedWhile'](T, $this, action), T[_eval]("~(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|mapIndexed'] = function IterableExtension$124mapIndexed(T, R, $this, convert) {
    let t$3629;
    let T$ = T, R$ = R, $this$ = $this, convert$ = convert;
    return async._makeSyncStarIterable(R, () => {
      let T = T$, R = R$, $this = $this$, convert = convert$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.index = 0;
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope$.element = t$wrappedValue.value;
              t$goto = 4;
              return t$iterator$[_current] = convert((t$3629 = asyncScope.index, asyncScope.index = t$3629 + 1, t$3629), asyncScope$.element), 1;
            case 4:
              // after yield
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#mapIndexed'] = function IterableExtension$124get$35mapIndexed(T, $this) {
    return dart.gFn((R, convert) => iterable_extensions['IterableExtension|mapIndexed'](T, R, $this, convert), T[_eval]("core|Iterable<0^>(0^(core|int,0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|whereIndexed'] = function IterableExtension$124whereIndexed(T, $this, test) {
    let t$3631;
    let T$ = T, $this$ = $this, test$ = test;
    return async._makeSyncStarIterable(T, () => {
      let T = T$, $this = $this$, test = test$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.index = 0;
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope$.element = t$wrappedValue.value;
              t$goto = test((t$3631 = asyncScope.index, asyncScope.index = t$3631 + 1, t$3631), asyncScope$.element) ? 4 : 5;
              break;
            case 4:
              // then
              t$goto = 6;
              return t$iterator$[_current] = asyncScope$.element, 1;
            case 6:
              // after yield
            case 5:
              // join
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#whereIndexed'] = function IterableExtension$124get$35whereIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereIndexed'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|whereNotIndexed'] = function IterableExtension$124whereNotIndexed(T, $this, test) {
    let t$3633;
    let T$ = T, $this$ = $this, test$ = test;
    return async._makeSyncStarIterable(T, () => {
      let T = T$, $this = $this$, test = test$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.index = 0;
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope$.element = t$wrappedValue.value;
              t$goto = !test((t$3633 = asyncScope.index, asyncScope.index = t$3633 + 1, t$3633), asyncScope$.element) ? 4 : 5;
              break;
            case 4:
              // then
              t$goto = 6;
              return t$iterator$[_current] = asyncScope$.element, 1;
            case 6:
              // after yield
            case 5:
              // join
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#whereNotIndexed'] = function IterableExtension$124get$35whereNotIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|whereNotIndexed'](T, $this, test), T[_eval]("core|Iterable<0>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|expandIndexed'] = function IterableExtension$124expandIndexed(T, R, $this, expand) {
    let t$3635;
    let T$ = T, R$ = R, $this$ = $this, expand$ = expand;
    return async._makeSyncStarIterable(R, () => {
      let T = T$, R = R$, $this = $this$, expand = expand$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.index = 0;
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope$.element = t$wrappedValue.value;
              t$goto = 4;
              return t$iterator$[_yieldStar](expand((t$3635 = asyncScope.index, asyncScope.index = t$3635 + 1, t$3635), asyncScope$.element));
            case 4:
              // after yield
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#expandIndexed'] = function IterableExtension$124get$35expandIndexed(T, $this) {
    return dart.gFn((R, expand) => iterable_extensions['IterableExtension|expandIndexed'](T, R, $this, expand), T[_eval]("core|Iterable<0^>(core|Iterable<0^>(core|int,0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|reduceIndexed'] = function IterableExtension$124reduceIndexed(T, $this, combine) {
    let t$3637;
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) {
      dart.throw(new core.StateError.new("no elements"));
    }
    let index = 1;
    let result = iterator.current;
    while (iterator.moveNext()) {
      result = combine((t$3637 = index, index = t$3637 + 1, t$3637), result, iterator.current);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#reduceIndexed'] = function IterableExtension$124get$35reduceIndexed(T, $this) {
    return dart.fn(combine => iterable_extensions['IterableExtension|reduceIndexed'](T, $this, combine), T[_eval]("0(0(core|int,0,0))"));
  };
  iterable_extensions['IterableExtension|foldIndexed'] = function IterableExtension$124foldIndexed(T, R, $this, initialValue, combine) {
    let t$3639;
    let result = initialValue;
    let index = 0;
    for (let element of $this) {
      result = combine((t$3639 = index, index = t$3639 + 1, t$3639), result, element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#foldIndexed'] = function IterableExtension$124get$35foldIndexed(T, $this) {
    return dart.gFn((R, initialValue, combine) => iterable_extensions['IterableExtension|foldIndexed'](T, R, $this, initialValue, combine), T[_eval]("0^(0^,0^(core|int,0^,0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|get#firstWhereOrNull'] = function IterableExtension$124get$35firstWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|firstWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|firstWhereOrNull'] = function IterableExtension$124firstWhereOrNull(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return element;
    }
    return null;
  };
  iterable_extensions['IterableExtension|firstWhereIndexedOrNull'] = function IterableExtension$124firstWhereIndexedOrNull(T, $this, test) {
    let t$3643;
    let index = 0;
    for (let element of $this) {
      if (test((t$3643 = index, index = t$3643 + 1, t$3643), element)) return element;
    }
    return null;
  };
  iterable_extensions['IterableExtension|get#firstWhereIndexedOrNull'] = function IterableExtension$124get$35firstWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|firstWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|get#firstOrNull'] = function IterableExtension$124get$35firstOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) return iterator.current;
    return null;
  };
  iterable_extensions['IterableExtension|lastWhereOrNull'] = function IterableExtension$124lastWhereOrNull(T, $this, test) {
    let result = null;
    for (let element of $this) {
      if (test(element)) result = element;
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#lastWhereOrNull'] = function IterableExtension$124get$35lastWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|lastWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|lastWhereIndexedOrNull'] = function IterableExtension$124lastWhereIndexedOrNull(T, $this, test) {
    let t$3648;
    let result = null;
    let index = 0;
    for (let element of $this) {
      if (test((t$3648 = index, index = t$3648 + 1, t$3648), element)) result = element;
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#lastWhereIndexedOrNull'] = function IterableExtension$124get$35lastWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|lastWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|get#lastOrNull'] = function IterableExtension$124get$35lastOrNull(T, $this) {
    if ($this[$isEmpty]) return null;
    return $this[$last];
  };
  iterable_extensions['IterableExtension|singleWhereOrNull'] = function IterableExtension$124singleWhereOrNull(T, $this, test) {
    let result = null;
    let found = false;
    for (let element of $this) {
      if (test(element)) {
        if (!found) {
          result = element;
          found = true;
        } else {
          return null;
        }
      }
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#singleWhereOrNull'] = function IterableExtension$124get$35singleWhereOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|singleWhereOrNull'](T, $this, test), T[_eval]("0?(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|get#singleWhereIndexedOrNull'] = function IterableExtension$124get$35singleWhereIndexedOrNull(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|singleWhereIndexedOrNull'](T, $this, test), T[_eval]("0?(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|singleWhereIndexedOrNull'] = function IterableExtension$124singleWhereIndexedOrNull(T, $this, test) {
    let t$3654;
    let result = null;
    let found = false;
    let index = 0;
    for (let element of $this) {
      if (test((t$3654 = index, index = t$3654 + 1, t$3654), element)) {
        if (!found) {
          result = element;
          found = true;
        } else {
          return null;
        }
      }
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#singleOrNull'] = function IterableExtension$124get$35singleOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let result = iterator.current;
      if (!iterator.moveNext()) {
        return result;
      }
    }
    return null;
  };
  iterable_extensions['IterableExtension|elementAtOrNull'] = function IterableExtension$124elementAtOrNull(T, $this, index) {
    return iterable_extensions['IterableExtension|get#firstOrNull'](T, $this[$skip](index));
  };
  iterable_extensions['IterableExtension|get#elementAtOrNull'] = function IterableExtension$124get$35elementAtOrNull(T, $this) {
    return dart.fn(index => iterable_extensions['IterableExtension|elementAtOrNull'](T, $this, index), T[_eval]("0?(core|int)"));
  };
  iterable_extensions['IterableExtension|lastBy'] = function IterableExtension$124lastBy(T, K, $this, key) {
    return functions.lastBy(T, K, $this, key);
  };
  iterable_extensions['IterableExtension|get#lastBy'] = function IterableExtension$124get$35lastBy(T, $this) {
    return dart.gFn((K, key) => iterable_extensions['IterableExtension|lastBy'](T, K, $this, key), T[_eval]("core|Map<0^,0>(0^(0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|groupFoldBy'] = function IterableExtension$124groupFoldBy(T, K, G, $this, keyOf, combine) {
    let result = new _js_helper.LinkedMap.new(K[_eval]("@<0>")[_bind](G)[_eval]("_js_helper|LinkedMap<1,2>"));
    for (let element of $this) {
      let key = keyOf(element);
      result[$_set](key, combine(result[$_get](key), element));
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupFoldBy'] = function IterableExtension$124get$35groupFoldBy(T, $this) {
    return dart.gFn((K, G, keyOf, combine) => iterable_extensions['IterableExtension|groupFoldBy'](T, K, G, $this, keyOf, combine), T[_eval]("core|Map<0^,1^>(0^(0),1^(1^?,0))<core|Object?,core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|groupSetsBy'] = function IterableExtension$124groupSetsBy(T, K, $this, keyOf) {
    let t$3665, t$3664, t$3663, t$3662;
    let result = new _js_helper.LinkedMap.new(T[_eval]("@<0>")[_bind](K)[_eval]("_js_helper|LinkedMap<2,core|Set<1>>"));
    for (let element of $this) {
      (t$3662 = result, t$3663 = keyOf(element), t$3664 = t$3662[$_get](t$3663), t$3664 == null ? (t$3665 = collection.LinkedHashSet.new(T[_eval]("collection|LinkedHashSet<0>")), t$3662[$_set](t$3663, t$3665), t$3665) : t$3664).add(element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupSetsBy'] = function IterableExtension$124get$35groupSetsBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|groupSetsBy'](T, K, $this, keyOf), T[_eval]("core|Map<0^,core|Set<0>>(0^(0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|groupListsBy'] = function IterableExtension$124groupListsBy(T, K, $this, keyOf) {
    let t$3667, t$3666, t$3665, t$3664;
    let result = new _js_helper.LinkedMap.new(T[_eval]("@<0>")[_bind](K)[_eval]("_js_helper|LinkedMap<2,core|List<1>>"));
    for (let element of $this) {
      (t$3664 = result, t$3665 = keyOf(element), t$3666 = t$3664[$_get](t$3665), t$3666 == null ? (t$3667 = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []), t$3664[$_set](t$3665, t$3667), t$3667) : t$3666)[$add](element);
    }
    return result;
  };
  iterable_extensions['IterableExtension|get#groupListsBy'] = function IterableExtension$124get$35groupListsBy(T, $this) {
    return dart.gFn((K, keyOf) => iterable_extensions['IterableExtension|groupListsBy'](T, K, $this, keyOf), T[_eval]("core|Map<0^,core|List<0>>(0^(0))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['IterableExtension|get#splitBefore'] = function IterableExtension$124get$35splitBefore(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBefore'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|splitBefore'] = function IterableExtension$124splitBefore(T, $this, test) {
    return iterable_extensions['IterableExtension|splitBeforeIndexed'](T, $this, dart.fn((_, element) => test(element), T[_eval]("core|bool(core|int,0)")));
  };
  iterable_extensions['IterableExtension|splitAfter'] = function IterableExtension$124splitAfter(T, $this, test) {
    return iterable_extensions['IterableExtension|splitAfterIndexed'](T, $this, dart.fn((_, element) => test(element), T[_eval]("core|bool(core|int,0)")));
  };
  iterable_extensions['IterableExtension|get#splitAfter'] = function IterableExtension$124get$35splitAfter(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitAfter'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|splitBetween'] = function IterableExtension$124splitBetween(T, $this, test) {
    return iterable_extensions['IterableExtension|splitBetweenIndexed'](T, $this, dart.fn((_, first, second) => test(first, second), T[_eval]("core|bool(core|int,0,0)")));
  };
  iterable_extensions['IterableExtension|get#splitBetween'] = function IterableExtension$124get$35splitBetween(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBetween'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(0,0))"));
  };
  iterable_extensions['IterableExtension|splitBeforeIndexed'] = function IterableExtension$124splitBeforeIndexed(T, $this, test) {
    let t$3672;
    let T$ = T, $this$ = $this, test$ = test;
    return async._makeSyncStarIterable(T[_eval]("core|List<0>"), () => {
      let T = T$, $this = $this$, test = test$;
      let t$goto = 0, t$handler = 1, t$currentError, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.iterator = $this[$iterator];
              if (!asyncScope.iterator.moveNext()) {
                // goto return
                t$goto = 2;
                break;
              }
              asyncScope.index = 1;
              asyncScope.chunk = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), [asyncScope.iterator.current]);
            case 3:
              // while condition
              if (!asyncScope.iterator.moveNext()) {
                // goto after while
                t$goto = 4;
                break;
              }
              asyncScope$.element = asyncScope.iterator.current;
              t$goto = test((t$3672 = asyncScope.index, asyncScope.index = t$3672 + 1, t$3672), asyncScope$.element) ? 5 : 6;
              break;
            case 5:
              // then
              t$goto = 7;
              return t$iterator[_current] = asyncScope.chunk, 1;
            case 7:
              // after yield
              asyncScope.chunk = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []);
            case 6:
              // join
              asyncScope.chunk[$add](asyncScope$.element);
              // goto while condition
              t$goto = 3;
              break;
            case 4:
              // after while
              t$goto = 8;
              return t$iterator[_current] = asyncScope.chunk, 1;
            case 8:
              // after yield
            case 2:
              // return
              return 0;
            case 1:
              // rethrow
              return t$iterator[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#splitBeforeIndexed'] = function IterableExtension$124get$35splitBeforeIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBeforeIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|splitAfterIndexed'] = function IterableExtension$124splitAfterIndexed(T, $this, test) {
    let t$3674, t$3674$;
    let T$ = T, $this$ = $this, test$ = test;
    return async._makeSyncStarIterable(T[_eval]("core|List<0>"), () => {
      let T = T$, $this = $this$, test = test$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.index = 0;
              asyncScope.chunk = null;
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope$.element = t$wrappedValue.value;
              (t$3674 = asyncScope.chunk, t$3674 == null ? asyncScope.chunk = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []) : t$3674)[$add](asyncScope$.element);
              t$goto = test((t$3674$ = asyncScope.index, asyncScope.index = t$3674$ + 1, t$3674$), asyncScope$.element) ? 4 : 5;
              break;
            case 4:
              // then
              t$goto = 6;
              return t$iterator$[_current] = asyncScope.chunk, 1;
            case 6:
              // after yield
              asyncScope.chunk = null;
            case 5:
              // join
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              t$goto = asyncScope.chunk != null ? 7 : 8;
              break;
            case 7:
              // then
              t$goto = 9;
              return t$iterator$[_current] = asyncScope.chunk, 1;
            case 9:
              // after yield
            case 8:
              // join
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#splitAfterIndexed'] = function IterableExtension$124get$35splitAfterIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitAfterIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0))"));
  };
  iterable_extensions['IterableExtension|splitBetweenIndexed'] = function IterableExtension$124splitBetweenIndexed(T, $this, test) {
    let t$3676;
    let T$ = T, $this$ = $this, test$ = test;
    return async._makeSyncStarIterable(T[_eval]("core|List<0>"), () => {
      let T = T$, $this = $this$, test = test$;
      let t$goto = 0, t$handler = 1, t$currentError, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.iterator = $this[$iterator];
              if (!asyncScope.iterator.moveNext()) {
                // goto return
                t$goto = 2;
                break;
              }
              asyncScope.previous = asyncScope.iterator.current;
              asyncScope.chunk = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), [asyncScope.previous]);
              asyncScope.index = 1;
            case 3:
              // while condition
              if (!asyncScope.iterator.moveNext()) {
                // goto after while
                t$goto = 4;
                break;
              }
              asyncScope$.element = asyncScope.iterator.current;
              t$goto = test((t$3676 = asyncScope.index, asyncScope.index = t$3676 + 1, t$3676), asyncScope.previous, asyncScope$.element) ? 5 : 6;
              break;
            case 5:
              // then
              t$goto = 7;
              return t$iterator[_current] = asyncScope.chunk, 1;
            case 7:
              // after yield
              asyncScope.chunk = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []);
            case 6:
              // join
              asyncScope.chunk[$add](asyncScope$.element);
              asyncScope.previous = asyncScope$.element;
              // goto while condition
              t$goto = 3;
              break;
            case 4:
              // after while
              t$goto = 8;
              return t$iterator[_current] = asyncScope.chunk, 1;
            case 8:
              // after yield
            case 2:
              // return
              return 0;
            case 1:
              // rethrow
              return t$iterator[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#splitBetweenIndexed'] = function IterableExtension$124get$35splitBetweenIndexed(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|splitBetweenIndexed'](T, $this, test), T[_eval]("core|Iterable<core|List<0>>(core|bool(core|int,0,0))"));
  };
  iterable_extensions['IterableExtension|get#none'] = function IterableExtension$124get$35none(T, $this) {
    return dart.fn(test => iterable_extensions['IterableExtension|none'](T, $this, test), T[_eval]("core|bool(core|bool(0))"));
  };
  iterable_extensions['IterableExtension|none'] = function IterableExtension$124none(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return false;
    }
    return true;
  };
  iterable_extensions['IterableExtension|slices'] = function IterableExtension$124slices(T, $this, length) {
    let T$ = T, $this$ = $this, length$ = length;
    return async._makeSyncStarIterable(T[_eval]("core|List<0>"), () => {
      let T = T$, $this = $this$, length = length$;
      let t$goto = 0, t$handler = 1, t$currentError, asyncScope = Object.create(null), asyncScope$ = Object.create(null);
      return (t$iterator, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              if (length < 1) dart.throw(new core.RangeError.range(length, 1, null, "length"));
              asyncScope.iterator = $this[$iterator];
            case 2:
              // while condition
              if (!asyncScope.iterator.moveNext()) {
                // goto after while
                t$goto = 3;
                break;
              }
              asyncScope$.slice = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), [asyncScope.iterator.current]);
              for (let i = 1; i < length && asyncScope.iterator.moveNext(); i = i + 1)
                asyncScope$.slice[$add](asyncScope.iterator.current);
              t$goto = 4;
              return t$iterator[_current] = asyncScope$.slice, 1;
            case 4:
              // after yield
              // goto while condition
              t$goto = 2;
              break;
            case 3:
              // after while
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableExtension|get#slices'] = function IterableExtension$124get$35slices(T, $this) {
    return dart.fn(length => iterable_extensions['IterableExtension|slices'](T, $this, length), T[_eval]("core|Iterable<core|List<0>>(core|int)"));
  };
  iterable_extensions['IterableNullableExtension|whereNotNull'] = function IterableNullableExtension$124whereNotNull(T, $this) {
    let T$ = T, $this$ = $this;
    return async._makeSyncStarIterable(T, () => {
      let T = T$, $this = $this$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope.element = t$wrappedValue.value;
              t$goto = asyncScope.element != null ? 4 : 5;
              break;
            case 4:
              // then
              t$goto = 6;
              return t$iterator$[_current] = asyncScope.element, 1;
            case 6:
              // after yield
            case 5:
              // join
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableNullableExtension|get#whereNotNull'] = function IterableNullableExtension$124get$35whereNotNull(T, $this) {
    return dart.fn(() => iterable_extensions['IterableNullableExtension|whereNotNull'](T, $this), T[_eval]("core|Iterable<0>()"));
  };
  iterable_extensions['IterableNumberExtension|get#minOrNull'] = function IterableNumberExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableNumberExtension|get#min'] = function IterableNumberExtension$124get$35min($this) {
    let t$3685;
    t$3685 = iterable_extensions['IterableNumberExtension|get#minOrNull']($this);
    return t$3685 == null ? dart.throw(new core.StateError.new("No element")) : t$3685;
  };
  iterable_extensions['IterableNumberExtension|get#maxOrNull'] = function IterableNumberExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableNumberExtension|get#max'] = function IterableNumberExtension$124get$35max($this) {
    let t$3687;
    t$3687 = iterable_extensions['IterableNumberExtension|get#maxOrNull']($this);
    return t$3687 == null ? dart.throw(new core.StateError.new("No element")) : t$3687;
  };
  iterable_extensions['IterableNumberExtension|get#sum'] = function IterableNumberExtension$124get$35sum($this) {
    let result = 0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableNumberExtension|get#average'] = function IterableNumberExtension$124get$35average($this) {
    let result = 0.0;
    let count = 0;
    for (let value of $this) {
      count = count + 1;
      result = result + (value - result) / count;
    }
    if (count === 0) dart.throw(new core.StateError.new("No elements"));
    return result;
  };
  iterable_extensions['IterableIntegerExtension|get#minOrNull'] = function IterableIntegerExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableIntegerExtension|get#min'] = function IterableIntegerExtension$124get$35min($this) {
    let t$3691;
    t$3691 = iterable_extensions['IterableIntegerExtension|get#minOrNull']($this);
    return t$3691 == null ? dart.throw(new core.StateError.new("No element")) : t$3691;
  };
  iterable_extensions['IterableIntegerExtension|get#maxOrNull'] = function IterableIntegerExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableIntegerExtension|get#max'] = function IterableIntegerExtension$124get$35max($this) {
    let t$3693;
    t$3693 = iterable_extensions['IterableIntegerExtension|get#maxOrNull']($this);
    return t$3693 == null ? dart.throw(new core.StateError.new("No element")) : t$3693;
  };
  iterable_extensions['IterableIntegerExtension|get#sum'] = function IterableIntegerExtension$124get$35sum($this) {
    let result = 0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableIntegerExtension|get#average'] = function IterableIntegerExtension$124get$35average($this) {
    let average = 0;
    let remainder = 0;
    let count = 0;
    for (let value of $this) {
      count = count + 1;
      let delta = value - average + remainder;
      average = average + (delta / count)[$truncate]();
      remainder = delta[$remainder](count);
    }
    if (count === 0) dart.throw(new core.StateError.new("No elements"));
    return average + remainder / count;
  };
  iterable_extensions['IterableDoubleExtension|get#minOrNull'] = function IterableDoubleExtension$124get$35minOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue < value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableDoubleExtension|get#min'] = function IterableDoubleExtension$124get$35min($this) {
    let t$3697;
    t$3697 = iterable_extensions['IterableDoubleExtension|get#minOrNull']($this);
    return t$3697 == null ? dart.throw(new core.StateError.new("No element")) : t$3697;
  };
  iterable_extensions['IterableDoubleExtension|get#maxOrNull'] = function IterableDoubleExtension$124get$35maxOrNull($this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      if (value[$isNaN]) {
        return value;
      }
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (newValue[$isNaN]) {
          return newValue;
        }
        if (newValue > value) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableDoubleExtension|get#max'] = function IterableDoubleExtension$124get$35max($this) {
    let t$3699;
    t$3699 = iterable_extensions['IterableDoubleExtension|get#maxOrNull']($this);
    return t$3699 == null ? dart.throw(new core.StateError.new("No element")) : t$3699;
  };
  iterable_extensions['IterableDoubleExtension|get#sum'] = function IterableDoubleExtension$124get$35sum($this) {
    let result = 0.0;
    for (let value of $this) {
      result = result + value;
    }
    return result;
  };
  iterable_extensions['IterableIterableExtension|get#flattened'] = function IterableIterableExtension$124get$35flattened(T, $this) {
    let T$ = T, $this$ = $this;
    return async._makeSyncStarIterable(T, () => {
      let T = T$, $this = $this$;
      let t$goto = 0, t$handler = 1, t$currentError, t$wrappedValue, t$iterator, asyncScope = Object.create(null);
      return (t$iterator$, t$errorCode, t$result) => {
        if (t$errorCode === 1) {
          t$currentError = t$result;
          t$goto = t$handler;
        }
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              t$iterator = $this[Symbol.iterator]();
            case 2:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 3;
                break;
              }
              asyncScope.elements = t$wrappedValue.value;
              t$goto = 4;
              return t$iterator$[_yieldStar](asyncScope.elements);
            case 4:
              // after yield
              // goto for-of iterator update
              t$goto = 2;
              break;
            case 3:
              // after for-of
              // implicit return
              return 0;
            case 1:
              // rethrow
              return t$iterator$[_datum] = t$currentError, 3;
          }
      };
    });
  };
  iterable_extensions['IterableIterableExtension|get#flattenedToList'] = function IterableIterableExtension$124get$35flattenedToList(T, $this) {
    return (() => {
      let t$36102 = _interceptors.JSArray.of(T[_eval]("_interceptors|JSArray<0>"), []);
      for (let elements of $this)
        t$36102[$addAll](elements);
      return t$36102;
    })();
  };
  iterable_extensions['IterableIterableExtension|get#flattenedToSet'] = function IterableIterableExtension$124get$35flattenedToSet(T, $this) {
    return (() => {
      let t$36104 = collection.LinkedHashSet.new(T[_eval]("collection|LinkedHashSet<0>"));
      for (let elements of $this)
        for (let t$36106 of elements) {
          let t$36105 = T[_as](t$36106);
          t$36104.add(t$36105);
        }
      return t$36104;
    })();
  };
  iterable_extensions['IterableComparableExtension|get#minOrNull'] = function IterableComparableExtension$124get$35minOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (value[$compareTo](newValue) > 0) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableComparableExtension|get#min'] = function IterableComparableExtension$124get$35min(T, $this) {
    let t$36109;
    t$36109 = iterable_extensions['IterableComparableExtension|get#minOrNull'](T, $this);
    return t$36109 == null ? dart.throw(new core.StateError.new("No element")) : t$36109;
  };
  iterable_extensions['IterableComparableExtension|get#maxOrNull'] = function IterableComparableExtension$124get$35maxOrNull(T, $this) {
    let iterator = $this[$iterator];
    if (iterator.moveNext()) {
      let value = iterator.current;
      while (iterator.moveNext()) {
        let newValue = iterator.current;
        if (value[$compareTo](newValue) < 0) {
          value = newValue;
        }
      }
      return value;
    }
    return null;
  };
  iterable_extensions['IterableComparableExtension|get#max'] = function IterableComparableExtension$124get$35max(T, $this) {
    let t$36111;
    t$36111 = iterable_extensions['IterableComparableExtension|get#maxOrNull'](T, $this);
    return t$36111 == null ? dart.throw(new core.StateError.new("No element")) : t$36111;
  };
  iterable_extensions['IterableComparableExtension|sorted'] = function IterableComparableExtension$124sorted(T, $this, compare = null) {
    let t$36113;
    t$36113 = (() => {
      let t$36112 = core.List.of(T[_eval]("core|List<0>"), $this);
      return t$36112;
    })();
    return (() => {
      t$36113[$sort](compare);
      return t$36113;
    })();
  };
  iterable_extensions['IterableComparableExtension|get#sorted'] = function IterableComparableExtension$124get$35sorted(T, $this) {
    return dart.fn((compare = null) => iterable_extensions['IterableComparableExtension|sorted'](T, $this, compare), T[_eval]("core|List<0>([core|int(0,0)?])"));
  };
  iterable_extensions['IterableComparableExtension|isSorted'] = function IterableComparableExtension$124isSorted(T, $this, compare = null) {
    if (compare != null) {
      return iterable_extensions['IterableExtension|isSorted'](T, $this, compare);
    }
    let iterator = $this[$iterator];
    if (!iterator.moveNext()) return true;
    let previousElement = iterator.current;
    while (iterator.moveNext()) {
      let element = iterator.current;
      if (previousElement[$compareTo](element) > 0) return false;
      previousElement = element;
    }
    return true;
  };
  iterable_extensions['IterableComparableExtension|get#isSorted'] = function IterableComparableExtension$124get$35isSorted(T, $this) {
    return dart.fn((compare = null) => iterable_extensions['IterableComparableExtension|isSorted'](T, $this, compare), T[_eval]("core|bool([core|int(0,0)?])"));
  };
  iterable_extensions['ComparatorExtension|get#inverse'] = function ComparatorExtension$124get$35inverse(T, $this) {
    return dart.fn((a, b) => $this(b, a), T[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|compareBy'] = function ComparatorExtension$124compareBy(T, R, $this, keyOf) {
    return dart.fn((a, b) => $this(keyOf(a), keyOf(b)), R[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|get#compareBy'] = function ComparatorExtension$124get$35compareBy(T, $this) {
    return dart.gFn((R, keyOf) => iterable_extensions['ComparatorExtension|compareBy'](T, R, $this, keyOf), T[_eval]("core|int(0^,0^)(0(0^))<core|Object?>"), dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]));
  };
  iterable_extensions['ComparatorExtension|then'] = function ComparatorExtension$124then(T, $this, tieBreaker) {
    return dart.fn((a, b) => {
      let result = $this(a, b);
      if (result === 0) result = tieBreaker(a, b);
      return result;
    }, T[_eval]("core|int(0,0)"));
  };
  iterable_extensions['ComparatorExtension|get#then'] = function ComparatorExtension$124get$35then(T, $this) {
    return dart.fn(tieBreaker => iterable_extensions['ComparatorExtension|then'](T, $this, tieBreaker), T[_eval]("core|int(0,0)(core|int(0,0))"));
  };
  dart.moduleConstCaches.set("packages/collection/src/iterable_extensions.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|Map":{"Map.K":"1","Map.V":"2"},"_js_helper|LinkedMap":{"LinkedMap.K":"1","LinkedMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"collection|LinkedHashSet":{"LinkedHashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]}}'));
  dart.trackLibraries("packages/collection/src/iterable_extensions.dart", {
    "package:collection/src/iterable_extensions.dart": iterable_extensions
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["iterable_extensions.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/collection/src/iterable_extensions.dart.lib.js"}');
  // Exports:
  return {
    src__iterable_extensions: iterable_extensions
  };
}));

//# sourceMappingURL=iterable_extensions.dart.lib.js.map
