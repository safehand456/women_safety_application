// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.6.0 (stable) (Thu Dec 5 07:46:24 2024 -0800) on "windows_x64"
// Module: packages/flutter/src/scheduler/ticker.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/memory_allocations.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__scheduler__ticker_dart(dart_sdk, packages__flutter__src__foundation__memory_allocations$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const memory_allocations = packages__flutter__src__foundation__memory_allocations$46dart.src__foundation__memory_allocations;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const assertions = packages__flutter__src__foundation___platform_web$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation___platform_web$46dart.src__foundation__diagnostics;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var ticker$ = Object.create(dart.library);
  var $trimRight = dartx.trimRight;
  var $split = dartx.split;
  var $forEach = dartx.forEach;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [TickerCanceled_ticker]: null
      }, ticker$.TickerCanceled.prototype));
    }
  });
  var C = [void 0];
  var I = [
    "package:flutter/src/scheduler/ticker.dart",
    "file:///C:/Users/Varun/Downloads/flutter_windows_3.27.1-stable/flutter/packages/flutter/lib/src/scheduler/ticker.dart",
    "dart:core",
    "dart:async"
  ];
  ticker$.TickerProvider = class TickerProvider extends core.Object {};
  (ticker$.TickerProvider.new = function() {
    ;
  }).prototype = ticker$.TickerProvider.prototype;
  dart.addRtiResources(ticker$.TickerProvider, ["flutter__src__scheduler__ticker|TickerProvider"]);
  dart.setLibraryUri(ticker$.TickerProvider, I[0]);
  var debugLabel$ = dart.privateName(ticker$, "Ticker.debugLabel");
  var _future = dart.privateName(ticker$, "_future");
  var _muted = dart.privateName(ticker$, "_muted");
  var _startTime = dart.privateName(ticker$, "_startTime");
  var _animationId = dart.privateName(ticker$, "_animationId");
  var __Ticker__debugCreationStack = dart.privateName(ticker$, "_#Ticker#_debugCreationStack");
  var _onTick$ = dart.privateName(ticker$, "_onTick");
  var _debugCreationStack = dart.privateName(ticker$, "_debugCreationStack");
  var _cancel = dart.privateName(ticker$, "_cancel");
  var _complete = dart.privateName(ticker$, "_complete");
  var _tick = dart.privateName(ticker$, "_tick");
  ticker$.Ticker = class Ticker extends core.Object {
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static ['_#new#tearOff'](_onTick, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      return new ticker$.Ticker.new(_onTick, {debugLabel: debugLabel});
    }
    get muted() {
      return this[_muted];
    }
    set muted(value) {
      if (value === this.muted) {
        return;
      }
      this[_muted] = value;
      if (value) {
        this.unscheduleTick();
      } else if (this.shouldScheduleTick) {
        this.scheduleTick();
      }
    }
    get isTicking() {
      if (this[_future] == null) {
        return false;
      }
      if (this.muted) {
        return false;
      }
      if (binding.SchedulerBinding.instance.framesEnabled) {
        return true;
      }
      if (binding.SchedulerBinding.instance.schedulerPhase !== binding.SchedulerPhase.idle) {
        return true;
      }
      return false;
    }
    get isActive() {
      return this[_future] != null;
    }
    start() {
      if (!dart.fn(() => {
        if (this.isActive) {
          dart.throw(new assertions.FlutterError.fromParts(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<flutter__src__foundation__diagnostics|DiagnosticsNode>", true), [new assertions.ErrorSummary.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorSummary", true), "A ticker was started twice."), new assertions.ErrorDescription.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__assertions|ErrorDescription", true), "A ticker that is already active cannot be started again without first stopping it."), this.describeForError("The affected ticker was")])));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 184, 12, "() {\r\n      if (isActive) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('A ticker was started twice.'),\r\n          ErrorDescription('A ticker that is already active cannot be started again without first stopping it.'),\r\n          describeForError('The affected ticker was'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[_startTime] == null)) dart.assertFailed(null, I[1], 194, 12, "_startTime == null");
      this[_future] = new ticker$.TickerFuture.__();
      if (this.shouldScheduleTick) {
        this.scheduleTick();
      }
      if (binding.SchedulerBinding.instance.schedulerPhase.index > binding.SchedulerPhase.idle.index && binding.SchedulerBinding.instance.schedulerPhase.index < binding.SchedulerPhase.postFrameCallbacks.index) {
        this[_startTime] = binding.SchedulerBinding.instance.currentFrameTimeStamp;
      }
      return dart.nullCheck(this[_future]);
    }
    describeForError(name) {
      return new diagnostics.DiagnosticsProperty.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsProperty<flutter__src__scheduler__ticker|Ticker>", true), name, this, {description: this.toString({debugIncludeStack: true})});
    }
    stop(opts) {
      let canceled = opts && 'canceled' in opts ? opts.canceled : false;
      if (!this.isActive) {
        return;
      }
      let localFuture = dart.nullCheck(this[_future]);
      this[_future] = null;
      this[_startTime] = null;
      if (!!this.isActive) dart.assertFailed(null, I[1], 238, 12, "!isActive");
      this.unscheduleTick();
      if (canceled) {
        localFuture[_cancel](this);
      } else {
        localFuture[_complete]();
      }
    }
    get scheduled() {
      return this[_animationId] != null;
    }
    get shouldScheduleTick() {
      return !this.muted && this.isActive && !this.scheduled;
    }
    [_tick](timeStamp) {
      let t$360;
      if (!this.isTicking) dart.assertFailed(null, I[1], 270, 12, "isTicking");
      if (!this.scheduled) dart.assertFailed(null, I[1], 271, 12, "scheduled");
      this[_animationId] = null;
      this[_startTime] == null ? this[_startTime] = timeStamp : null;
      t$360 = timeStamp['-'](dart.nullCheck(this[_startTime]));
      this[_onTick$](t$360);
      if (this.shouldScheduleTick) {
        this.scheduleTick({rescheduling: true});
      }
    }
    scheduleTick(opts) {
      let rescheduling = opts && 'rescheduling' in opts ? opts.rescheduling : false;
      if (!!this.scheduled) dart.assertFailed(null, I[1], 289, 12, "!scheduled");
      if (!this.shouldScheduleTick) dart.assertFailed(null, I[1], 290, 12, "shouldScheduleTick");
      this[_animationId] = binding.SchedulerBinding.instance.scheduleFrameCallback(dart.bind(this, _tick), {rescheduling: rescheduling});
    }
    unscheduleTick() {
      if (this.scheduled) {
        binding.SchedulerBinding.instance.cancelFrameCallbackWithId(dart.nullCheck(this[_animationId]));
        this[_animationId] = null;
      }
      if (!!this.shouldScheduleTick) dart.assertFailed(null, I[1], 306, 12, "!shouldScheduleTick");
    }
    absorbTicker(originalTicker) {
      if (!!this.isActive) dart.assertFailed(null, I[1], 319, 12, "!isActive");
      if (!(this[_future] == null)) dart.assertFailed(null, I[1], 320, 12, "_future == null");
      if (!(this[_startTime] == null)) dart.assertFailed(null, I[1], 321, 12, "_startTime == null");
      if (!(this[_animationId] == null)) dart.assertFailed(null, I[1], 322, 12, "_animationId == null");
      if (!(originalTicker[_future] == null === (originalTicker[_startTime] == null))) dart.assertFailed("Cannot absorb Ticker after it has been disposed.", I[1], 323, 12, "(originalTicker._future == null) == (originalTicker._startTime == null)");
      if (originalTicker[_future] != null) {
        this[_future] = originalTicker[_future];
        this[_startTime] = originalTicker[_startTime];
        if (this.shouldScheduleTick) {
          this.scheduleTick();
        }
        originalTicker[_future] = null;
        originalTicker.unscheduleTick();
      }
      originalTicker.dispose();
    }
    dispose() {
      {
        memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectDisposed({object: this});
      }
      if (this[_future] != null) {
        let localFuture = dart.nullCheck(this[_future]);
        this[_future] = null;
        if (!!this.isActive) dart.assertFailed(null, I[1], 357, 14, "!isActive");
        this.unscheduleTick();
        localFuture[_cancel](this);
      }
      if (!dart.fn(() => {
        this[_startTime] = core.Duration.zero;
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 361, 12, "() {\r\n      // We intentionally don't null out _startTime. This means that if start()\r\n      // was ever called, the object is now in a bogus state. This weakly helps\r\n      // catch cases of use-after-dispose.\r\n      _startTime = Duration.zero;\r\n      return true;\r\n    }()");
    }
    get [_debugCreationStack]() {
      let t$360;
      t$360 = this[__Ticker__debugCreationStack];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_debugCreationStack")) : t$360;
    }
    set [_debugCreationStack](_debugCreationStack$35param) {
      this[__Ticker__debugCreationStack] = _debugCreationStack$35param;
    }
    toString(opts) {
      let debugIncludeStack = opts && 'debugIncludeStack' in opts ? opts.debugIncludeStack : false;
      let buffer = new core.StringBuffer.new();
      buffer.write(object.objectRuntimeType(this, "Ticker") + "(");
      if (!dart.fn(() => {
        let t$360;
        buffer.write((t$360 = this.debugLabel, t$360 == null ? "" : t$360));
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 380, 12, "() {\r\n      buffer.write(debugLabel ?? '');\r\n      return true;\r\n    }()");
      buffer.write(")");
      if (!dart.fn(() => {
        if (debugIncludeStack) {
          buffer.writeln();
          buffer.writeln("The stack trace when the " + dart.str(dart.runtimeType(this)) + " was actually created was:");
          assertions.FlutterError.defaultStackFilter(dart.toString(this[_debugCreationStack])[$trimRight]()[$split]("\n"))[$forEach](dart.bind(buffer, 'writeln'));
        }
        return true;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 385, 12, "() {\r\n      if (debugIncludeStack) {\r\n        buffer.writeln();\r\n        buffer.writeln('The stack trace when the $runtimeType was actually created was:');\r\n        FlutterError.defaultStackFilter(_debugCreationStack.toString().trimRight().split('\\n')).forEach(buffer.writeln);\r\n      }\r\n      return true;\r\n    }()");
      return dart.toString(buffer);
    }
  };
  (ticker$.Ticker.new = function(_onTick, opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[_future] = null;
    this[_muted] = false;
    this[_startTime] = null;
    this[_animationId] = null;
    this[__Ticker__debugCreationStack] = null;
    this[_onTick$] = _onTick;
    this[debugLabel$] = debugLabel;
    if (!dart.fn(() => {
      this[_debugCreationStack] = core.StackTrace.current;
      return true;
    }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true))()) dart.assertFailed(null, I[1], 85, 12, "() {\r\n      _debugCreationStack = StackTrace.current;\r\n      return true;\r\n    }()");
    {
      memory_allocations.FlutterMemoryAllocations.instance.dispatchObjectCreated({library: "package:flutter/scheduler.dart", className: dart.strSafe(dart_rti.createRuntimeType(dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__ticker|Ticker", true))), object: this});
    }
  }).prototype = ticker$.Ticker.prototype;
  dart.addRtiResources(ticker$.Ticker, ["flutter__src__scheduler__ticker|Ticker"]);
  dart.setMethodSignature(ticker$.Ticker, () => dart.global.Object.setPrototypeOf({
    start: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__ticker|TickerFuture()", true),
    describeForError: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__foundation__diagnostics|DiagnosticsNode(core|String)", true),
    stop: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({canceled:core|bool})", true),
    [_tick]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true),
    scheduleTick: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~({rescheduling:core|bool})", true),
    unscheduleTick: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    absorbTicker: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(flutter__src__scheduler__ticker|Ticker)", true),
    dispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    toString: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String({debugIncludeStack:core|bool})", true),
    [$toString]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String({debugIncludeStack:core|bool})", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(ticker$.Ticker))));
  dart.setGetterSignature(ticker$.Ticker, () => dart.global.Object.setPrototypeOf({
    muted: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isTicking: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isActive: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    scheduled: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    shouldScheduleTick: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    [_debugCreationStack]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(ticker$.Ticker))));
  dart.setSetterSignature(ticker$.Ticker, () => dart.global.Object.setPrototypeOf({
    muted: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    [_debugCreationStack]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)
  }, dart.getSetters(dart.global.Object.getPrototypeOf(ticker$.Ticker))));
  dart.setLibraryUri(ticker$.Ticker, I[0]);
  dart.setFieldSignature(ticker$.Ticker, () => dart.global.Object.setPrototypeOf({
    [_future]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__ticker|TickerFuture?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[0]
    },
    [_muted]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_startTime]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Duration?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_onTick$]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Duration)", true),
      isConst: false,
      isFinal: true
    },
    [_animationId]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    debugLabel: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [__Ticker__debugCreationStack]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(ticker$.Ticker))));
  dart.defineExtensionMethods(ticker$.Ticker, ['toString']);
  var _primaryCompleter = dart.privateName(ticker$, "_primaryCompleter");
  var _secondaryCompleter = dart.privateName(ticker$, "_secondaryCompleter");
  var _completed = dart.privateName(ticker$, "_completed");
  var TickerCanceled_ticker = dart.privateName(ticker$, "TickerCanceled.ticker");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _as = dart.privateName(dart_rti, "_as");
  ticker$.TickerFuture = class TickerFuture extends core.Object {
    static ['_#_#tearOff']() {
      return new ticker$.TickerFuture.__();
    }
    static ['_#complete#tearOff']() {
      return new ticker$.TickerFuture.complete();
    }
    [_complete]() {
      let t$360;
      if (!(this[_completed] == null)) dart.assertFailed(null, I[1], 432, 12, "_completed == null");
      this[_completed] = true;
      this[_primaryCompleter].complete();
      t$360 = this[_secondaryCompleter];
      t$360 == null ? null : t$360.complete();
    }
    [_cancel](ticker) {
      let t$360;
      if (!(this[_completed] == null)) dart.assertFailed(null, I[1], 439, 12, "_completed == null");
      this[_completed] = false;
      t$360 = this[_secondaryCompleter];
      t$360 == null ? null : t$360.completeError(new ticker$.TickerCanceled.new(ticker));
    }
    whenCompleteOrCancel(callback) {
      function thunk(value) {
        callback();
      }
      dart.fn(thunk, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(@)", true));
      this.orCancel.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true), thunk, {onError: thunk});
    }
    get orCancel() {
      if (this[_secondaryCompleter] == null) {
        this[_secondaryCompleter] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>", true));
        if (this[_completed] != null) {
          if (dart.nullCheck(this[_completed])) {
            dart.nullCheck(this[_secondaryCompleter]).complete();
          } else {
            dart.nullCheck(this[_secondaryCompleter]).completeError(C[0] || CT.C0);
          }
        }
      }
      return dart.nullCheck(this[_secondaryCompleter]).future;
    }
    asStream() {
      return this[_primaryCompleter].future.asStream();
    }
    catchError(onError, opts) {
      let test = opts && 'test' in opts ? opts.test : null;
      return this[_primaryCompleter].future.catchError(onError, {test: test});
    }
    then(R, onValue, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      return this[_primaryCompleter].future.then(dart_rti.instanceType(this)[_bind](R)[_eval]("1"), onValue, {onError: onError});
    }
    timeout(timeLimit, opts) {
      let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
      dart_rti._Universe.eval(dart_rti._theUniverse(), "~()?", true)[_as](onTimeout);
      return this[_primaryCompleter].future.timeout(timeLimit, {onTimeout: onTimeout});
    }
    whenComplete(action) {
      return this[_primaryCompleter].future.whenComplete(action);
    }
    toString() {
      return diagnostics.describeIdentity(this) + "(" + (this[_completed] == null ? "active" : dart.nullCheck(this[_completed]) ? "complete" : "canceled") + ")";
    }
  };
  (ticker$.TickerFuture.__ = function() {
    this[_primaryCompleter] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>", true));
    this[_secondaryCompleter] = null;
    this[_completed] = null;
    ;
  }).prototype = ticker$.TickerFuture.prototype;
  (ticker$.TickerFuture.complete = function() {
    this[_primaryCompleter] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>", true));
    this[_secondaryCompleter] = null;
    this[_completed] = null;
    this[_complete]();
  }).prototype = ticker$.TickerFuture.prototype;
  dart.addRtiResources(ticker$.TickerFuture, ["flutter__src__scheduler__ticker|TickerFuture", "async|Future"]);
  dart.setMethodSignature(ticker$.TickerFuture, () => dart.global.Object.setPrototypeOf({
    [_complete]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_cancel]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(flutter__src__scheduler__ticker|Ticker)", true),
    whenCompleteOrCancel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~())", true),
    asStream: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Stream<~>()", true),
    catchError: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|Function{test:core|bool(core|Object)?})", true),
    then: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<0^>(0^/(~){onError:core|Function?})<core|Object?>", true),
    timeout: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(core|Duration{onTimeout:core|Object?})", true),
    whenComplete: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>(@())", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(ticker$.TickerFuture))));
  dart.setMethodsDefaultTypeArgSignature(ticker$.TickerFuture, () => dart.global.Object.setPrototypeOf({
    then: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(ticker$.TickerFuture))));
  dart.setGetterSignature(ticker$.TickerFuture, () => dart.global.Object.setPrototypeOf({
    orCancel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(ticker$.TickerFuture))));
  dart.setLibraryUri(ticker$.TickerFuture, I[0]);
  dart.setFieldSignature(ticker$.TickerFuture, () => dart.global.Object.setPrototypeOf({
    [_primaryCompleter]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[3]
    },
    [_secondaryCompleter]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<~>?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[3]
    },
    [_completed]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(ticker$.TickerFuture))));
  dart.defineExtensionMethods(ticker$.TickerFuture, ['toString']);
  const ticker$0 = TickerCanceled_ticker;
  ticker$.TickerCanceled = class TickerCanceled extends core.Object {
    get ticker() {
      return this[ticker$0];
    }
    set ticker(value) {
      super.ticker = value;
    }
    static ['_#new#tearOff'](ticker = null) {
      return new ticker$.TickerCanceled.new(ticker);
    }
    toString() {
      if (this.ticker != null) {
        return "This ticker was canceled: " + dart.str(this.ticker);
      }
      return "The ticker was canceled before the \"orCancel\" property was first used.";
    }
  };
  (ticker$.TickerCanceled.new = function(ticker = null) {
    this[ticker$0] = ticker;
    ;
  }).prototype = ticker$.TickerCanceled.prototype;
  dart.addRtiResources(ticker$.TickerCanceled, ["flutter__src__scheduler__ticker|TickerCanceled", "core|Exception"]);
  dart.setLibraryUri(ticker$.TickerCanceled, I[0]);
  dart.setFieldSignature(ticker$.TickerCanceled, () => dart.global.Object.setPrototypeOf({ticker: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "flutter__src__scheduler__ticker|Ticker?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[0]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(ticker$.TickerCanceled))));
  dart.defineExtensionMethods(ticker$.TickerCanceled, ['toString']);
  dart.moduleConstCaches.set("packages/flutter/src/scheduler/ticker.dart", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"flutter__src__foundation__assertions|ErrorSummary":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__assertions|_ErrorDiagnostic":{"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"flutter__src__foundation__diagnostics|DiagnosticsProperty":{"DiagnosticsProperty.T":"1","flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"flutter__src__foundation__assertions|ErrorDescription":{"flutter__src__foundation__assertions|_ErrorDiagnostic":[],"DiagnosticsProperty.T":"core|List<core|Object>","flutter__src__foundation__diagnostics|DiagnosticsProperty":["core|List<core|Object>"],"flutter__src__foundation__diagnostics|DiagnosticsNode":[]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"flutter__src__scheduler__ticker|TickerFuture":{"Future.T":"~","async|Future":["~"]},"async|Future":{"Future.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Completer":{"Completer.T":"1"},"async|Stream":{"Stream.T":"1"},"flutter__src__scheduler__ticker|TickerCanceled":{"core|Exception":[]}}'));
  dart.trackLibraries("packages/flutter/src/scheduler/ticker.dart", {
    "package:flutter/src/scheduler/ticker.dart": ticker$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["ticker.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/flutter/src/scheduler/ticker.dart.lib.js"}');
  // Exports:
  return {
    src__scheduler__ticker: ticker$
  };
}));

//# sourceMappingURL=ticker.dart.lib.js.map
